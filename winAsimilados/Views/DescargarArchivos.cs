using DevExpress.XtraEditors;
using DevExpress.XtraSplashScreen;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using C = winAsimilados.Controller;
using E = winAsimilados.Entities;
using M = winAsimilados.Models;
namespace winAsimilados.Views
{
    public partial class DescargarArchivos : Form
    {
        #region variables
        string EmpresaID = Properties.Settings.Default["EmpresaNominaID"].ToString();
        string IDCliente;
        string IDEmpresaPago;
        string periodo;
        #endregion
        #region objetos
        SplashScreenManager splash;
        List<E.Periodo> periodos = new List<E.Periodo>();
        C.Controller ctr = new C.Controller();
        List<E.EmpresaPago> listaEmpresasPago = new List<E.EmpresaPago>();
        List<M.Archivos> listaArchivos = new List<M.Archivos>();
        #endregion
        public DescargarArchivos(SplashScreenManager splashScreenManager)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            splash = splashScreenManager;
            sqlDataSource1.Fill();
        }

        private void DescargarArchivos_Load(object sender, EventArgs e)
        {
            //lookUpCliente.Properties.KeyMember = "ID";
            //lookUpEmpresa.CascadingOwner = lookUpCliente;
            //lookUpEmpresa.Properties.CascadingMember = "ResumenNominaIDCliente";
            splash.CloseWaitForm();
        }

        private void lookUpCliente_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                lookUpEmpresa.EditValue = null;
                IDCliente = lookUpCliente.EditValue.ToString();
                listaEmpresasPago = ctr.GetEmpresaPagos(IDCliente);
                lookUpEmpresa.Properties.DataSource = listaEmpresasPago;
                lookUpEmpresa.Properties.DisplayMember = "RazonSocial";
                lookUpEmpresa.Properties.ValueMember = "IDEmpresa";
                lookUpEmpresa.Properties.PopulateColumns();
                lookUpEmpresa.Properties.Columns[0].Visible = false;
                lookUpEmpresa.Properties.Columns[3].Visible = false;
                lookUpEmpresa.Properties.Columns[4].Visible = false;
                //sqlDataSource1.Queries[1].Parameters[1].Value = lookUpCliente.EditValue.ToString();
                //sqlDataSource1.Queries[1].Parameters[0].Value = Empresa;                       
                //sqlDataSource1.Fill();
                //lookUpEmpresa.Properties.DataSource = sqlDataSource1.Queries[1];    
            }
            catch (Exception lookUpCliente)
            {
                string mensaje = string.Concat("Error al buscar empresas que realizan el pago al cliente", "\n", lookUpCliente.Message);
                XtraMessageBox.Show(mensaje, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        
        }

        private void lookUpEmpresa_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                IDEmpresaPago = (string)lookUpEmpresa.EditValue;
                IDEmpresaPago = (IDEmpresaPago == null ? "" : IDEmpresaPago);
                periodos.Clear();
                periodos = ctr.GetPeriodosNominaDescargaArchivos(IDEmpresaPago, IDCliente);
                lookUpPeriodo.EditValue = null;
                lookUpPeriodo.Properties.DataSource = periodos;
                lookUpPeriodo.Properties.DisplayMember = "periodo";
                lookUpPeriodo.Properties.ValueMember = "periodo";                
            }
            catch (Exception lookUpEmpresa)
            {
                string mensaje = string.Concat("Error al cargar los periodos", "\n", lookUpEmpresa.Message);
                XtraMessageBox.Show(mensaje, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lookUpPeriodo_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                periodo = (string)lookUpPeriodo.EditValue;
                periodo = (periodo == null ? "" : periodo);
            }
            catch (Exception lookUpPeriodo)
            {
                string mensaje = string.Concat("Error al seleccionar el periodo", "\n", lookUpPeriodo.Message);
                XtraMessageBox.Show(mensaje, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnBuscarArchivos_Click(object sender, EventArgs e)
        {
            try
            {
                if (lookUpPeriodo.Text.Equals("") || lookUpCliente.Text.Equals("") || lookUpEmpresa.Text.Equals(""))
                {
                    string mensaje = "Por favor complete los campos.";
                    XtraMessageBox.Show(mensaje, "Buscar Archivos", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    ctr.GetListaArchivos(gridControlArchivos, IDCliente, IDEmpresaPago, periodo, EmpresaID);
                }
            }catch (Exception bntBuscar)
            {
                string mensaje = string.Concat("Error al buscar archivos.", "\n", bntBuscar.Message);
                XtraMessageBox.Show(mensaje, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnDescargar_Click(object sender, EventArgs e)
        {
            try
            {
                listaArchivos.Clear();
                if (gridViewArchivos.RowCount.Equals(0))
                {
                    XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                if (gridViewArchivos.SelectedRowsCount.Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                for (int i = 0; i < gridViewArchivos.RowCount; i++)
                {
                    if (gridViewArchivos.IsRowSelected(i))
                    {
                        int IDArchivo = Convert.ToInt32(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[0]));
                        byte[] archivoByte = (byte[])gridViewArchivos.GetGroupRowValue(i, gridViewArchivos.Columns[3]);
                        listaArchivos.Add(new M.Archivos
                        {
                            archivoID = Convert.ToInt32(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[0])),
                            archivoNombre = gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[1]).ToString(),
                            archivoPath = gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[2]).ToString(),
                            archivoCargado = (byte[])gridViewArchivos.GetGroupRowValue(i, gridViewArchivos.Columns[3]),
                            archivoFechaCarga = Convert.ToDateTime(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[4])),
                            archivoUsuarioCarga = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[5])),
                            archivoIDCliente = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[6])),
                            archivoCliente = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[7])),
                            archivoIDEmpresa = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[8])),
                            archivoEmpresa = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[9])),
                            archivoPeriodo = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[10])),
                            archivoNominaEmpresaID = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[11]))
                        });
                    }
                }
                foreach (var archivoCargado in listaArchivos)
                {
                     using (Models.AsimiladosEntitiesArchivos ar = new Models.AsimiladosEntitiesArchivos())
                    {
                        var archivo = ar.Archivos.Find(archivoCargado.archivoID);

                        string path = @"C:\";
                        string folder = path + @"AsimiladosDescargas\" + archivo.archivoCliente + "\\" + archivo.archivoEmpresa + "\\" + archivo.archivoPeriodo + "\\";
                        string fullFilePath = folder + archivo.archivoPath;

                        if (!Directory.Exists(folder))
                        {
                            Directory.CreateDirectory(folder);
                        }

                        //if (File.Exists(fullFilePath))
                        //{
                        //    Directory.Delete(fullFilePath);
                        //}


                        File.WriteAllBytes(fullFilePath, archivo.archivoCargado);

                        Process.Start(fullFilePath);
                    }
                }
                //ctr.DescargaArchivos(listaArchivos);

            }
            catch (Exception btnDescargar)
            {
                string mensaje = string.Concat("Error al intentar descargar archivo(s).", "\n", btnDescargar.Message);
                XtraMessageBox.Show(mensaje, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnEliminar_Click(object sender, EventArgs e)
        {
            try
            {
                listaArchivos.Clear();
                if (gridViewArchivos.RowCount.Equals(0))
                {
                    XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                if (gridViewArchivos.SelectedRowsCount.Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                var respuesta = XtraMessageBox.Show("¿Desea eliminar la seleccion de archivo(s)?", "Eliminar Archivo", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (respuesta.Equals(DialogResult.Yes))
                {
                    for (int i = 0; i < gridViewArchivos.RowCount; i++)
                    {
                        if (gridViewArchivos.IsRowSelected(i))
                        {
                            int IDArchivo = Convert.ToInt32(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[0]));
                            byte[] archivoByte = (byte[])gridViewArchivos.GetGroupRowValue(i, gridViewArchivos.Columns[3]);
                            listaArchivos.Add(new M.Archivos
                            {
                                archivoID = Convert.ToInt32(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[0])),
                                archivoNombre = gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[1]).ToString(),
                                archivoPath = gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[2]).ToString(),
                                archivoCargado = (byte[])gridViewArchivos.GetGroupRowValue(i, gridViewArchivos.Columns[3]),
                                archivoFechaCarga = Convert.ToDateTime(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[4])),
                                archivoUsuarioCarga = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[5])),
                                archivoIDCliente = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[6])),
                                archivoCliente = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[7])),
                                archivoIDEmpresa = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[8])),
                                archivoEmpresa = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[9])),
                                archivoPeriodo = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[10])),
                                archivoNominaEmpresaID = Convert.ToString(gridViewArchivos.GetRowCellValue(i, gridViewArchivos.Columns[11]))
                            });
                        }
                    }
                    foreach (var archivoCargado in listaArchivos)
                    {
                        using (Models.AsimiladosEntitiesArchivos ar = new Models.AsimiladosEntitiesArchivos())
                        {
                            var archivo = ar.Archivos.Find(archivoCargado.archivoID);

                            string path = @"C:\";
                            string folder = path + @"AsimiladosDescargas\" + archivo.archivoCliente + "\\" + archivo.archivoEmpresa + "\\" + archivo.archivoPeriodo + "\\";
                            string fullFilePath = folder + archivo.archivoPath;

                            string URL = archivo.archivosURL;

                            if (File.Exists(fullFilePath))
                            {
                                File.SetAttributes(fullFilePath, FileAttributes.Normal);
                                File.Delete(fullFilePath);    
                            }
                            ar.Archivos.Remove(archivo);
                            ar.SaveChanges();
                        }
                    }
                    string mensaje = "¡Archio(s) eliminados con éxito!";
                    XtraMessageBox.Show(mensaje, "Eliminar Archivos", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ctr.GetListaArchivos(gridControlArchivos, IDCliente, IDEmpresaPago, periodo, EmpresaID);
                }
            }
            catch (Exception btnEliminar)
            {
                string mensaje = string.Concat("Error al intentar eliminar archivo(s).", "\n", btnEliminar.Message);
                XtraMessageBox.Show(mensaje, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}

