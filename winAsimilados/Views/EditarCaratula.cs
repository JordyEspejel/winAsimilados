using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraSplashScreen;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using C = winAsimilados.Controller;
using E = winAsimilados.Entities;
using V = winAsimilados.Views;
using DevExpress.XtraGrid.Views.Base;
using System.Runtime.InteropServices;
using DevExpress.XtraEditors;
using Excel = Microsoft.Office.Interop.Excel;
using System.IO;
using System.Globalization;
using M = winAsimilados.Models;

namespace winAsimilados.Views
{
    public partial class EditarCaratula : Form
    {
        C.Controller controlador = new C.Controller();
        E.DetalleLayout detalle = new E.DetalleLayout();
        E.Caratula caratula = new E.Caratula(); //objeto para obtener información
        E.Caratula caratulaPago = new E.Caratula(); //objeto para update
        E.Empleado empleadoLayout = new E.Empleado();
        E.Calculo calcMasiv = new E.Calculo();
        E.Parametros parametrosLayout = new E.Parametros();
        E.Banco datosBanco = new E.Banco();
        E.ClienteAsimilado infoCliente = new E.ClienteAsimilado();
        E.DetalleLayout detalleLayout = new E.DetalleLayout();
        E.ClaveProdServ claveServicio = new E.ClaveProdServ();
        M.Nomina nomina = new M.Nomina();
        E.Parametros parametrosNomina = new E.Parametros();
        string nomCaratula, nombreLayout;
        string idEmpresaCaratula;
        SplashScreenManager SplashScreen;
        bool calcUnitario;
        //variables excel
        int IDEmpl;
        decimal importeExcel = 0;
        string periodicidadExcel = "MENSUAL";
        string nominaEmpresaID;
        decimal ingresos, ingresosMasiv, ISRMasiv, netoMasiv;
        decimal LimInferiorLayout, ExLimInfLayout, PerExLimInfLayout, ImpMargLayout, CFLayout, SubLayout;
        decimal totalPagoAsimilados = 0, otrosConceptos = 0, depositoNeto = 0, aguinaldo = 0, vacaciones = 0, primaVac = 0, descuento = 0;
        string periPagoLayout;
        string tipoIngresos;
        string rfcEmplMasiv;
        string numEmplLayoutBanorte;
        string empresa, rfc, descPago, cuentaDestino;
        string resumenNominaIDActual;
        string usuarioSistema = Properties.Settings.Default.Usuario.ToString();
        private void lookUpClve_EditValueChanged(object sender, EventArgs e)
        {
            string clave = lookUpClve.EditValue.ToString();
            claveServicio = controlador.GetClaveProdServ(clave);
            txtDescCve.Text = claveServicio.descripcion;
        }

        private void EditarCaratula_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
        }

        private void lookUpClte_EditValueChanged(object sender, EventArgs e)
        {
            infoCliente = controlador.GetInfoCliente(lookUpClte.EditValue.ToString());
            string idclte = infoCliente.ID;
            var claves = new List<E.ListaClaveProdServ>();
            claves = controlador.ClavesClientes(infoCliente.ID, claves);
            lookUpClve.Properties.DataSource = claves;
            lookUpClve.Properties.ValueMember = "clave";
            lookUpClve.Properties.DisplayMember = "clave";
            //lookUpClave.EditValue = null;           
        }

        private void lookUpBanco_EditValueChanged(object sender, EventArgs e)
        {
            //string banco = lookUpBanco.EditValue.ToString();
            //datosBanco = controlador.GetInfoBanco(banco, idEmpresaCaratula);
        }

        public EditarCaratula(string caratula, string layout, SplashScreenManager splash, string rfcEmpresa, string ResumenNominaID )
        {
            nomCaratula = caratula;
            SplashScreen = splash;
            nombreLayout = layout;
            rfc = rfcEmpresa;
            resumenNominaIDActual = ResumenNominaID;
            nominaEmpresaID = Properties.Settings.Default["EmpresaNominaID"].ToString();
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
        }

        private void CargaInformación()
        {
            controlador.DetalleLayoytEditar(gridControlEditaCaratula, nombreLayout);
            caratula = controlador.GetDatosCaratula(nomCaratula);
            detalle = controlador.GetDetalleLayout(nombreLayout);
            FecApp.Value = caratula.FechaAplicacion;
            FecIni.Value = caratula.FechaIniPeriodo;
            FecFin.Value = caratula.FechaFinPeriodo;
            lookUpEmp.EditValue = caratula.IDEmpresa;
            lookUpBanco.ReadOnly = false;
            lookUpBanco.EditValue = caratula.Banco;
            //lookUpBanco.Text = caratula.Banco;
            lookUpBanco.ReadOnly = true;
            txtAgu.Text = caratula.ProvAguinaldo.ToString();
            txtVac.Text = caratula.ProviVacaciones.ToString();
            txtPVac.Text = caratula.ProviPrimVacacional.ToString();
            txtBoxObsCarat.Text = caratula.Observaciones;
            lookUpClte.EditValue = caratula.IDCliente;
            txtBoxObLay.Text = detalle.Detalles;
            lookUpClve.EditValue = caratula.ClaveFacturacion;
            lookUpTipoPago.EditValue = caratula.TipoPago;
            lookUpFormaPago.EditValue = caratula.FormaPago;
        }

        private void HabilitarCampos()
        {
            layoutControlItemBtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            emptySpaceItem1.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            FecApp.Enabled = true;
            FecIni.Enabled = true;
            FecFin.Enabled = true;
            gridViewEditaCaratula.OptionsBehavior.Editable = true;
            lookUpEmp.ReadOnly = false;
            lookUpBanco.ReadOnly = false;
            txtAgu.ReadOnly = false;
            txtVac.ReadOnly = false;
            txtPVac.ReadOnly = false;
            lookUpClve.ReadOnly = false;
            lookUpFormaPago.ReadOnly = false;
            lookUpTipoPago.ReadOnly = false;
            txtBoxObsCarat.ReadOnly = false;
            txtBoxObsCarat.BackColor = Color.White;
            //lookUpClte.ReadOnly = false;
            txtBoxObLay.ReadOnly = false;
            txtBoxObLay.BackColor = Color.White;
            layoutControlItemBtnAceptar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            layoutControlItemBtnCancelar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            layoutControlItembtnImporta.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            emptySpaceItem3.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
        }

        private void lookUpEmp_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                idEmpresaCaratula = lookUpEmp.EditValue.ToString();
                var bancos = new List<E.ListaBancos>();
                string empresa = idEmpresaCaratula;
                bancos = controlador.Bancos(idEmpresaCaratula, bancos);
                lookUpBanco.Properties.DataSource = bancos;
                lookUpBanco.Properties.ValueMember = "Nombre";
                lookUpBanco.Properties.DisplayMember = "Nombre";
            }
            catch (Exception empresaPago)
            {

            }
        }

        private void btnEditar_Click(object sender, EventArgs e)
        {
            this.HabilitarCampos();
            //for (int i = 0; i < gridViewEditaCaratula.DataRowCount; i++)
            //{                
            //    if (!gridViewEditaCaratula.GetRowCellValue(i, "estatus").ToString().Equals("Timbrado"))
            //    {                    
            //        gridViewEditaCaratula.Columns[5].OptionsColumn.AllowEdit = false;
            //        gridViewEditaCaratula.Columns[13].OptionsColumn.AllowEdit = false;
            //    }
            //}
        }

        private void DesahiblitarCampos()
        {
            FecApp.Enabled = false;
            FecIni.Enabled = false;
            FecFin.Enabled = false;
            lookUpEmp.ReadOnly = true;
            lookUpBanco.ReadOnly = true;
            txtAgu.ReadOnly = true;
            txtVac.ReadOnly = true;
            txtPVac.ReadOnly = true;
            txtBoxObsCarat.ReadOnly = true;
            lookUpClve.ReadOnly = true;
            lookUpFormaPago.ReadOnly = true;
            lookUpTipoPago.ReadOnly = true;
            txtBoxObsCarat.BackColor = Color.Gainsboro;
            lookUpClte.ReadOnly = true;
            txtBoxObLay.ReadOnly = true;
            txtBoxObLay.BackColor = Color.Gainsboro;
            gridViewEditaCaratula.OptionsBehavior.Editable = false;
            layoutControlItemBtnAceptar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItemBtnCancelar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItembtnImporta.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            emptySpaceItem3.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItemBtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            emptySpaceItem1.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            controlador.DetalleLayoytEditar(gridControlEditaCaratula, nombreLayout);
        }

        private void btnCancelar_Click(object sender, EventArgs e)
        {
            this.DesahiblitarCampos();
            this.CargaInformación();
        }

        private void btnAceptar_Click(object sender, EventArgs e)
        {
            try
            {
                var respuesta = XtraMessageBox.Show("¿Desea confirmar los cambios?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (respuesta.Equals(DialogResult.Yes))
                {
                    //infoCliente = controlador.GetInfoCliente(lookUpClte.EditValue.ToString());
                    string banco = lookUpBanco.EditValue.ToString();
                    datosBanco = controlador.GetInfoBanco(banco, idEmpresaCaratula);
                    splashScreenManager1.ShowWaitForm();
                    string IDCliente = lookUpClte.EditValue.ToString();
                    string IDEmpresa = lookUpEmp.EditValue.ToString();
                    string nombreCliente = lookUpClte.Text;
                    string fechaAplicacionPeriodo = FecApp.Value.ToString("yyyy-MM-dd");
                    //fechaAplicacion = Convert.ToDateTime(fecAplicación),
                    string fechaIniPeri = FecIni.Value.ToString("yyyy-MM-dd");
                    string fechaFinPeri = FecFin.Value.ToString("yyyy-MM-dd");
                    string fecha = DateTime.Now.ToString("dd/MM/yyyy");
                    DateTime fechaSistema = DateTime.Parse(fecha.Trim());
                    DateTime fechaApliPeri = DateTime.Parse(fechaAplicacionPeriodo.Trim());
                    DateTime fechaInPer = DateTime.Parse(fechaIniPeri.Trim());
                    DateTime fechaFiPer = DateTime.Parse(fechaFinPeri.Trim());
                    CultureInfo cul = CultureInfo.CurrentCulture;
                    int numSemana = cul.Calendar.GetWeekOfYear(fechaSistema, CalendarWeekRule.FirstDay,
                     DayOfWeek.Monday);
                    string anio = cul.Calendar.GetYear(fechaInPer).ToString();
                    string mes = cul.Calendar.GetMonth(fechaInPer).ToString();
                    int dia = cul.Calendar.GetDayOfMonth(fechaFiPer);

                    caratulaPago.ID = caratula.ID;
                    caratulaPago.FechaAplicacion = fechaApliPeri;
                    caratulaPago.FechaIniPeriodo = fechaInPer;
                    caratulaPago.FechaFinPeriodo = fechaFiPer;
                    caratulaPago.nominaEmpresaID = nominaEmpresaID;

                    string periodo = "";
                    //string mesActual = DateTime.Now.Month.ToString();
                    int contPeriodo = controlador.ObtieneContPeriodoNomina(nominaEmpresaID, mes,IDCliente, IDEmpresa, splashScreenManager1);
                    if (contPeriodo == 0 || contPeriodo == 1)
                    {
                        contPeriodo++;
                    }
                    if (Convert.ToInt32(mes) < 10)
                    {
                        if (contPeriodo < 10)
                        {
                            periodo = Convert.ToString(anio + "0" + mes + "00" + contPeriodo.ToString());
                        }
                        else
                        {
                            periodo = Convert.ToString(anio + "0" + mes + "0" + contPeriodo.ToString());
                        }

                    }
                    else
                    {
                        if (contPeriodo < 10)
                        {
                            periodo = Convert.ToString(anio + "0" + mes + "00" + contPeriodo.ToString());
                        }
                        else
                        {
                            periodo = Convert.ToString(anio + "0" + mes + "0" + contPeriodo.ToString());
                        }
                    }

                    //string periodo = Convert.ToString(DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + numSemana);

                    //nombreCaratula = lookUpCliente.Text + "-" + Convert.ToString(DateTime.Now.Day.ToString() + "-" + DateTime.Now.Month.ToString() + "-"
                    //+ DateTime.Now.Year.ToString() + ", " + DateTime.Now.Hour.ToString() + "-" + DateTime.Now.Minute.ToString()
                    //+ "-" + DateTime.Now.Second.ToString());

                    //string nombreLayout = "Pago_Layout_" + nombreCliente + "_" + Convert.ToString(DateTime.Now.Day.ToString() + "-" + DateTime.Now.Month.ToString() + "-"
                    //+ DateTime.Now.Year.ToString() + ", " + DateTime.Now.Hour.ToString() + "-" + DateTime.Now.Minute.ToString()
                    //+ "-" + DateTime.Now.Second.ToString());

                    //caratulaPago.caratula = nombreCaratula;
                    //caratulaPago.Layout = nombreLayout;
                    caratulaPago.IDCliente = lookUpClte.EditValue.ToString();
                    caratulaPago.IDEmpresa = lookUpEmp.EditValue.ToString();
                    if (lookUpEmp.Text.ToString().Equals(""))
                    {
                        caratulaPago.Empresa = caratula.Empresa;
                    }
                    else
                    {
                        caratulaPago.Empresa = lookUpEmp.Text.ToString();
                    }
                    
                    if (lookUpClte.Text.ToString().Equals(""))
                    {
                        caratulaPago.Cliente = caratula.Cliente;
                    }
                    else
                    {
                        caratulaPago.Cliente = lookUpClte.Text.ToString();
                    }
                    caratulaPago.TipoPeri = infoCliente.PERIODO_DE_PAGO;
                    int cont = 0;
                    parametrosLayout = controlador.GetParametros(rfc);
                    var listaLayout = new List<E.Layout>();
                    var empleadoMasivoLayout = new List<E.Empleado>();
                    M.ResumenNomina resumenNomina = new M.ResumenNomina();
                    parametrosNomina = controlador.GetParametros(rfc);
                    List<M.Nomina> nominaMasiva = new List<M.Nomina>();
                    E.Empleado[] emplMasiv = null;
                    for (int i = 0; i < gridViewEditaCaratula.RowCount; i++)
                    {
                        //if (gridViewEditaCaratula.IsRowSelected(i))
                        //{
                            //periodo = Convert.ToString(anio + mes + "0");
                            cont++;
                        int ID = Convert.ToInt32(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[0]).ToString());
                        ingresosMasiv = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[6]));
                            string ing = String.Format("{0:0.00}", ingresosMasiv);
                            ingresosMasiv = Convert.ToDecimal(ing);
                            tipoIngresos = gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[5]).ToString();
                            ISRMasiv = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[12]));
                            rfcEmplMasiv = gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[3]).ToString();
                            descPago = gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[20]).ToString();
                            netoMasiv = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[13]));
                            numEmplLayoutBanorte = gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[1]).ToString();
                            periPagoLayout = gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[5]).ToString();
                            LimInferiorLayout = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[7]));
                            ExLimInfLayout = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[8]));
                            PerExLimInfLayout = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[9]));
                            ImpMargLayout = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[10]));
                            CFLayout = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[11]));
                            SubLayout = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[31]));
                            otrosConceptos = Convert.ToDecimal(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[39]));


                            //depositoNeto = otrosConceptos + netoMasiv;

                            empleadoLayout = controlador.BuscaEmpleado(rfcEmplMasiv);
                            descuento = empleadoLayout.descuento;
                            depositoNeto = otrosConceptos + netoMasiv - descuento;

                        #region ifPeriodos
                        //if (empleadoLayout.Periodicidad.Equals("Semanal") || empleadoLayout.Periodicidad.Equals("02"))
                        //    {
                        //        if (dia <= 7)
                        //        {
                        //            periodo = periodo + "1";
                        //        }
                        //        else if (dia <= 14)
                        //        {
                        //            periodo = periodo + "2";
                        //        }
                            //    else if (dia <= 21)
                            //    {
                            //        periodo = periodo + "3";
                            //    }
                            //    else if (dia <= 28 || dia > 28)
                            //    {
                            //        periodo = periodo + "4";
                            //    }
                            //}
                            //else if (empleadoLayout.Periodicidad.Equals("Quincenal") || empleadoLayout.Periodicidad.Equals("04"))
                            //{
                            //    if (dia <= 15)
                            //    {
                            //        periodo = periodo + "1";
                            //    }
                            //    else
                            //    {
                            //        periodo = periodo + "2";
                            //    }
                            //}
                            //else if (empleadoLayout.Periodicidad.Equals("Mensual") || empleadoLayout.Periodicidad.Equals("05"))
                            //{
                            //    periodo = periodo + "1";
                            //}
                            #endregion

                            #region AsignaCuenta/Clabe
                            if (empleadoLayout.cuenta.Equals("No Definido") && empleadoLayout.clabe_bancaria.Equals("No Definido"))
                            {
                                cuentaDestino = "No Definido";
                            }

                            if (empleadoLayout.cuenta.Equals("0") && empleadoLayout.clabe_bancaria.Equals("0"))
                            {
                                cuentaDestino = "No Definido";
                            }

                            if (empleadoLayout.tipoPago.Equals("001"))
                            {
                                cuentaDestino = empleadoLayout.cuenta;
                            }
                            else if (empleadoLayout.tipoPago.Equals("040"))
                            {
                                cuentaDestino = empleadoLayout.clabe_bancaria;
                            }
                            #endregion

                            listaLayout.Add(new E.Layout
                            {
                                ID = Convert.ToString(ID),
                                numEmpl = Convert.ToInt32(numEmplLayoutBanorte),
                                nombreEmpleado = empleadoLayout.Nombre,
                                RFCEmpleado = empleadoLayout.RFC,
                                CURPEmpleado = empleadoLayout.CURP,
                                ingresos = ingresosMasiv,
                                periPago = periPagoLayout,
                                LimInferior = LimInferiorLayout,
                                ExLimInf = ExLimInfLayout,
                                PerExLimInf = PerExLimInfLayout,
                                ImpMarg = ImpMargLayout,
                                CF = CFLayout,
                                ISR = ISRMasiv,
                                Sub = SubLayout,
                                ingresosNet = netoMasiv,
                                operacion = "04",
                                claveID = Convert.ToString(numEmplLayoutBanorte),
                                cuentaOrigen = parametrosLayout.cuentaOrigen,
                                cuentaClaveDestino = cuentaDestino,
                                importe = netoMasiv,
                                referencia = numEmplLayoutBanorte + cont,
                                descripcion = descPago,
                                RFCOrdenante = parametrosLayout.RFC,
                                IVA = 0,
                                fechaAplicacion = Convert.ToDateTime(FecApp.Value.ToString()),
                                //fechaAplicacion = Convert.ToDateTime(fecAplicación),
                                fecIniPeri = Convert.ToDateTime(FecIni.Value.ToString()),
                                fecFinPeri = Convert.ToDateTime(FecFin.Value.ToString()),
                                institucionPago = empleadoLayout.Nombre.Replace(" ", string.Empty),
                                claveTipoCambio = "0",
                                fechaCreacion = System.DateTime.Today,
                                bancoEmpleado = empleadoLayout.banco,
                                //caratula = nombreCaratula,
                                IDEmpresa = idEmpresaCaratula,
                                periodo = periodo,
                                IDCliente = IDCliente,
                                layout = nombreLayout,
                                tipoPago = empleadoLayout.tipoPago,
                                otrosConceptos = otrosConceptos,
                                depositoNeto = depositoNeto,
                                cuentaBancaria = empleadoLayout.cuenta,
                                CLABE = empleadoLayout.clabe_bancaria,
                                bancoEmpresaPago = lookUpBanco.Text.ToString(),
                                descuentos = descuento,
                                ResumenNominaID = "Nomina_" + parametrosNomina.NombreEmpresa + "_" + periodo,
                                nominaEmpresaID = nominaEmpresaID
                            });

                            ////XtraMessageBox.Show("Fin instrucciones");
                            empleadoMasivoLayout.Add(new E.Empleado
                            {
                                RFC = rfcEmplMasiv,
                                IngresosBrutos = ingresosMasiv,
                                ISR = ISRMasiv,
                                IngresosNetos = netoMasiv,
                                Periodicidad = tipoIngresos
                            });
                            emplMasiv = empleadoMasivoLayout.ToArray();
                        //}
                        nominaMasiva.Add(new M.Nomina
                        {
                            nominanumEmpl = Convert.ToInt32(empleadoLayout.NumEmpl),
                            nominanombreEmpleado = empleadoLayout.Nombre,
                            nominaRFCEmpleado = rfcEmplMasiv,
                            nominaPeriodidicadPago = tipoIngresos,
                            nominaIngresos = netoMasiv,
                            nominaIngresosBruto = ingresosMasiv,
                            nominaISR = ISRMasiv,
                            nominaFechaPago = fechaApliPeri,
                            nominaFechaIniPeri = fechaInPer,
                            nominaFechaFinPero = fechaFiPer,
                            nominaFechaCreacion = DateTime.Now,
                            nominaEstatus = "Generado",
                            nominaEstatusSAT = "",
                            nominaPeriodo = periodo,
                            nominaEmpresa = parametrosNomina.NombreEmpresa,
                            nominaRFCEmpresa = parametrosNomina.RFC,
                            nominaDescripciponError = "",
                            nominaEmpresaNominaID = parametrosNomina.NOMINA_EMPRESA_ID,
                            nominaUsuario = usuarioSistema,
                            ResumenNominaID = "Nomina_" + parametrosNomina.NombreEmpresa + "_" + periodo
                        });
                    }
                    foreach (var item in listaLayout)
                    {
                        totalPagoAsimilados = totalPagoAsimilados + item.depositoNeto;
                    }
                    var IVA = Convert.ToDecimal(0.16);
                    var retencion = Convert.ToDecimal(0.06);
                    detalleLayout.ID = detalle.ID;
                    //detalleLayout.Caratula = nombreCaratula;
                    detalleLayout.Layout = nombreLayout;
                    detalleLayout.Detalles = txtBoxObLay.Text;
                    detalleLayout.SalarioAsimilado = Math.Round(totalPagoAsimilados, 2);
                    detalleLayout.ImpuestoNomina = detalleLayout.SalarioAsimilado * Convert.ToDecimal(infoCliente.PORCENTAJE_ISN);
                    detalleLayout.ComisionServicio = detalleLayout.SalarioAsimilado * Convert.ToDecimal(infoCliente.PORCENTAJE_COMISION);
                    detalleLayout.SubTotal = detalleLayout.SalarioAsimilado + detalleLayout.ImpuestoNomina + detalleLayout.ComisionServicio;
                    detalleLayout.IVA = Math.Round(detalleLayout.SubTotal * IVA, 2);
                    detalleLayout.nominaEmpresaID = nominaEmpresaID;

                    if (infoCliente.RETENCION.Equals("S"))
                    {
                        detalleLayout.RetencionIVA = Math.Round(detalleLayout.SubTotal * retencion, 2);
                    }
                    detalleLayout.Total = Math.Round(detalleLayout.SubTotal + detalleLayout.IVA - detalleLayout.RetencionIVA);

                    caratulaPago.TotalEmpleados = listaLayout.Count();
                    caratulaPago.TotalPagoAsimilados = Math.Round(totalPagoAsimilados, 2);
                    caratulaPago.UsuarioModificacion = Properties.Settings.Default.Usuario.ToString();
                    caratulaPago.Observaciones = txtBoxObsCarat.Text;
                    caratulaPago.Banco = lookUpBanco.EditValue.ToString();
                    caratulaPago.NumCuenta = datosBanco.cuenta;
                    caratulaPago.CLABE = datosBanco.clabe;
                    caratulaPago.ProvAguinaldo = aguinaldo;
                    caratulaPago.ProviVacaciones = vacaciones;
                    caratulaPago.ProviPrimVacacional = primaVac;
                    caratulaPago.AsimiSalarios = Math.Round(totalPagoAsimilados, 2);
                    caratulaPago.SubTotalIAS = Math.Round(caratulaPago.TotalPagoAsimilados + caratulaPago.ProvAguinaldo + caratulaPago.ProviVacaciones + caratulaPago.ProviPrimVacacional);
                    caratulaPago.ComisionServicio = Math.Round(caratulaPago.SubTotalIAS * Convert.ToDecimal(infoCliente.PORCENTAJE_COMISION), 2);
                    caratulaPago.ImpNomi = Math.Round(caratulaPago.SubTotalIAS * Convert.ToDecimal(infoCliente.PORCENTAJE_ISN), 2);
                    caratulaPago.Total = Math.Round(caratulaPago.SubTotalIAS + caratulaPago.ComisionServicio + caratulaPago.ImpNomi, 2);
                    caratulaPago.IVA = Math.Round(caratulaPago.Total * IVA, 2);

                    if (infoCliente.RETENCION.Equals("S"))
                    {
                        caratulaPago.RetencionIVA = Math.Round(caratulaPago.Total * retencion, 2);
                    }

                    caratulaPago.TotalFactura = Math.Round(caratulaPago.Total + caratulaPago.IVA + caratulaPago.RetencionIVA, 2);

                    caratulaPago.TotalDeposito = Math.Round(caratulaPago.TotalFactura + caratulaPago.Ajuste, 2);
                    caratulaPago.ClaveFacturacion = lookUpClve.EditValue.ToString();
                    caratulaPago.FormaPago = lookUpFormaPago.EditValue.ToString();
                    caratulaPago.TipoPago = lookUpTipoPago.EditValue.ToString();
                    caratulaPago.RutaLogo = "Prueba";
                    caratulaPago.Imagen = "prueba";

                    if (listaLayout.Count.Equals(0))
                    {
                        XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        caratulaPago.ResumenNominaID = "Nomina_" + parametrosNomina.NombreEmpresa + "_" + periodo;
                        detalleLayout.ResumenNominaID = "Nomina_" + parametrosNomina.NombreEmpresa + "_" + periodo;
                        resumenNomina.ResumenNominaID = "Nomina_" + parametrosNomina.NombreEmpresa + "_" + periodo;
                        resumenNomina.ResumenNominaTotalEmpleados = nominaMasiva.Count;
                        resumenNomina.ResumenNominaFechaPago = fechaApliPeri;
                        resumenNomina.ResumenNominaFechaInicioPeri = fechaInPer;
                        resumenNomina.ResumenNominaFechaFinPeri = fechaFiPer;
                        resumenNomina.ResumenNominaEstatus = "Generado";
                        resumenNomina.ResumenNominaEstatusSAT = "";
                        resumenNomina.ResumenNominaPeriodo = periodo;
                        resumenNomina.ResumenNominaEmpresaNombre = parametrosNomina.NombreEmpresa;
                        resumenNomina.ResumenNominaRFCEmpresa = parametrosLayout.RFC;
                        resumenNomina.ResumenNominaUsuarioCreacion = usuarioSistema;
                        resumenNomina.ResumenNominaNominaEmpresaID = nominaEmpresaID;

                        foreach (var item in nominaMasiva)
                        {
                            if (resumenNomina.ResumenNominaTotalIngresos == null || resumenNomina.ResumenNominaTotalIngresosBruto == null || resumenNomina.ResumenNominaTotalISR == null)
                            {
                                resumenNomina.ResumenNominaTotalIngresos = item.nominaIngresos;
                                resumenNomina.ResumenNominaTotalIngresosBruto = item.nominaIngresosBruto;
                                resumenNomina.ResumenNominaTotalISR = item.nominaISR;
                            }
                            else
                            {
                                resumenNomina.ResumenNominaTotalIngresos += item.nominaIngresos;
                                resumenNomina.ResumenNominaTotalIngresosBruto += item.nominaIngresosBruto;
                                resumenNomina.ResumenNominaTotalISR += item.nominaISR;
                            }

                        }
                        //controlador.InsertaLayout(listaLayout, splashScreenManager1);
                        //controlador.InsertaDetalleLyout(detalleLayout, splashScreenManager1);
                        //controlador.InsertaCaratula(caratulaPago, splashScreenManager1);
                        controlador.ActualizaResumenNomina(resumenNomina, resumenNominaIDActual);
                        controlador.ActualizaNominaMasiva(nominaMasiva, resumenNominaIDActual);
                        if (controlador.ActualizaCaratula(caratulaPago, splashScreenManager1, resumenNominaIDActual).Equals(true) && controlador.ActualizaDetalleLayout(detalleLayout, splashScreenManager1, resumenNominaIDActual).Equals(true) && controlador.ActualizaLayout(listaLayout, splashScreenManager1, resumenNominaIDActual).Equals(true))
                        {
                            if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                            {
                                splashScreenManager1.CloseWaitForm();
                            }
                            XtraMessageBox.Show("Proceso Terminado con Éxito", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            this.DesahiblitarCampos();
                            this.CargaInformación();
                        }
                    }
                }
            }
            catch (Exception actualiza)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();

                }
                XtraMessageBox.Show(actualiza.Message + "\nError Modulo EditarCaratula: btnActualiza()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void BtnImportarInfo_Click(object sender, EventArgs e)
        {
            try
            {
                calcUnitario = false;
                E.Empleado empl = new E.Empleado();
                C.Controller Controlador = new C.Controller();
                XtraOpenFileDialog dialog = new XtraOpenFileDialog();
                dialog.Filter = "Archivos de Excel (*.xls;*.xlsx)|*.xls;*.xlsx"; //le indicamos el tipo de filtro en este caso que busque
                                                                                 //solo los archivos excel

                dialog.Title = "Seleccione el archivo de Excel";//le damos un titulo a la ventana

                dialog.FileName = string.Empty;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(false))
                    {
                        splashScreenManager1.ShowWaitForm();
                    }
                    Excel.Application xlApp;
                    Excel.Workbook xlWorkBook;
                    Excel.Worksheet xlWorkSheet;
                    Excel.Range range;
                    int rCnt;
                    int rw = 0;
                    int cl = 0;
                    int cont = 0;
                    string Archivo = dialog.FileName;
                    var misValue = Type.Missing;

                    decimal gravado = 0;
                    decimal limInf = 0;
                    decimal ba = 0;
                    decimal tasa = 0;
                    decimal resultado = 0;
                    decimal cuotaFija = 0;
                    decimal isrEx = 0;
                    decimal sub = 0;

                    xlApp = new Excel.Application();
                    xlWorkBook = xlApp.Workbooks.Open(@Archivo, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue);
                    xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);

                    range = xlWorkSheet.UsedRange;
                    rw = range.Rows.Count;
                    cl = range.Columns.Count;

                    Excel.Application excel = new Excel.Application();
                    Excel.Application excelSem = new Excel.Application();
                    Excel.Application excelQui = new Excel.Application();
                    Excel._Workbook libroSemanal = null;
                    Excel._Workbook libroQuincenal = null;
                    Excel._Workbook libroMensual = null;

                    excel.DisplayAlerts = false;
                    excelSem.DisplayAlerts = false;
                    excelQui.DisplayAlerts = false;

                    excel.Visible = false;
                    excelSem.Visible = false;
                    excelQui.Visible = false;

                    libroMensual = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR Salarios.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheet = (Excel.Worksheet)libroMensual.Sheets["Calculo"];

                    libroSemanal = excelSem.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosSemanal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetSemanal = (Excel.Worksheet)libroSemanal.Sheets["Calculo"];

                    libroQuincenal = excelQui.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosQuincenal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetQuincenal = (Excel.Worksheet)libroQuincenal.Sheets["Calculo"];

                    var listaImporteEmpleados = new List<E.Empleado>();

                    for (rCnt = 2; rCnt <= rw; rCnt++)
                    {
                        try
                        {
                            IDEmpl = Convert.ToInt32((range.Cells[rCnt, "A"] as Excel.Range).Value2.ToString());
                        }
                        catch (Exception idEmpl)
                        {
                            IDEmpl = 0;
                        }
                        try
                        {
                            importeExcel = Math.Round(Convert.ToDecimal((range.Cells[rCnt, "B"] as Excel.Range).Value2.ToString()), 2);
                        }
                        catch (Exception importeExc)
                        {
                            importeExcel = 10000;
                        }

                        try
                        {
                            periodicidadExcel = (range.Cells[rCnt, "C"] as Excel.Range).Value2.ToString();
                            periodicidadExcel = periodicidadExcel.ToUpper();
                        }
                        catch (Exception periExcel)
                        {
                            periodicidadExcel = "MENSUAL";
                        }
                        //if (importe.ToString().Equals("0.01"))
                        //{
                        //    gravado = 0;
                        //    limInf = 0;
                        //    ba = 0;
                        //    tasa = 0;
                        //    resultado = 0;
                        //    cuotaFija =0;
                        //    isrEx = 0;
                        //    sub = 0;
                        //    if (periodicidad.Equals("SEMANAL"))
                        //    {
                        //        periodicidad = "02";
                        //    }
                        //    else if (periodicidad.Equals("QUINCENAL"))
                        //    {
                        //        periodicidad = "04";
                        //    }
                        //    else if (periodicidad.Equals("MENSUAL"))
                        //    {
                        //        periodicidad = "05";
                        //    }
                        //    listaImporteEmpleados.Add(new E.Empleado
                        //    {

                        //        IDEmpleado = IDEmpl,
                        //        Periodicidad = periodicidad,
                        //        IngresosBrutos = gravado,
                        //        LimInferior = limInf,
                        //        ExLimInf = ba,
                        //        PerExLimInf = tasa,
                        //        ImpMarg = resultado,
                        //        CF = cuotaFija,
                        //        ISR = isrEx,
                        //        Sub = sub,
                        //        IngresosNetos = importe,
                        //        //fechaAplicacion = Convert.ToDateTime(fechaAplicacion),
                        //        //fecIniPeri = Convert.ToDateTime(fechaIniPeriodo),
                        //        //fecFinPeri = Convert.ToDateTime(fechaFinperiodo)
                        //    });
                        //}
                        //else
                        //{
                        if (periodicidadExcel.Equals("SEMANAL"))
                        {
                            periodicidadExcel = "02";
                            //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                            worksheetSemanal.Cells[6, 3] = importeExcel;
                            excelSem.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                            gravado = Math.Round((decimal)(worksheetSemanal.Cells[8, 3] as Excel.Range).Value, 2);
                            limInf = Math.Round((decimal)(worksheetSemanal.Cells[9, 3] as Excel.Range).Value, 2);
                            ba = Math.Round((decimal)(worksheetSemanal.Cells[10, 3] as Excel.Range).Value, 2);
                            tasa = Math.Round((decimal)(worksheetSemanal.Cells[11, 3] as Excel.Range).Value, 2);
                            resultado = Math.Round((decimal)(worksheetSemanal.Cells[12, 3] as Excel.Range).Value, 2);
                            cuotaFija = Math.Round((decimal)(worksheetSemanal.Cells[13, 3] as Excel.Range).Value, 2);
                            isrEx = Math.Round((decimal)(worksheetSemanal.Cells[14, 3] as Excel.Range).Value, 2);
                            sub = Math.Round((decimal)(worksheetSemanal.Cells[15, 3] as Excel.Range).Value, 2);
                        }
                        else if (periodicidadExcel.Equals("QUINCENAL"))
                        {
                            periodicidadExcel = "04";

                            //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                            worksheetQuincenal.Cells[6, 3] = importeExcel;
                            excelQui.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                            gravado = Math.Round((decimal)(worksheetQuincenal.Cells[8, 3] as Excel.Range).Value, 2);
                            limInf = Math.Round((decimal)(worksheetQuincenal.Cells[9, 3] as Excel.Range).Value, 2);
                            ba = Math.Round((decimal)(worksheetQuincenal.Cells[10, 3] as Excel.Range).Value, 2);
                            tasa = Math.Round((decimal)(worksheetQuincenal.Cells[11, 3] as Excel.Range).Value, 2);
                            resultado = Math.Round((decimal)(worksheetQuincenal.Cells[12, 3] as Excel.Range).Value, 2);
                            cuotaFija = Math.Round((decimal)(worksheetQuincenal.Cells[13, 3] as Excel.Range).Value, 2);
                            isrEx = Math.Round((decimal)(worksheetQuincenal.Cells[14, 3] as Excel.Range).Value, 2);
                            sub = Math.Round((decimal)(worksheetQuincenal.Cells[15, 3] as Excel.Range).Value, 2);


                        }
                        else if (periodicidadExcel.Equals("MENSUAL"))
                        {
                            periodicidadExcel = "05";

                            //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                            worksheet.Cells[6, 3] = importeExcel;
                            excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                            gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                            limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                            ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                            tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                            resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                            cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                            isrEx = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                            sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                        }
                        else
                        {
                            periodicidadExcel = "";
                            gravado = 0;
                            limInf = 0;
                            ba = 0;
                            tasa = 0;
                            resultado = 0;
                            cuotaFija = 0;
                            isrEx = 0;
                            sub = 0;
                        }
                        listaImporteEmpleados.Add(new E.Empleado
                        {

                            IDEmpleado = IDEmpl,
                            Periodicidad = periodicidadExcel,
                            IngresosBrutos = gravado,
                            LimInferior = limInf,
                            ExLimInf = ba,
                            PerExLimInf = tasa,
                            ImpMarg = resultado,
                            CF = cuotaFija,
                            ISR = isrEx,
                            Sub = sub,
                            IngresosNetos = importeExcel,
                            //fechaAplicacion = Convert.ToDateTime(fechaAplicacion),
                            //fecIniPeri = Convert.ToDateTime(fechaIniPeriodo),
                            //fecFinPeri = Convert.ToDateTime(fechaFinperiodo)
                        });
                        //}

                    }
                    string nombreArchivo = xlWorkBook.Name;
                    nombreArchivo = Path.GetFileNameWithoutExtension(nombreArchivo);
                    //xlWorkBook.Close(true, "Formato_Masivo_Importe_Empleados", null);
                    xlWorkBook.Close(true, nombreArchivo, null);
                    xlApp.Quit();

                    Marshal.ReleaseComObject(xlWorkSheet);
                    Marshal.ReleaseComObject(xlWorkBook);
                    Marshal.ReleaseComObject(xlApp);

                    //Excel.Application excel = new Excel.Application();

                    for (int i = 0; i < gridViewEditaCaratula.RowCount; i++)
                    {
                        int numEmpl = Convert.ToInt32(gridViewEditaCaratula.GetRowCellValue(i, gridViewEditaCaratula.Columns[1]).ToString());
                        foreach (var empleado in listaImporteEmpleados)
                        {
                            if (numEmpl.Equals(empleado.IDEmpleado))
                            {
                                if (empleado.Periodicidad != "")
                                {
                                    //repositoryItemLookUpPeriLayout.ValueMember = periodicidad;
                                    gridViewEditaCaratula.SetRowCellValue(i, "Periodicidad Pago", empleado.Periodicidad);
                                }
                                gridViewEditaCaratula.SetRowCellValue(i, "ingresos", empleado.IngresosBrutos);
                                gridViewEditaCaratula.SetRowCellValue(i, "LimInferior", empleado.LimInferior);
                                gridViewEditaCaratula.SetRowCellValue(i, "ExLimInf", empleado.ExLimInf);
                                gridViewEditaCaratula.SetRowCellValue(i, "PerExLimInf", empleado.PerExLimInf);
                                gridViewEditaCaratula.SetRowCellValue(i, "ImpMarg", empleado.ImpMarg);
                                gridViewEditaCaratula.SetRowCellValue(i, "CF", empleado.CF);
                                gridViewEditaCaratula.SetRowCellValue(i, "sub", empleado.Sub);
                                gridViewEditaCaratula.SetRowCellValue(i, "ISR", empleado.ISR);
                                gridViewEditaCaratula.SetRowCellValue(i, "ingresosNeto", empleado.IngresosNetos);
                                gridViewEditaCaratula.SetRowCellValue(i, "otrosConceptos", 0.00);

                                break;
                            }
                        }
                    }
                    splashScreenManager1.CloseWaitForm();
                    excel.UserControl = false;
                    excelQui.UserControl = false;
                    excelSem.UserControl = false;

                    //libroQuincenal.Save();
                    //libroSemanal.Save();
                    //libroMensual.Save();
                    //libroSemanal.Close();
                    //libroQuincenal.Close();
                    //libroMensual.Close();



                    //IntPtr xAsIntPtr = new IntPtr(excel.Application.Hwnd);
                    ////excelObj.ActiveWorkbook.Close();

                    //System.Diagnostics.Process[] process = System.Diagnostics.Process.GetProcessesByName("EXCEL.EXE");
                    //foreach (System.Diagnostics.Process p in process)
                    //{
                    //    if (p.MainWindowHandle == xAsIntPtr)
                    //    {
                    //        try
                    //        {
                    //            p.Kill();
                    //        }
                    //        catch { }
                    //    }
                    //}

                    string nombreArchivoMensual = libroMensual.Name;
                    string nombreArchivoSemanal = libroSemanal.Name;
                    string nombreArchivoQuincenal = libroQuincenal.Name;
                    nombreArchivoMensual = Path.GetFileNameWithoutExtension(nombreArchivoMensual);
                    nombreArchivoSemanal = Path.GetFileNameWithoutExtension(nombreArchivoSemanal);
                    nombreArchivoQuincenal = Path.GetFileNameWithoutExtension(nombreArchivoQuincenal);
                    //xlWorkBook.Close(true, "Formato_Masivo_Importe_Empleados", null);
                    //xlWorkBook.Close(true, nombreArchivo, null);
                    libroSemanal.Close(true, nombreArchivoSemanal);
                    libroQuincenal.Close(true, nombreArchivoQuincenal);
                    libroMensual.Close(true, nombreArchivoMensual);

                    excel.Quit();
                    excelQui.Quit();
                    excelSem.Quit();

                    Marshal.ReleaseComObject(worksheet);
                    Marshal.ReleaseComObject(worksheetSemanal);
                    Marshal.ReleaseComObject(worksheetQuincenal);
                    Marshal.ReleaseComObject(libroSemanal);
                    Marshal.ReleaseComObject(libroQuincenal);
                    Marshal.ReleaseComObject(libroMensual);
                    Marshal.ReleaseComObject(excel);
                    excel = null;
                    Marshal.ReleaseComObject(excelSem);
                    Marshal.ReleaseComObject(excelQui);

                    //excel.Quit();
                    //excelSem.Quit();
                    calcUnitario = true;
                }
                else
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }
                }
            }
            catch (Exception importar)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }

                XtraMessageBox.Show(importar.Message + "\nError Modulo Nómina:ImportarInfo()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void gridViewEditaCaratula_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.Caption.Equals("Ingresos Netos"))
            {
                if (calcUnitario.Equals(true))
                {
                    string ingresosCelda = e.Value.ToString();
                    string periMasiv = gridViewEditaCaratula.GetRowCellValue(e.RowHandle, "PeriodicidadPago").ToString();
                    decimal IngresosMsiv = Convert.ToDecimal(ingresosCelda);
                    string ing = String.Format("{0:0.00}", IngresosMsiv);
                    IngresosMsiv = Convert.ToDecimal(ing);
                    calcMasiv = LeerExcel(IngresosMsiv, calcMasiv, periMasiv);
                    //calcMasiv = controlador.GeneraCalculo(IngresosMsiv, periMasiv, bd);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "LimInferior", calcMasiv.LimInferior);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ExLimInf", calcMasiv.ExLimInf);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "PerExLimInf", calcMasiv.PerExLimInf);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ImpMarg", calcMasiv.ImpMarg);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "CF", calcMasiv.CF);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ingresos", calcMasiv.IngresosBrutos);
                }

            }

            if (e.Column.Caption.Equals("Periodicidad Pago"))
            {
                if (calcUnitario.Equals(true))
                {
                    string periCelda = e.Value.ToString();
                    string periMasiv = gridViewEditaCaratula.GetRowCellValue(e.RowHandle, "PeriodicidadPago").ToString();
                    string ingresosCelda = gridViewEditaCaratula.GetRowCellValue(e.RowHandle, "ingresosNeto").ToString();
                    decimal ingresosMasiv = Convert.ToDecimal(ingresosCelda);
                    string ing = String.Format("{0:0.00}", ingresosMasiv);
                    ingresosMasiv = Convert.ToDecimal(ing);

                    //calcMasiv = controlador.GeneraCalculo(ingresosMasiv, periCelda, bd);
                    calcMasiv = LeerExcel(ingresosMasiv, calcMasiv, periMasiv);

                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "LimInferior", calcMasiv.LimInferior);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ExLimInf", calcMasiv.ExLimInf);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "PerExLimInf", calcMasiv.PerExLimInf);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ImpMarg", calcMasiv.ImpMarg);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "CF", calcMasiv.CF);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    gridViewEditaCaratula.SetRowCellValue(e.RowHandle, "ingresos", calcMasiv.IngresosBrutos);
                }

            }
        }

        private E.Calculo LeerExcel(decimal ingresos, E.Calculo calc, string periodo)
        {
            calc.IngresosNetos = Math.Round(ingresos, 2);
            periodo = periodo.ToUpper();
            if (periodo.Equals("SEMANAL") || periodo.Equals("02"))
            {
                Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosSemanal.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else if (periodo.Equals("QUINCENAL") || periodo.Equals("04"))
            {
                Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosQuincenal.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else if (periodo.Equals("MENSUAL") || periodo.Equals("05"))
            {
                Microsoft.Office.Interop.Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR Salarios.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else
            {
                calc.IngresosBrutos = ingresos;
                calc.LimInferior = 0;
                calc.ExLimInf = 0;
                calc.PerExLimInf = 0;
                calc.ImpMarg = 0;
                calc.CF = 0;
                calc.ISR = 0;
                calc.Sub = 0;
                calc.IngresosNetos = ingresos;
                XtraMessageBox.Show("Error al momento de generar Caluclo de ingresos Inverso", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return calc;
            }

            return calc;
        }

        private void repositoryItemLookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void repositoryItemSpinEdit1_EditValueChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void EditarCaratula_Load(object sender, EventArgs e)
        {
            calcUnitario = true;
            layoutControlItemBtnAceptar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItemBtnCancelar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItembtnImporta.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            emptySpaceItem3.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            this.CargaInformación();
            //lookUpBanco.ReadOnly = false;
            //lookUpBanco.EditValue = caratula.Banco;
            ////lookUpBanco.Text = caratula.Banco;
            //lookUpBanco.ReadOnly = true;
            if (SplashScreen.IsSplashFormVisible.Equals(true))
            {
                SplashScreen.CloseWaitForm();
            }
        }
    }
}
