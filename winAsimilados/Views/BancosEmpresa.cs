using DevExpress.XtraEditors;
using DevExpress.XtraSplashScreen;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using winAsimilados.Entities;
using C = winAsimilados.Controller;
using E = winAsimilados.Entities;
namespace winAsimilados.Views
{
    public partial class BancosEmpresa : Form
    {
        C.Controller controlador = new C.Controller();
        E.BancoEmpresa bancoEmpresa = new E.BancoEmpresa();
        SplashScreenManager splash;
        bool seleccion = false;
        int IDRegistro;
        string banco, cuenta, clabe;
        public BancosEmpresa(SplashScreenManager splashScreenManager)
        {
            splash = splashScreenManager;
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
        }

        private void BancosEmpresa_Load(object sender, EventArgs e)
        {
            if (splash.IsSplashFormVisible.Equals(true))
            {
                splash.CloseWaitForm();
            }
        }

        private void lookUpEmpresa_EditValueChanged(object sender, EventArgs e)
        {
            this.LlenaTabla();
            layoutControlbtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            emptySpaceItem2.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
        }
        private void LlenaTabla()
        {
            try
            {
                string ID = lookUpEmpresa.EditValue.ToString();
                controlador.listaBancosEmpresa(gridControlBancos, ID);
                gridControlBancos.Visible = true;
            }
            catch (Exception lookup)
            {

            }
        }

        private void btnEditar_Click(object sender, EventArgs e)
        {
            layoutControlbtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlBtnGuardar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            gridColumnCuenta.OptionsColumn.AllowEdit = true;
            gridColumnCLABE.OptionsColumn.AllowEdit = true;
        }

        private void btnAgregar_Click(object sender, EventArgs e)
        {
            #region validaciones
            if (lookUpEmpresa.Text.Equals("Seleccione"))
            {
                XtraMessageBox.Show("Por favor, seleccione empresa", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                bancoEmpresa.IDEmpresa = lookUpEmpresa.EditValue.ToString();
                bancoEmpresa.RazonSocial = lookUpEmpresa.Text;
            }
            if (lookUpBanco.Text.Equals("Seleccione"))
            {
                XtraMessageBox.Show("Por favor, seleccione un banco", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                bancoEmpresa.Banco = lookUpBanco.EditValue.ToString();
            }
            if (txtCuenta.Equals(""))
            {
                XtraMessageBox.Show("Por favor, ingrese # de cuenta.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                bancoEmpresa.Cuenta = txtCuenta.Text;
            }
            if (txtCLABE.Equals(""))
            {
                XtraMessageBox.Show("Por favor, ingrese CLABE", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                bancoEmpresa.CLABE = txtCLABE.Text;
            }
            #endregion

            if (controlador.InsertaBancoEmpresa(bancoEmpresa).Equals(true))
            {
                this.LlenaTabla();
                lookUpBanco.EditValue = null;
                txtCLABE.Text = "";
                txtCuenta.Text = "";
            }
            else
            {
                XtraMessageBox.Show("Error al dar de alta banco.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void btnGuardar_Click(object sender, EventArgs e)
        {
            var respuesta = XtraMessageBox.Show("¿Desea guardar los cambios realizados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (respuesta.Equals(DialogResult.Yes))
            {
                var listaBancos = new List<E.BancoEmpresa>();
                for (int i = 0; i < gridViewBancos.RowCount; i++)
                {
                    IDRegistro = Convert.ToInt32(gridViewBancos.GetRowCellValue(i, gridViewBancos.Columns[0]));
                    cuenta = gridViewBancos.GetRowCellValue(i, gridViewBancos.Columns[4]).ToString();
                    clabe = gridViewBancos.GetRowCellValue(i, gridViewBancos.Columns[5]).ToString();

                    listaBancos.Add(new E.BancoEmpresa
                    {
                        ID = IDRegistro,
                        Cuenta = cuenta,
                        CLABE = clabe
                    });
                }

                if (controlador.ModificaBancoEmpresa(listaBancos).Equals(true))
                {
                    XtraMessageBox.Show("!Información actualizada¡", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    layoutControlbtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                    layoutControlBtnGuardar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                    gridColumnCuenta.OptionsColumn.AllowEdit = false;
                    gridColumnCLABE.OptionsColumn.AllowEdit = false;
                    this.LlenaTabla();
                }
                else
                {
                    XtraMessageBox.Show("!Error al intentar actualizar información¡", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    layoutControlbtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                    layoutControlBtnGuardar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                    gridColumnCuenta.OptionsColumn.AllowEdit = false;
                    gridColumnCLABE.OptionsColumn.AllowEdit = false;
                }

            }
            else
            {
                layoutControlbtnEditar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlBtnGuardar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                gridColumnCuenta.OptionsColumn.AllowEdit = false;
                gridColumnCLABE.OptionsColumn.AllowEdit = false;
            }

        }

        private void btnEliminar_Click(object sender, EventArgs e)
        {
            for (int i = 0; i <= gridViewBancos.RowCount; i++)
            {
                if (gridViewBancos.IsRowSelected(i))
                {
                    IDRegistro = Convert.ToInt32(gridViewBancos.GetRowCellValue(i, gridViewBancos.Columns[0]));
                    banco = gridViewBancos.GetRowCellValue(i, gridViewBancos.Columns[3]).ToString();
                    seleccion = true;
                }
            }

            if (seleccion.Equals(false))
            {
                XtraMessageBox.Show("Por favor, seleccione una celda", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                var respuesta2 = XtraMessageBox.Show("¿Desea eliminar el banco " + banco + " del cliente " + lookUpEmpresa.Text.ToString() + "?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (respuesta2.Equals(DialogResult.Yes))
                {
                    //XtraMessageBox.Show("Entra borrar");
                    if (controlador.EliminaBancoEmpresa(IDRegistro.ToString()).Equals(true))
                    {
                        XtraMessageBox.Show("¡Banco Eliminado!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.LlenaTabla();
                    }
                    else
                    {
                        XtraMessageBox.Show("¡Error al intentar eliminar banco ligado al cliente!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }
    }
}
