using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using C = winAsimilados.Controller;
using V = winAsimilados.Views;

namespace winAsimilados.Views
{
    public partial class SQLConnetcionString : Form
    {
        string nameConnection = null;
        static SqlConnection Connection_BD;
        public SQLConnetcionString()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource

        }

        private void SQLConnetcionString_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
            Application.Restart();
        }

        private void SQLConnetcionString_Load(object sender, EventArgs e)
        {
            layoutControlItem10.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            labelControl1.Text = @"<b>¡Advertencia!</b>
            <br>Cambiar la configuración del servidor SQL puede causar que la aplicación no trabaje correctamente.";

            List<string> listaConexiones;
            listaConexiones = C.ConnectionStringManager.GetConnectionStringNames();

            lookUpCon.Properties.DataSource = listaConexiones;

            lookUpServidor.ReadOnly = true;
            lookUpBD.ReadOnly = true;
            txtUser.ReadOnly = true;
            txtPass.ReadOnly = true;
            BtnGuardar.Enabled = false;
        }
        private void showSavedConnectionSettings()
        {
            try
            {
                SqlConnectionStringBuilder builder =
                  new SqlConnectionStringBuilder(C.ConnectionStringManager.GetFirstConnectionString(nameConnection));
                //XtraMessageBox.Show(builder.ConnectionString);
                lookUpServidor.Text = builder.DataSource;
                lookUpBD.EditValue = builder.InitialCatalog;
                //if (builder.IntegratedSecurity)
                //{
                //    //connectionAuthenticationModeRadioGroup.EditValue = 0;
                //    txtUser.Text = string.Empty;
                //    txtPass.Text = string.Empty;
                //}
                //else
                //{
                //connectionAuthenticationModeRadioGroup.EditValue = 1;
                txtUser.Text = builder.UserID;
                txtPass.Text = builder.Password;
                sqlDataSourceNameDataBase.Connection.ConnectionString = builder.ConnectionString;
                sqlDataSourceNameDataBase.Fill();
                //}
            }
            catch(Exception cn)
            {
                //XtraMessageBox.Show(cn.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void lookUpCon_EditValueChanged(object sender, EventArgs e)
        {
            nameConnection = lookUpCon.Text;
            lookUpServidor.ReadOnly = true;
            lookUpBD.ReadOnly = true;
            txtUser.ReadOnly = true;
            txtPass.ReadOnly = true;
            showSavedConnectionSettings();

            if(nameConnection != null || nameConnection != "")
            {
                BtnCheckConnection.Enabled = true;
            }
        }

        private void BtnEditar_Click(object sender, EventArgs e)
        {
            DialogResult result = XtraMessageBox.Show("¿Desea modificar la configuración de " +
                "conexión a la Base de datos?" +
                "\n(Cambiar la configuración del servidor SQL puede causar que la aplicación no trabaje correctamente.)"
                , "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (result.Equals(DialogResult.Yes))
            {              
                lookUpServidor.ReadOnly = false;
                lookUpBD.ReadOnly = false;
                txtUser.ReadOnly = false;
                txtPass.ReadOnly = false;
                BtnGuardar.Enabled = true;
                layoutControlItem10.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem8.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;

            }
            else
            {
                lookUpServidor.ReadOnly = true;
                lookUpBD.ReadOnly = true;
                txtUser.ReadOnly = true;
                txtPass.ReadOnly = true;
                BtnGuardar.Enabled = false;
            }
        }

        private void BtnCheckConnection_Click(object sender, EventArgs e)
        {
            Connection_BD = new SqlConnection("Data Source=" + lookUpServidor.Text +
                ";Initial Catalog=" + lookUpBD.Text + ";User ID= " + txtUser.Text
                + ";Password=" + txtPass.Text +";");

            if (ProbarConexion(Connection_BD).Equals(true))
            {
                XtraMessageBox.Show("¡Conexión a la Base de Datos con éxito!"
                    , "Conexión", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                XtraMessageBox.Show("Conexión a la Base de Datos fallida!",
                    "Conexión", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            //XtraMessageBox.Show("Data Source=" + lookUpServidor.Text +
            //    ";Initial Catalog=" + lookUpBD.Text + ";User ID= " + txtUser.Text
            //    + ";Password=" + txtPass.Text + ";");
        }
        
        private bool ProbarConexion(SqlConnection connection)
        {
            try
            {
                connection.Open();
                connection.Close();

                return true;

            }catch(Exception cn)
            {
                XtraMessageBox.Show(cn.Message + "\nProbarConexion()",
                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }

        private void BtnGuardar_Click(object sender, EventArgs e)
        {

            try
            {
                string connectionString = C.ConnectionStringManager.GetConnectionString(nameConnection);
                string newConnectionString = C.ConnectionStringManager.SetConnectionStringServerName(connectionString, lookUpServidor.Text);
                C.ConnectionStringManager.SaveConnectionString(nameConnection, newConnectionString);

                string connectionStringBD = C.ConnectionStringManager.GetConnectionString(nameConnection);
                string newBD = C.ConnectionStringManager.SetConnectionStringDatabaseName(connectionStringBD, lookUpBD.Text);
                C.ConnectionStringManager.SaveConnectionString(nameConnection, newBD);

                string connectionStringCr = C.ConnectionStringManager.GetConnectionString(nameConnection);
                string credentials = C.ConnectionStringManager.SetConnectionStringAutenticationSQLServer(connectionStringCr, txtUser.Text, txtPass.Text);
                C.ConnectionStringManager.SaveConnectionString(nameConnection, credentials);

                XtraMessageBox.Show("¡Información de conexión guardada!", "Mensaje"
                    , MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch(Exception g)
            {
                XtraMessageBox.Show("¡Error al intentar guardar información de conexión!" +
                    "\n(" + g.Message + ")", "Error", MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }

            //showSavedConnectionSettings();
        }

        private void BtnCancelar_Click(object sender, EventArgs e)
        {
            lookUpServidor.ReadOnly = true;
            lookUpBD.ReadOnly = true;
            txtUser.ReadOnly = true;
            txtPass.ReadOnly = true;
            BtnGuardar.Enabled = false;
            layoutControlItem10.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItem8.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
        }
    }
}
