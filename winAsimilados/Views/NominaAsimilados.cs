using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Windows.Forms;
using E = winAsimilados.Entities;
using C = winAsimilados.Controller;
using R = winAsimilados.Resources;
using System.IO;
using System.Xml;
using XSDToXML.Utils;
using DevExpress.XtraEditors;

namespace winAsimilados.Views
{
    public partial class NominaAsimilados : Form
    {
        string pathXml = @"C:\XML\prueba.xml";
        
        E.Empleado empleado = new E.Empleado();
        E.Calculo Calculo = new E.Calculo();
        C.Controller controlador = new C.Controller();
        E.Parametros parametros = new E.Parametros();
        string periodicidad;
        string tipoIngresos;
        decimal ingresos;
        string empresa, rfc;
        string bd = C.Conexion.PerformConnection().Database;
        public NominaAsimilados(string Empresa, string RFC)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            empresa = Empresa;
            rfc = RFC;

            sqlDataSource1.Connection.ConnectionString = "Data Source=192.168.4.182\\COMPAC;Initial Catalog=" + bd + ";User ID=sa;Password=Supervisor2020.;";
            sqlDataSource1.Fill();
            ChNeto.Visible = false;
            parametros = controlador.GetParametros(rfc);
            layoutControlGroup5.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItem17.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            FecPagoMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
            FecIniPeriMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
            FecFinPeriMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
            //layoutControlGroup6.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            SqlTipoPeri.Fill();
        }

        private void NominaAsimilados_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
        }

        private void BtnSelEmpl_Click(object sender, EventArgs e)
        {
            if (LookUpEmpl.Text.Equals("Seleccione / Escriba Empleado"))
            {
                XtraMessageBox.Show("Por favor, seleccione un empleado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                string RFC = LookUpEmpl.EditValue.ToString();
                this.empleado = controlador.BuscaEmpleado(RFC);
                //XtraMessageBox.Show(empleado.RFC);
                TxtNumEmpl.Text = empleado.NumEmpl;
                TxtPeriPago.Text = empleado.Periodicidad;
                TxtPeriPago.ReadOnly = true;
                TxtRFC.Text = empleado.RFC;
                TxtCurp.Text = empleado.CURP;
                periodicidad = TxtPeriPago.EditValue.ToString();
                LblIngBru.Text = "Ingresos Brutos " + periodicidad;
                LblIngNet.Text =  "Ingresos Netos " + periodicidad;
                ChBruto.Checked = true;
                FecPagoUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                FecIniPeriUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyy");
                FecFinPeriUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                layoutControlGroup5.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlGroup6.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem17.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            }

        }

        private void TxtIngresos_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                //if (ChBruto.Checked.Equals(false) && ChNeto.Checked.Equals(false))
                //{
                //    XtraMessageBox.Show("Por favor, Seleccione tipo de ingresos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //}
                //XtraMessageBox.Show(periodicidad);
                //XtraMessageBox.Show(TxtIngresos.EditValue.ToString());
                if (ChBruto.Checked.Equals(true))
                {
                    GenerarCalculoIngresosBrutos();
                    //XtraMessageBox.Show("Ingresos:" + ingresos);
                }
                if (ChNeto.Checked.Equals(true))
                {
                    TxtIngNet.Text = TxtIngresos.Text;
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message + "\nError Componente NominaAsimilados", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ChBruto_CheckedChanged(object sender, EventArgs e)
        {
            if (ChBruto.Checked.Equals(true))
            {
                ChNeto.Checked = false;
                tipoIngresos = "Brutos";
            }
        }

        private void ChNeto_CheckedChanged(object sender, EventArgs e)
        {
            if (ChNeto.Checked.Equals(true))
            {
                ChBruto.Checked = false;
                tipoIngresos = "Netos";
            }
        }

        private void ChCambioPeri_CheckedChanged(object sender, EventArgs e)
        {
            if (ChCambioPeri.Checked.Equals(true))
            {
                DialogResult resultado = XtraMessageBox.Show("¿Desea cambiar el tipo de Peiodicidad?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    TxtPeriPago.Text = "";
                    TxtPeriPago.EditValue = "";
                    TxtPeriPago.ReadOnly = false;
                }
                else
                {
                    ChCambioPeri.Checked = false;
                }
            }
            else
            {
                TxtPeriPago.ReadOnly = true;
            }
        }
        private void GenerarCalculoIngresosBrutos()
        {
            ingresos = Convert.ToDecimal(TxtIngresos.EditValue);
            Calculo = controlador.GeneraCalculo(ingresos, periodicidad, tipoIngresos);
            TxtIngBru.Text = Calculo.IngresosBrutos.ToString();
            TxtLimInf.Text = Calculo.LimInferior.ToString();
            TxtExcLimInf.Text = Calculo.ExLimInf.ToString();
            TxtPorExcLimInf.Text = Calculo.PerExLimInf.ToString();
            TxtCF.Text = Calculo.CF.ToString();
            TxtImpMar.Text = Calculo.ImpMarg.ToString();
            TxtISR.Text = Calculo.ISR.ToString();
            TxtSubEmpl.Text = Calculo.Sub.ToString();
            TxtIngNet.Text = Calculo.IngresosNetos.ToString();
        }
        private void Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Icon = this.Icon;
        }

        private bool ValidaCer()
        {
            bool result = false;
            string pathCerPrueba = controlador.ArchivoCER(rfc);
            string RutaCer;
            if (pathCerPrueba.Equals("") || pathCerPrueba.Equals(null) || !File.Exists(pathCerPrueba))
            {
                DialogResult resultado = XtraMessageBox.Show("Archivo .CER no encontrado, ¿Desea Agregarlo?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    OpenFileDialogCer.Title = "Selecciona Archivo CER";
                    OpenFileDialogCer.Filter = "Archivos Certificado de Seguridad (*.cer;*)|*.cer";
                    if (OpenFileDialogCer.ShowDialog() == DialogResult.OK)
                    {
                        RutaCer = OpenFileDialogCer.FileName;
                        //XtraMessageBox.Show(RutaKey);
                        if (controlador.AgregaArchivoCer(rfc, RutaCer).Equals(true))
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }
                    }
                    else
                    {
                        result = false;
                    }
                }
                else
                {
                    XtraMessageBox.Show("Error al generar xml de nómina, archivo .CER no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); ;
                    result = false;
                }
            }
            else
            {
                result = true;
            }
            return result;
        }
        private bool ValidaKey()
        {
            bool result = false;
            string pathCerPrueba = controlador.ArchivoKEY(rfc);
            string RutaKey, Pass = null;
            if (pathCerPrueba.Equals("") || pathCerPrueba.Equals(null) || !File.Exists(pathCerPrueba))
            {
                DialogResult resultado = XtraMessageBox.Show("Archivo .KEY no encontrado, ¿Desea Agregarlo?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    OpenFileDialogKey.Title = "Selecciona Archivo KEY";
                    OpenFileDialogKey.Filter = "Archivos KEY (*.key;*)|*.key";
                    if (OpenFileDialogKey.ShowDialog() == DialogResult.OK)
                    {
                        RutaKey = OpenFileDialogKey.FileName;
                        //XtraMessageBox.Show(RutaKey);
                        try
                        {
                            // initialize a new XtraInputBoxArgs instance
                            XtraInputBoxArgs args = new XtraInputBoxArgs();
                            // set required Input Box options
                            args.Caption = "Archivo .key";
                            args.Prompt = "Contraseña";
                            args.DefaultButtonIndex = 0;
                            args.Showing += Args_Showing;
                            // initialize a DateEdit editor with custom settings
                            TextEdit editor = new TextEdit();
                            CheckEdit check = new CheckEdit();
                            args.Editor = check;
                            args.Editor = editor;
                            editor.Properties.UseSystemPasswordChar = true;
                            // display an Input Box with the custom editor
                            var result2 = XtraInputBox.Show(args).ToString();
                            // set a dialog icon
                            if (result2 != null || result2 != "")
                            {
                                XtraMessageBox.Show(result2);
                                Pass = result2;
                            }
                        }
                        catch(Exception xtra)
                        {
                            result = false;
                            //XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            XtraMessageBox.Show("Error al generar Xml de nómina, archivo .key no encontrado.","",MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                            //XtraMessageBox.Show(xtra.Message + "\nValidaKey()");
                        }
                        if (controlador.AgregaArchivoKey(rfc, RutaKey, Pass).Equals(true))
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }                        
                    }
                    else
                    {
                        result = false;
                    }
                }
                else
                {
                    XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); ;
                    result =  false;
                }
            }
            else
            {
                result = true;
            }
            return result;
        }
        private void GeneraXML()
        {
            try
            {

                if (ValidaCer().Equals(false))
                {
                    return;
                }
                if (ValidaKey().Equals(false))
                {
                    return;
                }

                splashScreenManager1.ShowWaitForm();
                splashScreenManager1.SetWaitFormCaption("Generando nomina");
                string pathPrincipalExe = AppDomain.CurrentDomain.BaseDirectory + "/";
                //string pathCer = @"C:\DocAsimilados\CSD01_AAA010101AAA.cer";
                //string pathKey = @"C:\DocAsimilados\CSD01_AAA010101AAA.key";
                //string pass = "12345678a";

                //string pathCer = @"C:\DocAsimilados\00001000000413522787.cer";
                //string pathKey = @"C:\DocAsimilados\CSD_QUERETARO_PTP131002FA0_20190214_113034.key";
                //string pass = "ptpinari";
                string pathCer = controlador.ArchivoCER(rfc);
                string pathKey = controlador.ArchivoKEY(rfc);
                string pass = controlador.PassKey(rfc); 

                string Inicio, Final, Serie, NumCer;

                SelloDigital.leerCER(pathCer, out Inicio, out Final, out Serie, out NumCer);



                Comprobante comprobante = new Comprobante();
                comprobante.Folio = "0001";
                comprobante.Fecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
                comprobante.Sello = "faltante";
                comprobante.FormaPago = "99";
                comprobante.NoCertificado = NumCer;
    
                comprobante.SubTotal = Calculo.IngresosBrutos;
                comprobante.Descuento = Calculo.ISR;
                comprobante.Total = Calculo.IngresosNetos;
                comprobante.Moneda = "MXN";
                comprobante.TipoDeComprobante = "N";
                comprobante.MetodoPago = "PUE";
                comprobante.LugarExpedicion = parametros.CODIGO_POSTAL;
                comprobante.TipoCambio = 1;


                ComprobanteEmisor comprobanteEmisor = new ComprobanteEmisor();
                comprobanteEmisor.Rfc = rfc;
                comprobanteEmisor.Nombre = empresa;
                comprobanteEmisor.RegimenFiscal = "601";

                ComprobanteReceptor comprobanteReceptor = new ComprobanteReceptor();
                comprobanteReceptor.Nombre = empleado.Nombre;
                comprobanteReceptor.Rfc = empleado.RFC;
                comprobanteReceptor.UsoCFDI = "P01";

                //comprobante.Nomina12 = nomina12;
                comprobante.Emisor = comprobanteEmisor;
                comprobante.Receptor = comprobanteReceptor;

                List<ComprobanteConcepto> listaConceptos = new List<ComprobanteConcepto>();
                ComprobanteConcepto comprobanteConcepto = new ComprobanteConcepto();
                comprobanteConcepto.Importe = Calculo.IngresosBrutos;
                comprobanteConcepto.ValorUnitario = Calculo.IngresosBrutos;
                comprobanteConcepto.Descuento = Calculo.ISR;
                comprobanteConcepto.ClaveProdServ = "84111505";
                comprobanteConcepto.Cantidad = 1;
                comprobanteConcepto.ClaveUnidad = "ACT";
                comprobanteConcepto.Descripcion = "Pago de nómina";

                listaConceptos.Add(comprobanteConcepto);

                comprobante.Conceptos = listaConceptos.ToArray();
                NominaReceptor nominaReceptor = new NominaReceptor();

                Nomina nomina12 = new Nomina();
                List<Nomina> nominas = new List<Nomina>();
                nomina12.Version = "1.2";
                nomina12.FechaPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
                nomina12.FechaInicialPago = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                nomina12.FechaFinalPago = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                nomina12.TotalPercepciones = Calculo.IngresosBrutos;
                nomina12.TotalDeducciones = Calculo.ISR;

                if (periodicidad.Equals("Semanal"))
                {
                    nomina12.NumDiasPagados = 7;
                    nominaReceptor.PeriodicidadPago = "02";
                }

                if (periodicidad.Equals("Quincenal"))
                {
                    nomina12.NumDiasPagados = 14;
                    nominaReceptor.PeriodicidadPago = "04";
                }

                if (periodicidad.Equals("Mensual"))
                {
                    nomina12.NumDiasPagados = 30;
                    nominaReceptor.PeriodicidadPago = "05";
                }

                nominaReceptor.Curp = empleado.CURP;
                nominaReceptor.TipoContrato = empleado.TipoContrato;
                nominaReceptor.Sindicalizado = empleado.Sindicalizado;
                nominaReceptor.NumEmpleado = empleado.NumEmpl;
                nominaReceptor.Departamento = empleado.Departamento;
                nominaReceptor.Puesto = empleado.Puesto;
                string entFed = controlador.GetEntFed(bd, parametros.CODIGO_POSTAL);
                nominaReceptor.ClaveEntFed = entFed;

                NominaDeducciones nominaDeducciones = new NominaDeducciones();
                NominaDeduccionesDeduccion nominaDeduccionesDeduccion = new NominaDeduccionesDeduccion();
                NominaPercepciones nominaPercepciones = new NominaPercepciones();
                NominaPercepcionesPercepcion nominaPercepcionesPercepcion = new NominaPercepcionesPercepcion();

                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepciones.TotalExento = 0;
                nominaPercepciones.TotalGravado = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.TipoPercepcion = "046";
                nominaPercepcionesPercepcion.Clave = "046";
                nominaPercepcionesPercepcion.Concepto = "INGRESO A ASIMILADOS A SALARIO";
                nominaPercepcionesPercepcion.ImporteGravado = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.ImporteExento = 0;

                nominaDeducciones.TotalImpuestosRetenidos = Calculo.ISR;

                nominaDeduccionesDeduccion.TipoDeduccion = "002";
                nominaDeduccionesDeduccion.Clave = "211";
                nominaDeduccionesDeduccion.Concepto = "ISR";
                nominaDeduccionesDeduccion.Importe = Calculo.ISR;

                nomina12.Receptor = nominaReceptor;
                nomina12.Deducciones = nominaDeducciones;
                nomina12.Percepciones = nominaPercepciones;
                nomina12.Percepciones.Percepcion = nominaPercepcionesPercepcion;
                nominaDeducciones.Deduccion = nominaDeduccionesDeduccion;

                nominas.Add(nomina12);

                comprobante.Complemento = new ComprobanteComplemento[1];
                comprobante.Complemento[0] = new ComprobanteComplemento();  

                XmlDocument nom12 = new XmlDocument();
                XmlSerializerNamespaces xmlNameSpaceNomi = new XmlSerializerNamespaces();
                xmlNameSpaceNomi.Add("nomina12", "http://www.sat.gob.mx/nomina12");
                using (XmlWriter writer = nom12.CreateNavigator().AppendChild())
                {
                    new XmlSerializer(nomina12.GetType()).Serialize(writer, nomina12, xmlNameSpaceNomi);
                }
                comprobante.Complemento[0].Any = new XmlElement[1];
                comprobante.Complemento[0].Any[0] = nom12.DocumentElement;
                splashScreenManager1.SetWaitFormCaption("Generando XML");
                GenXML(comprobante);

                string cadenaOrig = "";
                //string ruta = @"C:\DocAsimilados\xslt\cadenaoriginal_3_3.xslt";
                string pathCadenaOriginalxslt = pathPrincipalExe + @"xslt\cadenaoriginal_3_3.xslt";
                System.Xml.Xsl.XslCompiledTransform transformador = new System.Xml.Xsl.XslCompiledTransform(true);
                transformador.Load(pathCadenaOriginalxslt);       

                using (StringWriter sw = new StringWriter())
                using (XmlWriter xwo = XmlWriter.Create(sw, transformador.OutputSettings))
                {

                    transformador.Transform(pathXml, xwo);
                    cadenaOrig = sw.ToString(); 
                }

                SelloDigital selloDigital = new SelloDigital();
                comprobante.Certificado = selloDigital.Certificado(pathCer);
                comprobante.Sello = selloDigital.Sellar(cadenaOrig, pathKey, pass);

                GenXML(comprobante);

                splashScreenManager1.CloseWaitForm();
                XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception genxml)
            {
                splashScreenManager1.CloseWaitForm();
                XtraMessageBox.Show(genxml.Message + "Error Componente NominaAsimilados: GenXML()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void GenXML(Comprobante comprobante)
        {
            XmlSerializerNamespaces xmlNameSpace = new XmlSerializerNamespaces();
            xmlNameSpace.Add("cfdi", "http://www.sat.gob.mx/cfd/3");
            xmlNameSpace.Add("tfd", "http://www.sat.gob.mx/TimbreFiscalDigital");
            xmlNameSpace.Add("xsi", "http://www.w3.org/2001/XMLSchema-instance");
            xmlNameSpace.Add("nomina12", "http://www.sat.gob.mx/nomina12");


            XmlSerializer xmlSerializer = new XmlSerializer(typeof(Comprobante));

            string pathXmlWrit = @"";

            using (var sww = new Resources.StringWritterWithEncoding(Encoding.UTF8))
            {
                using (XmlWriter writter = XmlWriter.Create(sww))
                {
                    xmlSerializer.Serialize(writter, comprobante, xmlNameSpace);
                    pathXmlWrit = sww.ToString();
                }
            }
            System.IO.File.WriteAllText(pathXml, pathXmlWrit);
        }
        private void TxtPeriPago_EditValueChanged(object sender, EventArgs e)
        {
            periodicidad = TxtPeriPago.EditValue.ToString();
            LblIngBru.Text = "Ingresos Brutos " + periodicidad;
            LblIngNet.Text = "Ingresos Netos " + periodicidad;

            if (ChBruto.Checked.Equals(true))
            {
                GenerarCalculoIngresosBrutos();
            }
        }

        private void dateEdit2_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void ChPeriMasiv_CheckedChanged(object sender, EventArgs e)
        {
            if (ChPeriMasiv.Checked.Equals(true))
            {
                DialogResult result = XtraMessageBox.Show("¿Desea cambiar el tipo de periodicidad?" +
                    "\nEl cambio afectara a todos los empelados seleccionados.", "Mensaje",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result.Equals(DialogResult.Yes))
                {
                    PeriPagoMasiv.ReadOnly = false;
                }
                else
                {
                    ChPeriMasiv.Checked = false;
                    PeriPagoMasiv.EditValue = null;
                    PeriPagoMasiv.ReadOnly = true;
                }
            }
            else
            {
                ChPeriMasiv.Checked = false;
                PeriPagoMasiv.EditValue = null;
                PeriPagoMasiv.ReadOnly = true;
            }

        }

        private void BtnGenNom_Click(object sender, EventArgs e)
        {
            GeneraXML();
        }
    }
}
