using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Windows.Forms;
using E = winAsimilados.Entities;
using C = winAsimilados.Controller;
using R = winAsimilados.Resources;
using System.IO;
using System.Xml;
using XSDToXML.Utils;
using DevExpress.XtraEditors;
using DevExpress.Utils.Extensions;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraSplashScreen;
using DevExpress.Utils.OAuth.Provider;
using winAsimilados.Entities;
using System.Net;

namespace winAsimilados.Views
{
    public partial class NominaAsimilados : Form
    {
        //string pathXml = @"C:\XML\prueba.xml";
        string pathXml = @"C:\XML\";
        string pathArchivoXML = null;
        string pathArchivoXMLF = null;
        string nombreArchivo = null;
        
        E.Empleado empleado = new E.Empleado();
        E.Calculo Calculo = new E.Calculo();
        C.Controller controlador = new C.Controller();
        E.Parametros parametros = new E.Parametros();
        E.Empleado EmplMasiv = new E.Empleado();
        E.Calculo calcMasiv = new E.Calculo();
        E.BitacoraXML Bitacora = new E.BitacoraXML();
        E.FolioXML Folio = new E.FolioXML();

        string periodicidad;
        string tipoIngresos;
        decimal ingresos, ingresosMasiv, ISRMasiv, netoMasiv;
        string empresa, rfc;
        string peri;
        string bd = C.Conexion.PerformConnection().Database;
        string ip = Dns.GetHostEntry(Dns.GetHostName()).AddressList.Where(ip => ip.AddressFamily.ToString().ToUpper().Equals("INTERNETWORK")).FirstOrDefault().ToString();
        string rfcEmplMasiv;
        string folio;
        SplashScreenManager splash;
        public NominaAsimilados(string Empresa, string RFCEmpresa, SplashScreenManager splashScreenManager)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            empresa = Empresa;
            rfc = RFCEmpresa;
            splash = splashScreenManager;
        }

        private void NominaAsimilados_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
        }

        private void BtnSelEmpl_Click(object sender, EventArgs e)
        {
            if (LookUpEmpl.Text.Equals("Seleccione / Escriba Empleado"))
            {
                XtraMessageBox.Show("Por favor, seleccione un empleado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                string RFC = LookUpEmpl.EditValue.ToString();
                this.empleado = controlador.BuscaEmpleado(RFC);
                //XtraMessageBox.Show(empleado.RFC);
                TxtNumEmpl.Text = empleado.NumEmpl;
                TxtPeriPago.Text = empleado.Periodicidad;
                TxtPeriPago.ReadOnly = true;
                TxtRFC.Text = empleado.RFC;
                TxtCurp.Text = empleado.CURP;
                periodicidad = TxtPeriPago.EditValue.ToString();
                LblIngBru.Text = "Ingresos Brutos " + periodicidad;
                LblIngNet.Text =  "Ingresos Netos " + periodicidad;
                ChBruto.Checked = true;
                FecPagoUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                FecIniPeriUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyy");
                FecFinPeriUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                layoutControlGroup5.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlGroup6.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem17.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem18.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            }

        }

        private void TxtIngresos_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                //if (ChBruto.Checked.Equals(false) && ChNeto.Checked.Equals(false))
                //{
                //    XtraMessageBox.Show("Por favor, Seleccione tipo de ingresos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //}
                //XtraMessageBox.Show(periodicidad);
                //XtraMessageBox.Show(TxtIngresos.EditValue.ToString());
                if (ChBruto.Checked.Equals(true))
                {
                    GenerarCalculoIngresosBrutos();
                    //XtraMessageBox.Show("Ingresos:" + ingresos);
                }
                if (ChNeto.Checked.Equals(true))
                {
                    TxtIngNet.Text = TxtIngresos.Text;
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message + "\nError Componente NominaAsimilados", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ChBruto_CheckedChanged(object sender, EventArgs e)
        {
            if (ChBruto.Checked.Equals(true))
            {
                ChNeto.Checked = false;
                tipoIngresos = "Brutos";
            }
        }

        private void ChNeto_CheckedChanged(object sender, EventArgs e)
        {
            if (ChNeto.Checked.Equals(true))
            {
                ChBruto.Checked = false;
                tipoIngresos = "Netos";
            }
        }

        private void ChCambioPeri_CheckedChanged(object sender, EventArgs e)
        {
            if (ChCambioPeri.Checked.Equals(true))
            {
                DialogResult resultado = XtraMessageBox.Show("¿Desea cambiar el tipo de Peiodicidad?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    TxtPeriPago.Text = "";
                    TxtPeriPago.EditValue = "";
                    TxtPeriPago.ReadOnly = false;
                }
                else
                {
                    ChCambioPeri.Checked = false;
                }
            }
            else
            {
                TxtPeriPago.ReadOnly = true;
            }
        }
        private void GenerarCalculoIngresosBrutos()
        {
            ingresos = Convert.ToDecimal(TxtIngresos.EditValue);
            Calculo = controlador.GeneraCalculo(ingresos, periodicidad);
            TxtIngBru.Text = Calculo.IngresosBrutos.ToString();
            TxtLimInf.Text = Calculo.LimInferior.ToString();
            TxtExcLimInf.Text = Calculo.ExLimInf.ToString();
            TxtPorExcLimInf.Text = Calculo.PerExLimInf.ToString();
            TxtCF.Text = Calculo.CF.ToString();
            TxtImpMar.Text = Calculo.ImpMarg.ToString();
            TxtISR.Text = Calculo.ISR.ToString();
            TxtSubEmpl.Text = Calculo.Sub.ToString();
            TxtIngNet.Text = Calculo.IngresosNetos.ToString();
        }
        private void Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Icon = this.Icon;
        }

        private bool ValidaCer()
        {
            bool result = false;
            string pathCerPrueba = controlador.ArchivoCER(rfc);
            string RutaCer;
            if (pathCerPrueba.Equals("") || pathCerPrueba.Equals(null) || !File.Exists(pathCerPrueba))
            {
                DialogResult resultado = XtraMessageBox.Show("Archivo .CER no encontrado, ¿Desea Agregarlo?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    OpenFileDialogCer.Title = "Selecciona Archivo CER";
                    OpenFileDialogCer.Filter = "Archivos Certificado de Seguridad (*.cer;*)|*.cer";
                    if (OpenFileDialogCer.ShowDialog() == DialogResult.OK)
                    {
                        RutaCer = OpenFileDialogCer.FileName;
                        //XtraMessageBox.Show(RutaKey);
                        if (controlador.AgregaArchivoCer(rfc, RutaCer).Equals(true))
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }
                    }
                    else
                    {
                        result = false;
                    }
                }
                else
                {
                    XtraMessageBox.Show("Error al generar xml de nómina, archivo .CER no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); ;
                    result = false;
                }
            }
            else
            {
                result = true;
            }
            return result;
        }
        private bool ValidaKey()
        {
            bool result = false;
            string pathCerPrueba = controlador.ArchivoKEY(rfc);
            string RutaKey, Pass = null;
            if (pathCerPrueba.Equals("") || pathCerPrueba.Equals(null) || !File.Exists(pathCerPrueba))
            {
                DialogResult resultado = XtraMessageBox.Show("Archivo .KEY no encontrado, ¿Desea Agregarlo?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    OpenFileDialogKey.Title = "Selecciona Archivo KEY";
                    OpenFileDialogKey.Filter = "Archivos KEY (*.key;*)|*.key";
                    if (OpenFileDialogKey.ShowDialog() == DialogResult.OK)
                    {
                        RutaKey = OpenFileDialogKey.FileName;
                        //XtraMessageBox.Show(RutaKey);
                        try
                        {
                            // initialize a new XtraInputBoxArgs instance
                            XtraInputBoxArgs args = new XtraInputBoxArgs();
                            // set required Input Box options
                            args.Caption = "Archivo .key";
                            args.Prompt = "Contraseña";
                            args.DefaultButtonIndex = 0;
                            args.Showing += Args_Showing;
                            // initialize a DateEdit editor with custom settings
                            TextEdit editor = new TextEdit();
                            CheckEdit check = new CheckEdit();
                            args.Editor = check;
                            args.Editor = editor;
                            editor.Properties.UseSystemPasswordChar = true;
                            // display an Input Box with the custom editor
                            var result2 = XtraInputBox.Show(args).ToString();
                            // set a dialog icon
                            if (result2 != null || result2 != "")
                            {
                                XtraMessageBox.Show(result2);
                                Pass = result2;
                            }
                        }
                        catch(Exception xtra)
                        {
                            result = false;
                            //XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            XtraMessageBox.Show("Error al generar Xml de nómina, archivo .key no encontrado.","",MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return false;
                            //XtraMessageBox.Show(xtra.Message + "\nValidaKey()");
                        }
                        if (controlador.AgregaArchivoKey(rfc, RutaKey, Pass).Equals(true))
                        {
                            result = true;
                        }
                        else
                        {
                            result = false;
                        }                        
                    }
                    else
                    {
                        result = false;
                    }
                }
                else
                {
                    XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); ;
                    result =  false;
                }
            }
            else
            {
                result = true;
            }
            return result;
        }

        [Obsolete]
        private void GeneraXML()
        {
            try
            {

                if (ValidaCer().Equals(false))
                {
                    return;
                }
                if (ValidaKey().Equals(false))
                {
                    return;
                }
                splashScreenManager1.ShowWaitForm();
                splashScreenManager1.SetWaitFormCaption("Generando nomina");

                Folio.Empleado = empleado.Nombre;
                Folio.RFC = empleado.RFC;
                Folio.Empresa = empresa;
                Folio.FecIni = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                Folio.FecFin = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                Folio.FecPago = Convert.ToDateTime(FecPagoUni.Text);
                Folio.Importe = Calculo.IngresosBrutos;


                Bitacora.IPMovimiento = ip;
                Bitacora.Empresa = empresa;
                Bitacora.FecPago = Convert.ToDateTime(FecPagoUni.Text);
                //Folio.FecPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
                Bitacora.FecIni = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                Bitacora.FecFin = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                Bitacora.FecMovimiento = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"));
                Bitacora.Movimiento = "Timbrado";

                string fecPago = Convert.ToDateTime(FecPagoUni.Text).ToString("dd-MM-yyyy");
                pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");

                if (!Directory.Exists(pathArchivoXML))
                {
                    Directory.CreateDirectory(pathArchivoXML);
                }

                nombreArchivo = fecPago + "_" + empleado.RFC + "_" + empleado.Nombre;

                pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo + ".xml");

                bool produccion = false;
                string prod_endpoint = "TimbradoEndpoint_PRODUCCION";
                string test_endpoint = "TimbradoEndpoint_TESTING";

                string pathPrincipalExe = AppDomain.CurrentDomain.BaseDirectory + "/";
                //string pathCer = @"C:\DocAsimilados\CSD01_AAA010101AAA.cer";
                //string pathKey = @"C:\DocAsimilados\CSD01_AAA010101AAA.key";
                //string pass = "12345678a";

                //string pathCer = @"C:\DocAsimilados\00001000000413522787.cer";
                //string pathKey = @"C:\DocAsimilados\CSD_QUERETARO_PTP131002FA0_20190214_113034.key";
                //string pass = "ptpinari";
                string pathCer = controlador.ArchivoCER(rfc);
                string pathKey = controlador.ArchivoKEY(rfc);
                string pass = controlador.PassKey(rfc); 

                string Inicio, Final, Serie, NumCer;

                SelloDigital.leerCER(pathCer, out Inicio, out Final, out Serie, out NumCer);

                folio = controlador.GetFolio();

                if (folio.Equals(null) || folio.Equals(""))
                {
                    splashScreenManager1.CloseWaitForm();
                    XtraMessageBox.Show("¡Folio no encontrado!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else
                {
                    if (folio.Equals("0"))
                    {
                        folio = "0001";
                    }
                    Bitacora.Folio = folio;
                }
                Comprobante comprobante = new Comprobante();
                comprobante.Folio = folio;
                comprobante.Fecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
                //comprobante.Sello = "faltante";
                comprobante.FormaPago = "99";
                comprobante.NoCertificado = NumCer;
                comprobante.SubTotal = Calculo.IngresosBrutos;
                comprobante.Descuento = Calculo.ISR;
                comprobante.Total = Calculo.IngresosNetos;
                comprobante.Moneda = "MXN";
                comprobante.TipoDeComprobante = "N";
                comprobante.MetodoPago = "PUE";
                comprobante.LugarExpedicion = parametros.CODIGO_POSTAL;
                comprobante.TipoCambio = 1;

                ComprobanteEmisor comprobanteEmisor = new ComprobanteEmisor();
                comprobanteEmisor.Rfc = rfc;
                comprobanteEmisor.Nombre = empresa;
                comprobanteEmisor.RegimenFiscal = "601";

                ComprobanteReceptor comprobanteReceptor = new ComprobanteReceptor();
                comprobanteReceptor.Nombre = empleado.Nombre;
                comprobanteReceptor.Rfc = empleado.RFC;
                comprobanteReceptor.UsoCFDI = "P01";

               
                comprobante.Emisor = comprobanteEmisor;
                comprobante.Receptor = comprobanteReceptor;

                List<ComprobanteConcepto> listaConceptos = new List<ComprobanteConcepto>();
                ComprobanteConcepto comprobanteConcepto = new ComprobanteConcepto();
                comprobanteConcepto.Importe = Calculo.IngresosBrutos;
                comprobanteConcepto.ValorUnitario = Calculo.IngresosBrutos;
                comprobanteConcepto.Descuento = Calculo.ISR;
                comprobanteConcepto.ClaveProdServ = "84111505";
                comprobanteConcepto.Cantidad = 1;
                comprobanteConcepto.ClaveUnidad = "ACT";
                comprobanteConcepto.Descripcion = "Pago de nómina";

                listaConceptos.Add(comprobanteConcepto);

                comprobante.Conceptos = listaConceptos.ToArray();
                NominaReceptor nominaReceptor = new NominaReceptor();

                Nomina nomina12 = new Nomina();
                List<Nomina> nominas = new List<Nomina>();
                nomina12.Version = "1.2";
                nomina12.FechaPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
                nomina12.FechaInicialPago = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                nomina12.FechaFinalPago = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                nomina12.TotalPercepcionesSpecified = true;
                nomina12.TotalDeduccionesSpecified = true;
                nomina12.TotalPercepciones = Calculo.IngresosBrutos;
                nomina12.TotalDeducciones = Calculo.ISR;


                if (periodicidad.Equals("Semanal"))
                {
                    nomina12.NumDiasPagados = 7;
                    nominaReceptor.PeriodicidadPago = "02";
                }

                if (periodicidad.Equals("Quincenal"))
                {
                    nomina12.NumDiasPagados = 14;
                    nominaReceptor.PeriodicidadPago = "04";
                }

                if (periodicidad.Equals("Mensual"))
                {
                    nomina12.NumDiasPagados = 30;
                    nominaReceptor.PeriodicidadPago = "05";
                }

                nominaReceptor.Curp = empleado.CURP;
                nominaReceptor.TipoContrato = empleado.TipoContrato;
                nominaReceptor.Sindicalizado = empleado.Sindicalizado;
                nominaReceptor.NumEmpleado = empleado.NumEmpl;
                nominaReceptor.Departamento = empleado.Departamento;
                nominaReceptor.Puesto = empleado.Puesto;
                string entFed = controlador.GetEntFed(bd, parametros.CODIGO_POSTAL);
                nominaReceptor.TipoRegimen = empleado.TipoRegimen;
                nominaReceptor.ClaveEntFed = entFed;
                nominaReceptor.SalarioBaseCotApor = 0;

                NominaDeducciones nominaDeducciones = new NominaDeducciones();
                NominaDeduccionesDeduccion nominaDeduccionesDeduccion  = new NominaDeduccionesDeduccion();
                NominaPercepciones nominaPercepciones = new NominaPercepciones();
                NominaPercepcionesPercepcion nominaPercepcionesPercepcion  = new NominaPercepcionesPercepcion();

                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepciones.TotalExento = 0;
                nominaPercepciones.TotalGravado = Calculo.IngresosBrutos;
                nominaPercepciones.TotalSueldosSpecified = true;
                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.TipoPercepcion = "046";
                nominaPercepcionesPercepcion.Clave = "046";
                nominaPercepcionesPercepcion.Concepto = "INGRESO A ASIMILADOS A SALARIO";
                nominaPercepcionesPercepcion.ImporteGravado = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.ImporteExento = 0;

                nominaDeducciones.TotalImpuestosRetenidosSpecified = true;
                nominaDeducciones.TotalImpuestosRetenidos = Calculo.ISR;

                nominaDeduccionesDeduccion.TipoDeduccion = "002";
                nominaDeduccionesDeduccion.Clave = "211";
                nominaDeduccionesDeduccion.Concepto = "ISR";
                nominaDeduccionesDeduccion.Importe = Calculo.ISR;


                nomina12.Receptor = nominaReceptor;
                nomina12.Deducciones = nominaDeducciones;
                nomina12.Percepciones = nominaPercepciones;
                nomina12.Percepciones.Percepcion = nominaPercepcionesPercepcion.ToArray();
                nominaDeducciones.Deduccion = nominaDeduccionesDeduccion.ToArray();


                nominas.Add(nomina12);
                //comprobante.Nomina12 = nomina12;
                comprobante.Complemento = new ComprobanteComplemento[1];
                comprobante.Complemento[0] = new ComprobanteComplemento();

                splashScreenManager1.SetWaitFormCaption("Generando XML");

                XmlDocument nom12 = new XmlDocument();
                XmlSerializerNamespaces xmlNameSpaceNomi = new XmlSerializerNamespaces();
                xmlNameSpaceNomi.Add("nomina12", "http://www.sat.gob.mx/nomina12");
                using (XmlWriter writer = nom12.CreateNavigator().AppendChild())
                {
                    new XmlSerializer(nomina12.GetType()).Serialize(writer, nomina12, xmlNameSpaceNomi);
                }
                comprobante.Complemento[0].Any = new XmlElement[1];
                comprobante.Complemento[0].Any[0] = nom12.DocumentElement;

                GenXML(comprobante);

                string cadenaOrig = "";
                //string ruta = @"C:\DocAsimilados\xslt\cadenaoriginal_3_3.xslt";
                string pathCadenaOriginalxslt = pathPrincipalExe + @"xslt\cadenaoriginal_3_3.xslt";
                System.Xml.Xsl.XslCompiledTransform transformador = new System.Xml.Xsl.XslCompiledTransform(true);
                transformador.Load(pathCadenaOriginalxslt);       

                using (StringWriter sw = new StringWriter())
                using (XmlWriter xwo = XmlWriter.Create(sw, transformador.OutputSettings))
                {

                    //transformador.Transform(pathXml, xwo);
                    transformador.Transform(pathArchivoXML, xwo);                 
                    cadenaOrig = sw.ToString(); 
                }

                SelloDigital selloDigital = new SelloDigital();
                comprobante.Certificado = selloDigital.Certificado(pathCer);
                comprobante.Sello = selloDigital.Sellar(cadenaOrig, pathKey, pass);
                //Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
                GenXML(comprobante);

                splashScreenManager1.SetWaitFormCaption("Timbrando Documento..");

                try
                {
                    ServicioTimbradoProduccion.TimbradoPortTypeClient portTypeClient = null;
                    portTypeClient = (produccion)
                        ? new ServicioTimbradoProduccion.TimbradoPortTypeClient(prod_endpoint)
                        : portTypeClient = new ServicioTimbradoProduccion.TimbradoPortTypeClient(test_endpoint);

                    byte[] bxml = Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(pathArchivoXML));
                    ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("testing@solucionfactible.com", "timbrado.SF.16672", bxml, false);
                    //splashScreenManager1.SetWaitFormCaption(respuesta.status.ToString());
                    //splashScreenManager1.SetWaitFormCaption(respuesta.mensaje);
                    ServicioTimbradoProduccion.CFDIResultadoCertificacion[] cFDIResultados = respuesta.resultados;
                    if (respuesta.status.Equals(200))
                    {
                        //XtraMessageBox.Show(cFDIResultados[0].uuid);
                        //XtraMessageBox.Show(cFDIResultados[0].certificadoSAT);
                        //XtraMessageBox.Show(cFDIResultados[0].mensaje);
                        if (cFDIResultados[0].status.Equals(200))
                        {
                            System.IO.File.Delete(pathArchivoXML);
                            pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");
                            nombreArchivo = fecPago + "_" + empleado.RFC + "_" + empleado.Nombre;
                            pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo);
                            pathArchivoXML = Path.Combine(pathArchivoXML + "_" + cFDIResultados[0].uuid + ".xml");
                            pathArchivoXMLF = Path.Combine(pathArchivoXML + "_" + cFDIResultados[0].uuid);
                            byte[] info = cFDIResultados[0].cfdiTimbrado;
                            FileStream fs = new FileStream(path: pathArchivoXML, mode: FileMode.Create);
                            fs.Write(info, 0, info.Length);
                            fs.Close();

                            Folio.UUID = cFDIResultados[0].uuid;
                            Folio.RutaXML = pathArchivoXML;
                            Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
                            Folio.StatusSAT = "Vigente";
                            Bitacora.UUID = cFDIResultados[0].uuid;
                            Bitacora.StatusSAT = "Vigente";
                            Bitacora.Usuario = Properties.Settings.Default.Usuario.ToString();

                            controlador.InsertaFolio(Folio);
                            controlador.InsertaBitacora(Bitacora);
                        }
                        else
                        {
                            System.IO.File.Delete(pathArchivoXML);
                            splashScreenManager1.CloseWaitForm();
                            ////XtraMessageBox.Show(cFDIResultados[0].mensaje + "\nEmpleado #: " + empleado.NumEmpl + " (" + empleado.Nombre + ")"
                            ////, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            XtraMessageBox.Show("¡Error al timbrar documento!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            controlador.LogTimbradoUnitario(empleado, cFDIResultados[0].mensaje);
                            return;
                        }

                    }
                    else
                    {                       
                        splashScreenManager1.CloseWaitForm();
                        XtraMessageBox.Show(cFDIResultados[0].mensaje);
                        return;
                    }
                    //XtraMessageBox.Show(cFDIResultados.ToString());
                    //System.IO.File.WriteAllText(pathXml,);
                } catch(Exception timbrado)
                {
                    splashScreenManager1.CloseWaitForm();
                    XtraMessageBox.Show(timbrado.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                splashScreenManager1.SetWaitFormCaption("Generando PDF..");

               if(controlador.LeerXMLModAsim(pathArchivoXML, pathArchivoXMLF, splashScreenManager1).Equals(!true))
                {
                    XtraMessageBox.Show("Hubo un error al generar archivo pdf", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                splashScreenManager1.CloseWaitForm();
                XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception genxml)
            {
                splashScreenManager1.CloseWaitForm();
                XtraMessageBox.Show(genxml.Message + "Error Componente NominaAsimilados: GenXML()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        [Obsolete]
        private void GenXmlMasiv(E.Empleado nomiEmpl)
        {
            //try
            //{
                
            //    if (ValidaCer().Equals(false))
            //    {
            //        return;
            //    }
            //    if (ValidaKey().Equals(false))
            //    {
            //        return;
            //    }
            //    splashScreenManager1.ShowWaitForm();
            //    splashScreenManager1.SetWaitFormCaption("Generando nomina");

            //    periodicidad = nomiEmpl.Periodicidad;

            //    Folio.Empleado = nomiEmpl.Nombre;
            //    Folio.Empresa = empresa;
            //    Folio.FecIni = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
            //    Folio.FecFin = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
            //    Folio.FecPago = Convert.ToDateTime(FecPagoMasiv.Text);
            //    Folio.Importe = nomiEmpl.IngresosBrutos;

            //    Bitacora.IPMovimiento = ip;
            //    Bitacora.Empresa = empresa;
            //    Bitacora.FecPago = Convert.ToDateTime(FecPagoMasiv.Text);
            //    //Folio.FecPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
            //    Bitacora.FecIni = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
            //    Bitacora.FecFin = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
            //    Bitacora.FecMovimiento = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"));
            //    Bitacora.Movimiento = "Timbrado";

            //    string fecPago = Convert.ToDateTime(FecPagoMasiv.Text).ToString("dd-MM-yyyy");
            //    pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");

            //    if (!Directory.Exists(pathArchivoXML))
            //    {
            //        Directory.CreateDirectory(pathArchivoXML);
            //    }

            //    nombreArchivo = fecPago + "_" + nomiEmpl.RFC + "_" + nomiEmpl.Nombre;

            //    pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo + ".xml");

            //    bool produccion = false;
            //    string prod_endpoint = "TimbradoEndpoint_PRODUCCION";
            //    string test_endpoint = "TimbradoEndpoint_TESTING";

            //    string pathPrincipalExe = AppDomain.CurrentDomain.BaseDirectory + "/";
            //    //string pathCer = @"C:\DocAsimilados\CSD01_AAA010101AAA.cer";
            //    //string pathKey = @"C:\DocAsimilados\CSD01_AAA010101AAA.key";
            //    //string pass = "12345678a";

            //    //string pathCer = @"C:\DocAsimilados\00001000000413522787.cer";
            //    //string pathKey = @"C:\DocAsimilados\CSD_QUERETARO_PTP131002FA0_20190214_113034.key";
            //    //string pass = "ptpinari";
            //    string pathCer = controlador.ArchivoCER(rfc);
            //    string pathKey = controlador.ArchivoKEY(rfc);
            //    string pass = controlador.PassKey(rfc);

            //    string Inicio, Final, Serie, NumCer;

            //    SelloDigital.leerCER(pathCer, out Inicio, out Final, out Serie, out NumCer);

            //    folio = controlador.GetFolio();

            //    if (folio.Equals(null) || folio.Equals(""))
            //    {
            //        splashScreenManager1.CloseWaitForm();
            //        XtraMessageBox.Show("¡Folio no encontrado!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        return;
            //    }
            //    else
            //    {
            //        if (folio.Equals("0"))
            //        {
            //            folio = "0001";
            //        }
            //        Bitacora.Folio = folio;
            //    }
            //    Comprobante comprobante = new Comprobante();
            //    comprobante.Folio = folio;
            //    comprobante.Fecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
            //    //comprobante.Sello = "faltante";
            //    comprobante.FormaPago = "99";
            //    comprobante.NoCertificado = NumCer;
            //    comprobante.SubTotal = nomiEmpl.IngresosBrutos;
            //    comprobante.Descuento = nomiEmpl.ISR;
            //    comprobante.Total = nomiEmpl.IngresosBrutos; //ingresos netos
            //    comprobante.Moneda = "MXN";
            //    comprobante.TipoDeComprobante = "N";
            //    comprobante.MetodoPago = "PUE";
            //    comprobante.LugarExpedicion = parametros.CODIGO_POSTAL;
            //    comprobante.TipoCambio = 1;

            //    ComprobanteEmisor comprobanteEmisor = new ComprobanteEmisor();
            //    comprobanteEmisor.Rfc = rfc;
            //    comprobanteEmisor.Nombre = empresa;
            //    comprobanteEmisor.RegimenFiscal = "601";

            //    ComprobanteReceptor comprobanteReceptor = new ComprobanteReceptor();
            //    comprobanteReceptor.Nombre = nomiEmpl.Nombre;
            //    comprobanteReceptor.Rfc = nomiEmpl.RFC;
            //    comprobanteReceptor.UsoCFDI = "P01";


            //    comprobante.Emisor = comprobanteEmisor;
            //    comprobante.Receptor = comprobanteReceptor;

            //    List<ComprobanteConcepto> listaConceptos = new List<ComprobanteConcepto>();
            //    ComprobanteConcepto comprobanteConcepto = new ComprobanteConcepto();
            //    comprobanteConcepto.Importe = nomiEmpl.IngresosBrutos;
            //    comprobanteConcepto.ValorUnitario = nomiEmpl.IngresosBrutos;
            //    comprobanteConcepto.Descuento = nomiEmpl.ISR;
            //    comprobanteConcepto.ClaveProdServ = "84111505";
            //    comprobanteConcepto.Cantidad = 1;
            //    comprobanteConcepto.ClaveUnidad = "ACT";
            //    comprobanteConcepto.Descripcion = "Pago de nómina";

            //    listaConceptos.Add(comprobanteConcepto);

            //    comprobante.Conceptos = listaConceptos.ToArray();
            //    NominaReceptor nominaReceptor = new NominaReceptor();

            //    Nomina nomina12 = new Nomina();
            //    List<Nomina> nominas = new List<Nomina>();
            //    nomina12.Version = "1.2";
            //    nomina12.FechaPago = Convert.ToDateTime(FecPagoMasiv.EditValue.ToString());
            //    nomina12.FechaInicialPago = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
            //    nomina12.FechaFinalPago = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
            //    nomina12.TotalPercepcionesSpecified = true;
            //    nomina12.TotalDeduccionesSpecified = true;
            //    nomina12.TotalPercepciones = nomiEmpl.IngresosBrutos;
            //    nomina12.TotalDeducciones = nomiEmpl.ISR;


            //    if (periodicidad.Equals("Semanal"))
            //    {
            //        nomina12.NumDiasPagados = 7;
            //        nominaReceptor.PeriodicidadPago = "02";
            //    }

            //    if (periodicidad.Equals("Quincenal"))
            //    {
            //        nomina12.NumDiasPagados = 14;
            //        nominaReceptor.PeriodicidadPago = "04";
            //    }

            //    if (periodicidad.Equals("Mensual"))
            //    {
            //        nomina12.NumDiasPagados = 30;
            //        nominaReceptor.PeriodicidadPago = "05";
            //    }

            //    nominaReceptor.Curp = nomiEmpl.CURP;
            //    nominaReceptor.TipoContrato = nomiEmpl.TipoContrato;
            //    nominaReceptor.Sindicalizado = nomiEmpl.Sindicalizado;
            //    nominaReceptor.NumEmpleado = nomiEmpl.NumEmpl;
            //    nominaReceptor.Departamento = nomiEmpl.Departamento;
            //    nominaReceptor.Puesto = nomiEmpl.Puesto;
            //    string entFed = controlador.GetEntFed(bd, parametros.CODIGO_POSTAL);
            //    nominaReceptor.TipoRegimen = nomiEmpl.TipoRegimen;
            //    nominaReceptor.ClaveEntFed = entFed;
            //    nominaReceptor.SalarioBaseCotApor = 0;

            //    NominaDeducciones nominaDeducciones = new NominaDeducciones();
            //    NominaDeduccionesDeduccion nominaDeduccionesDeduccion = new NominaDeduccionesDeduccion();
            //    NominaPercepciones nominaPercepciones = new NominaPercepciones();
            //    NominaPercepcionesPercepcion nominaPercepcionesPercepcion = new NominaPercepcionesPercepcion();

            //    nominaPercepciones.TotalSueldos = nomiEmpl.IngresosBrutos;
            //    nominaPercepciones.TotalExento = 0;
            //    nominaPercepciones.TotalGravado = nomiEmpl.IngresosBrutos;
            //    nominaPercepciones.TotalSueldosSpecified = true;
            //    nominaPercepciones.TotalSueldos = nomiEmpl.IngresosBrutos;
            //    nominaPercepcionesPercepcion.TipoPercepcion = "046";
            //    nominaPercepcionesPercepcion.Clave = "046";
            //    nominaPercepcionesPercepcion.Concepto = "INGRESO A ASIMILADOS A SALARIO";
            //    nominaPercepcionesPercepcion.ImporteGravado = nomiEmpl.IngresosBrutos;
            //    nominaPercepcionesPercepcion.ImporteExento = 0;

            //    nominaDeducciones.TotalImpuestosRetenidosSpecified = true;
            //    nominaDeducciones.TotalImpuestosRetenidos = nomiEmpl.ISR;

            //    nominaDeduccionesDeduccion.TipoDeduccion = "002";
            //    nominaDeduccionesDeduccion.Clave = "211";
            //    nominaDeduccionesDeduccion.Concepto = "ISR";
            //    nominaDeduccionesDeduccion.Importe = nomiEmpl.ISR;


            //    nomina12.Receptor = nominaReceptor;
            //    nomina12.Deducciones = nominaDeducciones;
            //    nomina12.Percepciones = nominaPercepciones;
            //    nomina12.Percepciones.Percepcion = nominaPercepcionesPercepcion.ToArray();
            //    nominaDeducciones.Deduccion = nominaDeduccionesDeduccion.ToArray();


            //    nominas.Add(nomina12);
            //    //comprobante.Nomina12 = nomina12;
            //    comprobante.Complemento = new ComprobanteComplemento[1];
            //    comprobante.Complemento[0] = new ComprobanteComplemento();

            //    splashScreenManager1.SetWaitFormCaption("Generando XML");

            //    XmlDocument nom12 = new XmlDocument();
            //    XmlSerializerNamespaces xmlNameSpaceNomi = new XmlSerializerNamespaces();
            //    xmlNameSpaceNomi.Add("nomina12", "http://www.sat.gob.mx/nomina12");
            //    using (XmlWriter writer = nom12.CreateNavigator().AppendChild())
            //    {
            //        new XmlSerializer(nomina12.GetType()).Serialize(writer, nomina12, xmlNameSpaceNomi);
            //    }
            //    comprobante.Complemento[0].Any = new XmlElement[1];
            //    comprobante.Complemento[0].Any[0] = nom12.DocumentElement;

            //    GenXML(comprobante);

            //    string cadenaOrig = "";
            //    //string ruta = @"C:\DocAsimilados\xslt\cadenaoriginal_3_3.xslt";
            //    string pathCadenaOriginalxslt = pathPrincipalExe + @"xslt\cadenaoriginal_3_3.xslt";
            //    System.Xml.Xsl.XslCompiledTransform transformador = new System.Xml.Xsl.XslCompiledTransform(true);
            //    transformador.Load(pathCadenaOriginalxslt);

            //    using (StringWriter sw = new StringWriter())
            //    using (XmlWriter xwo = XmlWriter.Create(sw, transformador.OutputSettings))
            //    {

            //        //transformador.Transform(pathXml, xwo);
            //        transformador.Transform(pathArchivoXML, xwo);
            //        cadenaOrig = sw.ToString();
            //    }

            //    SelloDigital selloDigital = new SelloDigital();
            //    comprobante.Certificado = selloDigital.Certificado(pathCer);
            //    comprobante.Sello = selloDigital.Sellar(cadenaOrig, pathKey, pass);
            //    //Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
            //    GenXML(comprobante);

            //    splashScreenManager1.SetWaitFormCaption("Timbrando Documento..");

            //    try
            //    {
            //        ServicioTimbradoProduccion.TimbradoPortTypeClient portTypeClient = null;
            //        portTypeClient = (produccion)
            //            ? new ServicioTimbradoProduccion.TimbradoPortTypeClient(prod_endpoint)
            //            : portTypeClient = new ServicioTimbradoProduccion.TimbradoPortTypeClient(test_endpoint);

            //        byte[] bxml = Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(pathArchivoXML));
            //        ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("testing@solucionfactible.com", "timbrado.SF.16672", bxml, false);
            //        //splashScreenManager1.SetWaitFormCaption(respuesta.status.ToString());
            //        //splashScreenManager1.SetWaitFormCaption(respuesta.mensaje);
            //        ServicioTimbradoProduccion.CFDIResultadoCertificacion[] cFDIResultados = respuesta.resultados;
            //        if (respuesta.status.Equals(200))
            //        {
            //            //XtraMessageBox.Show(cFDIResultados[0].uuid);
            //            //XtraMessageBox.Show(cFDIResultados[0].certificadoSAT);
            //            //XtraMessageBox.Show(cFDIResultados[0].mensaje);
            //            if (cFDIResultados[0].status.Equals(200))
            //            {
            //                System.IO.File.Delete(pathArchivoXML);
            //                pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");
            //                nombreArchivo = fecPago + "_" + nomiEmpl.RFC + "_" + nomiEmpl.Nombre;
            //                pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo);
            //                pathArchivoXML = Path.Combine(pathArchivoXML + "_" + cFDIResultados[0].uuid + ".xml");
            //                byte[] info = cFDIResultados[0].cfdiTimbrado;
            //                FileStream fs = new FileStream(path: pathArchivoXML, mode: FileMode.Create);
            //                fs.Write(info, 0, info.Length);
            //                fs.Close();

            //                Folio.UUID = cFDIResultados[0].uuid;
            //                Folio.RutaXML = pathArchivoXML;
            //                Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
            //                Folio.StatusSAT = "Vigente";
            //                Bitacora.UUID = cFDIResultados[0].uuid;
            //                Bitacora.StatusSAT = "Vigente";
            //                Bitacora.Usuario = Properties.Settings.Default.Usuario.ToString();

            //                controlador.InsertaFolio(Folio);
            //                controlador.InsertaBitacora(Bitacora);
            //            }
            //            else
            //            {
            //                System.IO.File.Delete(pathArchivoXML);
            //                splashScreenManager1.CloseWaitForm();
            //                XtraMessageBox.Show(cFDIResultados[0].mensaje + "\nEmpleado #: "+ nomiEmpl.NumEmpl + " ("+ nomiEmpl.Nombre + ")"
            //                    , "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //                return;
            //            }

            //        }
            //        else
            //        {
            //            splashScreenManager1.CloseWaitForm();
            //            XtraMessageBox.Show(cFDIResultados[0].mensaje);
            //            return;
            //        }
            //        //XtraMessageBox.Show(cFDIResultados.ToString());
            //        //System.IO.File.WriteAllText(pathXml,);
            //    }
            //    catch (Exception timbrado)
            //    {
            //        splashScreenManager1.CloseWaitForm();
            //        XtraMessageBox.Show(timbrado.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        return;
            //    }
            //    splashScreenManager1.SetWaitFormCaption("Generando PDF..");

            //    if (controlador.LeerXMLModAsim(pathArchivoXML, pathArchivoXML, splashScreenManager1).Equals(!true))
            //    {
            //        XtraMessageBox.Show("Hubo un error al generar archivo pdf", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        return;
            //    }

            //    //splashScreenManager1.CloseWaitForm();
            //    //XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

            //}
            //catch (Exception genxml)
            //{
            //    splashScreenManager1.CloseWaitForm();
            //    XtraMessageBox.Show(genxml.Message + "Error Componente NominaAsimilados: GenXML()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}

        }

        private void GenXML(Comprobante comprobante)
        {
            XmlSerializerNamespaces xmlNameSpace = new XmlSerializerNamespaces();
            xmlNameSpace.Add("cfdi", "http://www.sat.gob.mx/cfd/3");
            xmlNameSpace.Add("tfd", "http://www.sat.gob.mx/TimbreFiscalDigital");
            xmlNameSpace.Add("xsi", "http://www.w3.org/2001/XMLSchema-instance");
            xmlNameSpace.Add("nomina12", "http://www.sat.gob.mx/nomina12");


            XmlSerializer xmlSerializer = new XmlSerializer(typeof(Comprobante));

            string pathXmlWrit = @"";

            using (var sww = new Resources.StringWritterWithEncoding(Encoding.UTF8))
            {
                using (XmlWriter writter = XmlWriter.Create(sww))
                {
                    xmlSerializer.Serialize(writter, comprobante, xmlNameSpace);
                    pathXmlWrit = sww.ToString();
                }
            }
            System.IO.File.WriteAllText(pathArchivoXML, pathXmlWrit);
        }
        private void TxtPeriPago_EditValueChanged(object sender, EventArgs e)
        {
            periodicidad = TxtPeriPago.EditValue.ToString();
            LblIngBru.Text = "Ingresos Brutos " + periodicidad;
            LblIngNet.Text = "Ingresos Netos " + periodicidad;

            if (ChBruto.Checked.Equals(true))
            {
                GenerarCalculoIngresosBrutos();
            }
        }

        private void dateEdit2_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void ChPeriMasiv_CheckedChanged(object sender, EventArgs e)
        {
            if (ChPeriMasiv.Checked.Equals(true))
            {
                DialogResult result = XtraMessageBox.Show("¿Desea cambiar el tipo de periodicidad?" +
                    "\nEl cambio afectara a todos los empelados seleccionados.", "Mensaje",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result.Equals(DialogResult.Yes))
                {
                    PeriPagoMasiv.ReadOnly = false;
                }
                else
                {
                    ChPeriMasiv.Checked = false;
                    PeriPagoMasiv.EditValue = null;
                    PeriPagoMasiv.ReadOnly = true;
                }
            }
            else
            {
                ChPeriMasiv.Checked = false;
                PeriPagoMasiv.EditValue = null;
                PeriPagoMasiv.ReadOnly = true;
            }

        }

        private void gridViewNomiMasiv_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.Caption.Equals("Ingresos"))
            {
                string ingresosCelda = e.Value.ToString();
                string periMasiv = gridViewNomiMasiv.GetRowCellValue(e.RowHandle, "Periodicidad Pago").ToString();
                decimal IngresosMsiv = Convert.ToDecimal(ingresosCelda);
                calcMasiv =  controlador.GeneraCalculo(IngresosMsiv, periMasiv);

                gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "Neto", calcMasiv.IngresosNetos);
            }

            if (e.Column.Caption.Equals("Periodicidad Pago"))
            {
                string periCelda = e.Value.ToString();
                string ingresosCelda = gridViewNomiMasiv.GetRowCellValue(e.RowHandle, "Ingresos").ToString();
                decimal ingresosMasiv = Convert.ToDecimal(ingresosCelda);

                calcMasiv = controlador.GeneraCalculo(ingresosMasiv, periCelda);
                gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "Ingreso Neto", calcMasiv.IngresosNetos);
            }
            ////if (e.Column.Caption.Equals("Periodicidad Pago"))
            ////{
            ////    gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "Periodicidad Pago", peri);
            ////}
        }

        private void NominaAsimilados_Load(object sender, EventArgs e)
        {
            sqlDataSource1.Connection.ConnectionString = "Data Source=192.168.4.182\\COMPAC;Initial Catalog=" + bd + ";User ID=sa;Password=Supervisor2020.;";
            sqlDataSource1.Fill();
            ChNeto.Visible = false;
            parametros = controlador.GetParametros(rfc);
            layoutControlGroup5.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItem17.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            FecPagoMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
            FecIniPeriMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
            FecFinPeriMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
            layoutControlGroup6.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItem18.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItem23.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
            layoutControlItem24.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            SqlTipoPeri.Fill();

            //Initialize GridControl MasivEMpl
            controlador.ListaEmpleadosNomiMasiv(gridControlNomiMasiv);
            gridControlNomiMasiv.Visible = true;

            splash.SetWaitFormCaption("Cargando Empleados...");
            string rfcEmpl = null;
            var Empleado = new List<E.Empleado>();
            E.Empleado[] empl = null;
            for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
            {
                rfcEmpl = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[2]).ToString();
                Empleado.Add(new E.Empleado
                {
                    RFC = rfcEmpl
                });
                empl = empleado.ToArray();
            }

            int row = -1;
            int contRow = gridViewNomiMasiv.RowCount;
            foreach (var item in Empleado)
            {
                row++;

                if (row < contRow)
                {
                    empleado = controlador.BuscaEmpleado(item.RFC);
                    peri = empleado.Periodicidad;
                    gridViewNomiMasiv.SetRowCellValue(row, "prueba", peri);
                    gridViewNomiMasiv.SetRowCellValue(row, "Periodicidad Pago", peri);
                    repositoryItemGridLookUpEdit1View.SetRowCellValue(row, "prueba", peri);
                }
                else
                {
                    return;
                }
            }
            splash.CloseWaitForm();
        }

        [Obsolete]
        private void BtnNomiMasiv_Click(object sender, EventArgs e)
        {
            try
            {
                var empleadoMasivo = new List<E.Empleado>();
                E.Empleado[] emplMasiv = null;
                for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                {
                    if (gridViewNomiMasiv.IsRowSelected(i))
                    {
                        tipoIngresos = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[4]).ToString();
                        ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                        ISRMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[6]));
                        rfcEmplMasiv = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[2]).ToString();
                        netoMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[7]));
                        empleadoMasivo.Add(new E.Empleado
                        {
                            RFC = rfcEmplMasiv,
                            IngresosBrutos = ingresosMasiv,
                            ISR = ISRMasiv,
                            IngresosNetos = netoMasiv,
                            Periodicidad = tipoIngresos
                        });
                        emplMasiv = empleadoMasivo.ToArray();
                    }
                }

                if (empleadoMasivo.Count.Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    if (ValidaCer().Equals(false))
                    {
                        return;
                    }
                    if (ValidaKey().Equals(false))
                    {
                        return;
                    }

                    DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                    DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                    DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                    controlador.GenXmlMasivo(empleadoMasivo, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago);
                    //int row = -1;
                    //int contRow = gridViewNomiMasiv.RowCount;
                    //foreach (var item in emplMasiv)
                    //{
                    //    row++;
                    //    EmplMasiv = controlador.BuscaEmpleado(item.RFC);
                    //    EmplMasiv.IngresosBrutos = item.IngresosBrutos;
                    //    EmplMasiv.ISR = item.ISR;
                    //    EmplMasiv.IngresosNetos = item.IngresosNetos;

                    //    if (row < contRow)
                    //    {
                    //        GenXmlMasiv(EmplMasiv);
                    //    }
                    //    else
                    //    {
                    //        splashScreenManager1.CloseWaitForm();
                    //        XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //        return;
                    //    }
                    //}
                }
            }
            catch (Exception masiv)
            {
                XtraMessageBox.Show(masiv.Message + "\nError modulo Nomina: BtnNomiMasiv", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnGenNom_Click(object sender, EventArgs e)
        {
            GeneraXML();
        }
    }
}
