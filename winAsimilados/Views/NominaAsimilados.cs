using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Windows.Forms;
using E = winAsimilados.Entities;
using C = winAsimilados.Controller;
using R = winAsimilados.Resources;
using V = winAsimilados.Views;
using System.IO;
using System.Xml;
using XSDToXML.Utils;
using DevExpress.XtraEditors;
using DevExpress.Utils.Extensions;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraSplashScreen;
using DevExpress.Utils.OAuth.Provider;
using winAsimilados.Entities;
using System.Net;
using Excel = Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;
using Microsoft.Office.Interop.Excel;
using System.Globalization;
using DevExpress.Utils.About;
using DevExpress.XtraNavBar.ViewInfo;
using DevExpress.XtraPrinting;
using DevExpress.XtraPrinting.Control;
using DevExpress.XtraReports.UI;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraBars;
using ServicioTimbradoClient = winAsimilados.ServcioTimbradoNTLINK.ServicioTimbradoClient;
using DevExpress.XtraGrid.Views.Grid;
using M = winAsimilados.Models;

namespace winAsimilados.Views
{
    public partial class NominaAsimilados : Form
    {
        //string pathXml = @"C:\XML\prueba.xml";
        #region objetos
        E.Empleado empleado = new E.Empleado();
        E.Calculo Calculo = new E.Calculo();
        C.Controller controlador = new C.Controller();
        E.Parametros parametros = new E.Parametros();
        E.Empleado EmplMasiv = new E.Empleado();
        E.Calculo calcMasiv = new E.Calculo();
        E.BitacoraXML Bitacora = new E.BitacoraXML();
        E.FolioXML Folio = new E.FolioXML();
        E.Parametros parametrosLayout = new Parametros();
        E.Empleado empleadoLayout = new Empleado();
        E.Layout layoutBanorte = new Layout();
        List<E.ISR30> listaISR30 = new List<E.ISR30>();
        E.Calculo calcExcel = new E.Calculo();
        E.Caratula caratulaPago = new E.Caratula();
        E.ClienteAsimilado infoCliente = new E.ClienteAsimilado();
        E.DetalleLayout detalleLayout = new E.DetalleLayout();
        E.Banco datosBanco = new E.Banco();
        E.ClaveProdServ claveServicio = new E.ClaveProdServ();
        M.Nomina nomina = new M.Nomina();
        E.Parametros parametrosNomina = new Parametros();
        #endregion

        #region variables
        bool enviaCorreo = false;
        string destinoCorreo = "", correoCliente = "";
        string usuarioSistema = Properties.Settings.Default.Usuario.ToString();
        string pathXml = @"C:\XML\";
        string pathArchivoXML = null;
        string pathArchivoXMLF = null;
        string nombreArchivo = null;
        bool calcUnitario;
        string selectCliente = null;
        string periodicidad;
        string tipoIngresos;
        decimal ingresos, ingresosMasiv, ISRMasiv, netoMasiv;
        decimal LimInferiorLayout, ExLimInfLayout, PerExLimInfLayout, ImpMargLayout, CFLayout, SubLayout;
        string empresa, rfc, descPago, cuentaDestino /*,fecAplicación, fecIniPeriLayout, fecFinPeriLayout*/;
        string peri;
        string bd = C.Conexion.PerformConnection().Database;
        string ip = Dns.GetHostEntry(Dns.GetHostName()).AddressList.Where(ip => ip.AddressFamily.ToString().ToUpper().Equals("INTERNETWORK")).FirstOrDefault().ToString();
        string rfcEmplMasiv;
        string folio;
        string numEmplLayoutBanorte;
        string nombreCaratula;
        string idEmpresaCaratula;
        string periPagoLayout;
        string nombreEmpleado;
        decimal totalPagoAsimilados = 0, otrosConceptos = 0, depositoNeto = 0, aguinaldo = 0, vacaciones = 0, primaVac = 0, descuento = 0;
        //variables pestáña Genlayout
        string nomCaratulaGenLayout, EstatusCaratula, nomGenLayout, IDClienteLayout;
        string pacTimbrado, ambiente;
        //variables excel
        int IDEmpl;
        decimal importeExcel = 0;
        string periodicidadExcel = "MENSUAL";
        string nominaEmpresaID;
        string estatusNomina, resumenNominaID;
        int IDResumenNomina;
        #endregion
        SplashScreenManager splash;
        public NominaAsimilados(string Empresa, string RFCEmpresa, SplashScreenManager splashScreenManager)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            empresa = Empresa;
            rfc = RFCEmpresa;
            splash = splashScreenManager;
            nominaEmpresaID = Properties.Settings.Default["EmpresaNominaID"].ToString();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource2.Queries[0].Parameters[0].Value = nominaEmpresaID;
            sqlDataSource2.Queries[1].Parameters[0].Value = nominaEmpresaID;
            sqlDataSource2.Queries[3].Parameters[0].Value = nominaEmpresaID;
            sqlDataSource2.Queries[4].Parameters[0].Value = nominaEmpresaID;
            sqlDataSource2.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource2.Fill();
        }

        private void NominaAsimilados_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
        }

        private void BtnSelEmpl_Click(object sender, EventArgs e)
        {
            if (LookUpEmpl.Text.Equals("Seleccione / Escriba Empleado"))
            {
                XtraMessageBox.Show("Por favor, seleccione un empleado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                string RFC = LookUpEmpl.EditValue.ToString();
                this.empleado = controlador.BuscaEmpleado(RFC);
                //XtraMessageBox.Show(empleado.RFC);
                TxtNumEmpl.Text = empleado.NumEmpl;
                TxtPeriPago.Text = empleado.Periodicidad;
                TxtPeriPago.ReadOnly = true;
                TxtRFC.Text = empleado.RFC;
                TxtCurp.Text = empleado.CURP;
                periodicidad = TxtPeriPago.EditValue.ToString();
                LblIngBru.Text = "Ingresos Brutos " + periodicidad;
                LblIngNet.Text =  "Ingresos Netos " + periodicidad;
                ChBruto.Checked = true;
                //ChNeto.Checked = true;
                FecPagoUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                FecIniPeriUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyy");
                FecFinPeriUni.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                layoutControlGroup5.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlGroup6.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem17.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem18.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                layoutControlItem28.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;

            }

        }

        private void TxtIngresos_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                //if (ChBruto.Checked.Equals(false) && ChNeto.Checked.Equals(false))
                //{
                //    XtraMessageBox.Show("Por favor, Seleccione tipo de ingresos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //}
                //XtraMessageBox.Show(periodicidad);
                //XtraMessageBox.Show(TxtIngresos.EditValue.ToString());
                if (ChBruto.Checked.Equals(true))
                {
                    GenerarCalculoIngresosBrutos();
                    //XtraMessageBox.Show("Ingresos:" + ingresos);
                }
                if (ChNeto.Checked.Equals(true))
                {
                    GenerarCalculoIngresosNetos();
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message + "\nError Componente NominaAsimilados", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ChBruto_CheckedChanged(object sender, EventArgs e)
        {
            if (ChBruto.Checked.Equals(true))
            {
                ChNeto.Checked = false;
                tipoIngresos = "Brutos";
                if (TxtIngresos.EditValue.ToString() != "$0" || TxtIngresos.Text != "$0.00")
                {
                    GenerarCalculoIngresosBrutos();
                }

            }
        }

        private void ChNeto_CheckedChanged(object sender, EventArgs e)
        {
            if (ChNeto.Checked.Equals(true))
            {
                ChBruto.Checked = false;
                tipoIngresos = "Netos";
                if (TxtIngresos.EditValue.ToString() != "$0" || TxtIngresos.Text != "$0.00")
                {
                    GenerarCalculoIngresosNetos();
                }
                   
            }
        }

        private void ChCambioPeri_CheckedChanged(object sender, EventArgs e)
        {
            if (ChCambioPeri.Checked.Equals(true))
            {
                DialogResult resultado = XtraMessageBox.Show("¿Desea cambiar el tipo de Peiodicidad?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (resultado.Equals(DialogResult.Yes))
                {
                    //TxtPeriPago.Text = "";
                    //TxtPeriPago.EditValue = "";
                    TxtPeriPago.ReadOnly = false;
                }
                else
                {
                    ChCambioPeri.Checked = false;
                }
            }
            else
            {
                TxtPeriPago.ReadOnly = true;
            }
        }
        private void GenerarCalculoIngresosBrutos()
        {
            try
            {
                decimal neto= 0;
                ingresos = Convert.ToDecimal(TxtIngresos.EditValue.ToString());
                string ing = String.Format("{0:0.00}", ingresos);
                ingresos = Convert.ToDecimal(ing);
                Calculo = controlador.GeneraCalculo(ingresos, periodicidad, bd);
                //if (Calculo.IngresosNetos < ingresos)
                //{
                //    while (ingresos > Calculo.IngresosNetos)
                //    {
                //        if (Calculo.IngresosNetos >= ingresos)
                //        {
                //            break;
                //        }
                //        ingresos = ingresos + 1;
                //        Calculo = controlador.GeneraCalculo(ingresos, periodicidad, bd);
                //    }
                //}
                //for (neto = Calculo.IngresosNetos; neto < ingresos; neto++)
                //{
                //    ingresos =Calculo.IngresosNetos + 1;
                //    Calculo = controlador.GeneraCalculo(ingresos, periodicidad, bd);
                //    TxtIngBru.Text = Calculo.IngresosBrutos.ToString();
                //    TxtLimInf.Text = Calculo.LimInferior.ToString();
                //    TxtExcLimInf.Text = Calculo.ExLimInf.ToString();
                //    TxtPorExcLimInf.Text = Calculo.PerExLimInf.ToString();
                //    TxtCF.Text = Calculo.CF.ToString();
                //    TxtImpMar.Text = Calculo.ImpMarg.ToString();
                //    TxtISR.Text = Calculo.ISR.ToString();
                //    TxtSubEmpl.Text = Calculo.Sub.ToString();
                //    TxtIngNet.Text = Calculo.IngresosNetos.ToString();
                //}              
                TxtIngBru.Text = Calculo.IngresosBrutos.ToString();
                TxtLimInf.Text = Calculo.LimInferior.ToString();
                TxtExcLimInf.Text = Calculo.ExLimInf.ToString();
                TxtPorExcLimInf.Text = Calculo.PerExLimInf.ToString();
                TxtCF.Text = Calculo.CF.ToString();
                TxtImpMar.Text = Calculo.ImpMarg.ToString();
                TxtISR.Text = Calculo.ISR.ToString();
                TxtSubEmpl.Text = Calculo.Sub.ToString();
                TxtIngNet.Text = Calculo.IngresosNetos.ToString();
                

            }
            catch(Exception calc)
            {
                XtraMessageBox.Show(calc.Message +
                    "\nError Modulo Calculo Nomina Unitario: GenerarCalculoIngresosBrutos()",
                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }
        private void GenerarCalculoIngresosNetos()
        {
            try
            {
                ingresos = Convert.ToDecimal(TxtIngresos.EditValue.ToString());
                string ing = String.Format("{0:0.00}", ingresos);
                ingresos = Convert.ToDecimal(ing);
                Calculo = controlador.GeneraCalculoInverso(ingresos, periodicidad,bd);
                TxtIngBru.Text = Calculo.IngresosBrutos.ToString();
                TxtLimInf.Text = Calculo.LimInferior.ToString();
                TxtExcLimInf.Text = Calculo.ExLimInf.ToString();
                TxtPorExcLimInf.Text = Calculo.PerExLimInf.ToString();
                TxtCF.Text = Calculo.CF.ToString();
                TxtImpMar.Text = Calculo.ImpMarg.ToString();
                TxtISR.Text = Calculo.ISR.ToString();
                TxtSubEmpl.Text = Calculo.Sub.ToString();
                TxtIngNet.Text = Calculo.IngresosNetos.ToString();
            }
            catch (Exception calc)
            {
                XtraMessageBox.Show(calc.Message +
                    "\nError Modulo Calculo Nomina Unitario: GenerarCalculoIngresosNetos()",
                    "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            e.Form.Icon = this.Icon;
        }

        private bool ValidaCer()
        {
            bool result = false;
            string pathCerPrueba = controlador.ArchivoCER(rfc);
            string RutaCer;
            if (pathCerPrueba.Equals("") || pathCerPrueba.Equals(null) || !File.Exists(pathCerPrueba))
            {
                if (controlador.GetAdminUsuario(usuarioSistema, bd, false).Equals(true))
                {
                    DialogResult resultado = XtraMessageBox.Show("Archivo .CER no encontrado, ¿Desea Agregarlo?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (resultado.Equals(DialogResult.Yes))
                    {
                        OpenFileDialogCer.Title = "Selecciona Archivo CER";
                        OpenFileDialogCer.Filter = "Archivos Certificado de Seguridad (*.cer;*)|*.cer";
                        if (OpenFileDialogCer.ShowDialog() == DialogResult.OK)
                        {
                            RutaCer = OpenFileDialogCer.FileName;
                            //XtraMessageBox.Show(RutaKey);
                            if (controlador.AgregaArchivoCer(rfc, RutaCer).Equals(true))
                            {
                                result = true;
                            }
                            else
                            {
                                result = false;
                            }
                        }
                        else
                        {
                            result = false;
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Error al generar xml de nómina, archivo .CER no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        result = false;
                    }
                }
                else
                {
                    XtraMessageBox.Show("Error al generar xml de nómina, archivo .CER no encontrado. Favor de notificar al administrador del sistema.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    result = false;
                }

            }
            else
            {
                result = true;
            }
            return result;
        }
        private bool ValidaKey()
        {
            bool result = false;
            string pathCerPrueba = controlador.ArchivoKEY(rfc);
            string RutaKey, Pass = null;
            if (pathCerPrueba.Equals("") || pathCerPrueba.Equals(null) || !File.Exists(pathCerPrueba))
            {
                if (controlador.GetAdminUsuario(usuarioSistema, bd, false).Equals(true))
                {
                    DialogResult resultado = XtraMessageBox.Show("Archivo .KEY no encontrado, ¿Desea Agregarlo?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (resultado.Equals(DialogResult.Yes))
                    {
                        OpenFileDialogKey.Title = "Selecciona Archivo KEY";
                        OpenFileDialogKey.Filter = "Archivos KEY (*.key;*)|*.key";
                        if (OpenFileDialogKey.ShowDialog() == DialogResult.OK)
                        {
                            RutaKey = OpenFileDialogKey.FileName;
                            //XtraMessageBox.Show(RutaKey);
                            try
                            {
                                // initialize a new XtraInputBoxArgs instance
                                XtraInputBoxArgs args = new XtraInputBoxArgs();
                                // set required Input Box options
                                args.Caption = "Archivo .key";
                                args.Prompt = "Contraseña";
                                args.DefaultButtonIndex = 0;
                                args.Showing += Args_Showing;
                                // initialize a DateEdit editor with custom settings
                                TextEdit editor = new TextEdit();
                                CheckEdit check = new CheckEdit();
                                args.Editor = check;
                                args.Editor = editor;
                                editor.Properties.UseSystemPasswordChar = true;
                                // display an Input Box with the custom editor
                                var result2 = XtraInputBox.Show(args).ToString();
                                // set a dialog icon
                                if (result2 != null || result2 != "")
                                {
                                    XtraMessageBox.Show(result2);
                                    Pass = result2;
                                }
                            }
                            catch (Exception xtra)
                            {
                                result = false;
                                //XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                XtraMessageBox.Show("Error al generar Xml de nómina, archivo .key no encontrado.", "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return false;
                                //XtraMessageBox.Show(xtra.Message + "\nValidaKey()");
                            }
                            if (controlador.AgregaArchivoKey(rfc, RutaKey, Pass).Equals(true))
                            {
                                result = true;
                            }
                            else
                            {
                                result = false;
                            }
                        }
                        else
                        {
                            result = false;
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        result = false;
                    }
                }
                else
                {
                    XtraMessageBox.Show("Error al generar xml de nómina, archivo .KEY no encontrado. Favor de notificar al administrador del sistema.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    result = false;
                }
            }
            else
            {
                result = true;
            }
            return result;
        }


        private void ValidarXML()
        {
            try
            {

                if (ValidaCer().Equals(false))
                {
                    return;
                }
                if (ValidaKey().Equals(false))
                {
                    return;
                }
                splashScreenManager1.ShowWaitForm();
                splashScreenManager1.SetWaitFormCaption("Validando nomina");

                string fecPago = Convert.ToDateTime(FecPagoUni.Text).ToString("dd-MM-yyyy");
                pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");

                if (!Directory.Exists(pathArchivoXML))
                {
                    Directory.CreateDirectory(pathArchivoXML);
                }

                nombreArchivo = fecPago + "_" + empleado.RFC + "_" + empleado.Nombre;

                pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo + ".xml");
                // produccion = false ---> para pruebas
                bool produccion = false;
                string prod_endpoint = "TimbradoEndpoint_PRODUCCION";
                string test_endpoint = "TimbradoEndpoint_TESTING";

                string pathPrincipalExe = AppDomain.CurrentDomain.BaseDirectory + "/";
                //string pathCer = @"C:\Users\aespejel\Desktop\FIEL_EEMA930408QU5_20200120114615\eema930408qu5.cer";
                //string pathKey = @"C:\Users\aespejel\Desktop\FIEL_EEMA930408QU5_20200120114615\Claveprivada_FIEL_EEMA930408QU5_20200120_114615.key";
                //string pass = "Jesp1!";

                //string pathCer = @"C:\DocAsimilados\00001000000413522787.cer";
                //string pathKey = @"C:\DocAsimilados\CSD_QUERETARO_PTP131002FA0_20190214_113034.key";
                //string pass = "ptpinari";
                string pathCer = controlador.ArchivoCER(rfc);
                string pathKey = controlador.ArchivoKEY(rfc);
                string pass = controlador.PassKey(rfc);

                string Inicio, Final, Serie, NumCer;

                SelloDigital.leerCER(pathCer, out Inicio, out Final, out Serie, out NumCer);

                folio = controlador.GetFolio();

                if (folio.Equals(null) || folio.Equals(""))
                {
                    splashScreenManager1.CloseWaitForm();
                    XtraMessageBox.Show("¡Folio no encontrado!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else
                {
                    if (folio.Equals("0"))
                    {
                        folio = "0001";
                    }
                    Bitacora.Folio = folio;
                }
                #region GenNomina
                Comprobante comprobante = new Comprobante();
                comprobante.Folio = folio;
                comprobante.Fecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
                //comprobante.Sello = "faltante";
                comprobante.FormaPago = "99";
                comprobante.NoCertificado = NumCer;
                comprobante.SubTotal = Calculo.IngresosBrutos;
                comprobante.Descuento = Calculo.ISR;
                comprobante.Total = Calculo.IngresosNetos;
                comprobante.Moneda = "MXN";
                comprobante.TipoDeComprobante = "N";
                comprobante.MetodoPago = "PUE";
                comprobante.LugarExpedicion = parametros.CODIGO_POSTAL;
                comprobante.TipoCambio = 1;

                ComprobanteEmisor comprobanteEmisor = new ComprobanteEmisor();
                comprobanteEmisor.Rfc = rfc;
                comprobanteEmisor.Nombre = empresa;
                comprobanteEmisor.RegimenFiscal = "601";

                ComprobanteReceptor comprobanteReceptor = new ComprobanteReceptor();
                comprobanteReceptor.Nombre = empleado.Nombre;
                comprobanteReceptor.Rfc = empleado.RFC;
                comprobanteReceptor.UsoCFDI = "P01";


                comprobante.Emisor = comprobanteEmisor;
                comprobante.Receptor = comprobanteReceptor;

                List<ComprobanteConcepto> listaConceptos = new List<ComprobanteConcepto>();
                ComprobanteConcepto comprobanteConcepto = new ComprobanteConcepto();
                comprobanteConcepto.Importe = Calculo.IngresosBrutos;
                comprobanteConcepto.ValorUnitario = Calculo.IngresosBrutos;
                comprobanteConcepto.Descuento = Calculo.ISR;
                comprobanteConcepto.ClaveProdServ = "84111505";
                comprobanteConcepto.Cantidad = 1;
                comprobanteConcepto.ClaveUnidad = "ACT";
                comprobanteConcepto.Descripcion = "Pago de nómina";

                listaConceptos.Add(comprobanteConcepto);

                comprobante.Conceptos = listaConceptos.ToArray();
                NominaReceptor nominaReceptor = new NominaReceptor();

                Nomina nomina12 = new Nomina();
                List<Nomina> nominas = new List<Nomina>();
                nomina12.Version = "1.2";
                nomina12.FechaPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
                nomina12.FechaInicialPago = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                nomina12.FechaFinalPago = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                nomina12.TotalPercepcionesSpecified = true;
                nomina12.TotalDeduccionesSpecified = true;
                nomina12.TotalPercepciones = Calculo.IngresosBrutos;
                nomina12.TotalDeducciones = Calculo.ISR;


                if (periodicidad.Equals("Semanal"))
                {
                    nomina12.NumDiasPagados = 7;
                    nominaReceptor.PeriodicidadPago = "02";
                }

                if (periodicidad.Equals("Quincenal"))
                {
                    nomina12.NumDiasPagados = 14;
                    nominaReceptor.PeriodicidadPago = "04";
                }

                if (periodicidad.Equals("Mensual"))
                {
                    nomina12.NumDiasPagados = 30;
                    nominaReceptor.PeriodicidadPago = "05";
                }

                nominaReceptor.Curp = empleado.CURP;
                nominaReceptor.TipoContrato = empleado.TipoContrato;
                nominaReceptor.Sindicalizado = empleado.Sindicalizado;
                nominaReceptor.NumEmpleado = empleado.NumEmpl;
                nominaReceptor.Departamento = empleado.Departamento;
                nominaReceptor.Puesto = empleado.Puesto;
                string entFed = controlador.GetEntFed(bd, parametros.CODIGO_POSTAL);
                nominaReceptor.TipoRegimen = empleado.TipoRegimen;
                nominaReceptor.ClaveEntFed = entFed;
                nominaReceptor.SalarioBaseCotApor = 0;

                NominaDeducciones nominaDeducciones = new NominaDeducciones();
                NominaDeduccionesDeduccion nominaDeduccionesDeduccion = new NominaDeduccionesDeduccion();
                NominaPercepciones nominaPercepciones = new NominaPercepciones();
                NominaPercepcionesPercepcion nominaPercepcionesPercepcion = new NominaPercepcionesPercepcion();

                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepciones.TotalExento = 0;
                nominaPercepciones.TotalGravado = Calculo.IngresosBrutos;
                nominaPercepciones.TotalSueldosSpecified = true;
                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.TipoPercepcion = "046";
                nominaPercepcionesPercepcion.Clave = "046";
                nominaPercepcionesPercepcion.Concepto = "INGRESO A ASIMILADOS A SALARIO";
                nominaPercepcionesPercepcion.ImporteGravado = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.ImporteExento = 0;

                nominaDeducciones.TotalImpuestosRetenidosSpecified = true;
                nominaDeducciones.TotalImpuestosRetenidos = Calculo.ISR;

                nominaDeduccionesDeduccion.TipoDeduccion = "002";
                nominaDeduccionesDeduccion.Clave = "211";
                nominaDeduccionesDeduccion.Concepto = "ISR";
                nominaDeduccionesDeduccion.Importe = Calculo.ISR;


                nomina12.Receptor = nominaReceptor;
                nomina12.Deducciones = nominaDeducciones;
                nomina12.Percepciones = nominaPercepciones;
                nomina12.Percepciones.Percepcion = nominaPercepcionesPercepcion.ToArray();
                nominaDeducciones.Deduccion = nominaDeduccionesDeduccion.ToArray();


                nominas.Add(nomina12);
                //comprobante.Nomina12 = nomina12;
                comprobante.Complemento = new ComprobanteComplemento[1];
                comprobante.Complemento[0] = new ComprobanteComplemento();

                XmlDocument nom12 = new XmlDocument();
                XmlSerializerNamespaces xmlNameSpaceNomi = new XmlSerializerNamespaces();
                xmlNameSpaceNomi.Add("nomina12", "http://www.sat.gob.mx/nomina12");
                using (XmlWriter writer = nom12.CreateNavigator().AppendChild())
                {
                    new XmlSerializer(nomina12.GetType()).Serialize(writer, nomina12, xmlNameSpaceNomi);
                }
                comprobante.Complemento[0].Any = new XmlElement[1];
                comprobante.Complemento[0].Any[0] = nom12.DocumentElement;

                GenXML(comprobante);

                string cadenaOrig = "";
                //string ruta = @"C:\DocAsimilados\xslt\cadenaoriginal_3_3.xslt";
                string pathCadenaOriginalxslt = pathPrincipalExe + @"xslt\cadenaoriginal_3_3.xslt";
                System.Xml.Xsl.XslCompiledTransform transformador = new System.Xml.Xsl.XslCompiledTransform(true);
                transformador.Load(pathCadenaOriginalxslt);

                using (StringWriter sw = new StringWriter())
                using (XmlWriter xwo = XmlWriter.Create(sw, transformador.OutputSettings))
                {

                    //transformador.Transform(pathXml, xwo);
                    transformador.Transform(pathArchivoXML, xwo);
                    cadenaOrig = sw.ToString();
                }

                SelloDigital selloDigital = new SelloDigital();
                comprobante.Certificado = selloDigital.Certificado(pathCer);
                comprobante.Sello = selloDigital.Sellar(cadenaOrig, pathKey, pass);
                //Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
                GenXML(comprobante);
                #endregion
                splashScreenManager1.SetWaitFormCaption( "Validando Timbrando..");

                try
                {
                    //Conexion al servicio de timprado produccion = true / portCllient =  prod_endpoint
                    ServicioTimbradoProduccion.TimbradoPortTypeClient portTypeClient = null;
                    portTypeClient = (produccion)
                        ? new ServicioTimbradoProduccion.TimbradoPortTypeClient(prod_endpoint)
                        : portTypeClient = new ServicioTimbradoProduccion.TimbradoPortTypeClient(test_endpoint);

                    byte[] bxml = Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(pathArchivoXML));

                    /* servicio de prueba 
                     * ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("testing@solucionfactible.com", "timbrado.SF.16672", bxml, false);
                     */
                    ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("testing@solucionfactible.com", "timbrado.SF.16672", bxml, false);
                    //ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("facturacion@inteligencialaboral.com", "DFddf.gr6u45Tef", bxml, false);
                    //splashScreenManager1.SetWaitFormCaption(respuesta.status.ToString());
                    //splashScreenManager1.SetWaitFormCaption(respuesta.mensaje);
                    ServicioTimbradoProduccion.CFDIResultadoCertificacion[] cFDIResultados = respuesta.resultados;
                    if (respuesta.status.Equals(200))
                    {
                        //XtraMessageBox.Show(cFDIResultados[0].uuid);
                        //XtraMessageBox.Show(cFDIResultados[0].certificadoSAT);
                        //XtraMessageBox.Show(cFDIResultados[0].mensaje);
                        if (cFDIResultados[0].status.Equals(200))
                        {
                            System.IO.File.Delete(pathArchivoXML);
                            if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                            {
                                splashScreenManager1.CloseWaitForm();
                            }
                            XtraMessageBox.Show("¡Informacíón Validada con Éxito!",
                                "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            System.IO.File.Delete(pathArchivoXML);
                            if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                            {
                                splashScreenManager1.CloseWaitForm();
                            }
                            ////XtraMessageBox.Show(cFDIResultados[0].mensaje + "\nEmpleado #: " + empleado.NumEmpl + " (" + empleado.Nombre + ")"
                            ////, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            XtraMessageBox.Show("¡Error al validar documento!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            controlador.LogValidaTimbradoUnitario(empleado, cFDIResultados[0].mensaje);
                            return;
                        }

                    }
                    else
                    {
                        if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                        {
                            splashScreenManager1.CloseWaitForm();
                        }
                        XtraMessageBox.Show(cFDIResultados[0].mensaje);
                        controlador.LogValidaTimbradoUnitario(empleado, respuesta.mensaje);
                        return;
                    }
                    //XtraMessageBox.Show(cFDIResultados.ToString());
                    //System.IO.File.WriteAllText(pathXml,);
                }
                catch (Exception timbrado)
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }

                    XtraMessageBox.Show(timbrado.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }
            catch (Exception genxml)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show(genxml.Message + "Error Componente NominaAsimilados: GenXML()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }


        [Obsolete]
        private void GeneraXML()
        {
            try
            {

                if (ValidaCer().Equals(false))
                {
                    return;
                }
                if (ValidaKey().Equals(false))
                {
                    return;
                }
                splashScreenManager1.ShowWaitForm();
                splashScreenManager1.SetWaitFormCaption("Generando nomina");

                Folio.Empleado = empleado.Nombre;
                Folio.RFC = empleado.RFC;
                Folio.Empresa = empresa;
                Folio.FecIni = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                Folio.FecFin = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                Folio.FecPago = Convert.ToDateTime(FecPagoUni.Text);
                Folio.Importe = Calculo.IngresosBrutos;


                Bitacora.IPMovimiento = ip;
                Bitacora.Empresa = empresa;
                Bitacora.FecPago = Convert.ToDateTime(FecPagoUni.Text);
                //Folio.FecPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
                Bitacora.FecIni = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                Bitacora.FecFin = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                Bitacora.FecMovimiento = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"));
                Bitacora.Movimiento = "Timbrado";

                string fecPago = Convert.ToDateTime(FecPagoUni.Text).ToString("dd-MM-yyyy");
                pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");

                if (!Directory.Exists(pathArchivoXML))
                {
                    Directory.CreateDirectory(pathArchivoXML);
                }

                nombreArchivo = fecPago + "_" + empleado.RFC + "_" + empleado.Nombre;

                pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo + ".xml");
                // produccion = false ---> para pruebas
                bool produccion = true;
                string prod_endpoint = "TimbradoEndpoint_PRODUCCION";
                string test_endpoint = "TimbradoEndpoint_TESTING";

                string pathPrincipalExe = AppDomain.CurrentDomain.BaseDirectory + "/";
                //string pathCer = @"C:\DocAsimilados\CSD01_AAA010101AAA.cer";
                //string pathKey = @"C:\DocAsimilados\CSD01_AAA010101AAA.key";
                //string pass = "12345678a";

                //string pathCer = @"C:\DocAsimilados\00001000000413522787.cer";
                //string pathKey = @"C:\DocAsimilados\CSD_QUERETARO_PTP131002FA0_20190214_113034.key";
                //string pass = "ptpinari";
                string pathCer = controlador.ArchivoCER(rfc);
                string pathKey = controlador.ArchivoKEY(rfc);
                string pass = controlador.PassKey(rfc); 

                string Inicio, Final, Serie, NumCer;

                SelloDigital.leerCER(pathCer, out Inicio, out Final, out Serie, out NumCer);

                folio = controlador.GetFolio();

                if (folio.Equals(null) || folio.Equals(""))
                {
                    splashScreenManager1.CloseWaitForm();
                    XtraMessageBox.Show("¡Folio no encontrado!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                else
                {
                    if (folio.Equals("0"))
                    {
                        folio = "0001";
                    }
                    Bitacora.Folio = folio;
                }
                #region GenNomina
                Comprobante comprobante = new Comprobante();
                comprobante.Folio = folio;
                comprobante.Fecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
                //comprobante.Sello = "faltante";
                comprobante.FormaPago = "99";
                comprobante.NoCertificado = NumCer;
                comprobante.SubTotal = Calculo.IngresosBrutos;
                comprobante.Descuento = Calculo.ISR;
                comprobante.Total = Calculo.IngresosNetos;
                comprobante.Moneda = "MXN";
                comprobante.TipoDeComprobante = "N";
                comprobante.MetodoPago = "PUE";
                comprobante.LugarExpedicion = parametros.CODIGO_POSTAL;
                comprobante.TipoCambio = 1;

                ComprobanteEmisor comprobanteEmisor = new ComprobanteEmisor();
                comprobanteEmisor.Rfc = rfc;
                comprobanteEmisor.Nombre = empresa;
                comprobanteEmisor.RegimenFiscal = "601";

                ComprobanteReceptor comprobanteReceptor = new ComprobanteReceptor();
                comprobanteReceptor.Nombre = empleado.Nombre;
                comprobanteReceptor.Rfc = empleado.RFC;
                comprobanteReceptor.UsoCFDI = "P01";

               
                comprobante.Emisor = comprobanteEmisor;
                comprobante.Receptor = comprobanteReceptor;

                List<ComprobanteConcepto> listaConceptos = new List<ComprobanteConcepto>();
                ComprobanteConcepto comprobanteConcepto = new ComprobanteConcepto();
                comprobanteConcepto.Importe = Calculo.IngresosBrutos;
                comprobanteConcepto.ValorUnitario = Calculo.IngresosBrutos;
                comprobanteConcepto.Descuento = Calculo.ISR;
                comprobanteConcepto.ClaveProdServ = "84111505";
                comprobanteConcepto.Cantidad = 1;
                comprobanteConcepto.ClaveUnidad = "ACT";
                comprobanteConcepto.Descripcion = "Pago de nómina";

                listaConceptos.Add(comprobanteConcepto);

                comprobante.Conceptos = listaConceptos.ToArray();
                NominaReceptor nominaReceptor = new NominaReceptor();

                Nomina nomina12 = new Nomina();
                List<Nomina> nominas = new List<Nomina>();
                nomina12.Version = "1.2";
                nomina12.FechaPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
                nomina12.FechaInicialPago = Convert.ToDateTime(FecIniPeriUni.EditValue.ToString());
                nomina12.FechaFinalPago = Convert.ToDateTime(FecFinPeriUni.EditValue.ToString());
                nomina12.TotalPercepcionesSpecified = true;
                nomina12.TotalDeduccionesSpecified = true;
                nomina12.TotalPercepciones = Calculo.IngresosBrutos;
                nomina12.TotalDeducciones = Calculo.ISR;


                if (periodicidad.Equals("Semanal"))
                {
                    nomina12.NumDiasPagados = 7;
                    nominaReceptor.PeriodicidadPago = "02";
                }

                if (periodicidad.Equals("Quincenal"))
                {
                    nomina12.NumDiasPagados = 14;
                    nominaReceptor.PeriodicidadPago = "04";
                }

                if (periodicidad.Equals("Mensual"))
                {
                    nomina12.NumDiasPagados = 30;
                    nominaReceptor.PeriodicidadPago = "05";
                }

                nominaReceptor.Curp = empleado.CURP;
                nominaReceptor.TipoContrato = empleado.TipoContrato;
                nominaReceptor.Sindicalizado = empleado.Sindicalizado;
                nominaReceptor.NumEmpleado = empleado.NumEmpl;
                nominaReceptor.Departamento = empleado.Departamento;
                nominaReceptor.Puesto = empleado.Puesto;
                string entFed = controlador.GetEntFed(bd, parametros.CODIGO_POSTAL);
                nominaReceptor.TipoRegimen = empleado.TipoRegimen;
                nominaReceptor.ClaveEntFed = entFed;
                nominaReceptor.SalarioBaseCotApor = 0;

                NominaDeducciones nominaDeducciones = new NominaDeducciones();
                NominaDeduccionesDeduccion nominaDeduccionesDeduccion  = new NominaDeduccionesDeduccion();
                NominaPercepciones nominaPercepciones = new NominaPercepciones();
                NominaPercepcionesPercepcion nominaPercepcionesPercepcion  = new NominaPercepcionesPercepcion();

                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepciones.TotalExento = 0;
                nominaPercepciones.TotalGravado = Calculo.IngresosBrutos;
                nominaPercepciones.TotalSueldosSpecified = true;
                nominaPercepciones.TotalSueldos = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.TipoPercepcion = "046";
                nominaPercepcionesPercepcion.Clave = "046";
                nominaPercepcionesPercepcion.Concepto = "INGRESO A ASIMILADOS A SALARIO";
                nominaPercepcionesPercepcion.ImporteGravado = Calculo.IngresosBrutos;
                nominaPercepcionesPercepcion.ImporteExento = 0;

                nominaDeducciones.TotalImpuestosRetenidosSpecified = true;
                nominaDeducciones.TotalImpuestosRetenidos = Calculo.ISR;

                nominaDeduccionesDeduccion.TipoDeduccion = "002";
                nominaDeduccionesDeduccion.Clave = "211";
                nominaDeduccionesDeduccion.Concepto = "ISR";
                nominaDeduccionesDeduccion.Importe = Calculo.ISR;


                nomina12.Receptor = nominaReceptor;
                nomina12.Deducciones = nominaDeducciones;
                nomina12.Percepciones = nominaPercepciones;
                nomina12.Percepciones.Percepcion = nominaPercepcionesPercepcion.ToArray();
                nominaDeducciones.Deduccion = nominaDeduccionesDeduccion.ToArray();


                nominas.Add(nomina12);
                //comprobante.Nomina12 = nomina12;
                comprobante.Complemento = new ComprobanteComplemento[1];
                comprobante.Complemento[0] = new ComprobanteComplemento();

                splashScreenManager1.SetWaitFormCaption("Generando XML");

                XmlDocument nom12 = new XmlDocument();
                XmlSerializerNamespaces xmlNameSpaceNomi = new XmlSerializerNamespaces();
                xmlNameSpaceNomi.Add("nomina12", "http://www.sat.gob.mx/nomina12");
                using (XmlWriter writer = nom12.CreateNavigator().AppendChild())
                {
                    new XmlSerializer(nomina12.GetType()).Serialize(writer, nomina12, xmlNameSpaceNomi);
                }
                comprobante.Complemento[0].Any = new XmlElement[1];
                comprobante.Complemento[0].Any[0] = nom12.DocumentElement;

                GenXML(comprobante);

                string cadenaOrig = "";
                //string ruta = @"C:\DocAsimilados\xslt\cadenaoriginal_3_3.xslt";
                string pathCadenaOriginalxslt = pathPrincipalExe + @"xslt\cadenaoriginal_3_3.xslt";
                System.Xml.Xsl.XslCompiledTransform transformador = new System.Xml.Xsl.XslCompiledTransform(true);
                transformador.Load(pathCadenaOriginalxslt);       

                using (StringWriter sw = new StringWriter())
                using (XmlWriter xwo = XmlWriter.Create(sw, transformador.OutputSettings))
                {

                    //transformador.Transform(pathXml, xwo);
                    transformador.Transform(pathArchivoXML, xwo);                 
                    cadenaOrig = sw.ToString(); 
                }

                SelloDigital selloDigital = new SelloDigital();
                comprobante.Certificado = selloDigital.Certificado(pathCer);
                comprobante.Sello = selloDigital.Sellar(cadenaOrig, pathKey, pass);
                //Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
                GenXML(comprobante);
                #endregion
                splashScreenManager1.SetWaitFormCaption("Timbrando Documento..");

                try
                {
                    //Conexion al servicio de timprado produccion = true / portCllient =  prod_endpoint
                    ServicioTimbradoProduccion.TimbradoPortTypeClient portTypeClient = null;
                    portTypeClient = (produccion)
                        ? new ServicioTimbradoProduccion.TimbradoPortTypeClient(prod_endpoint)
                        : portTypeClient = new ServicioTimbradoProduccion.TimbradoPortTypeClient(prod_endpoint);

                    byte[] bxml = Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(pathArchivoXML));

                    /* servicio de prueba 
                     * ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("testing@solucionfactible.com", "timbrado.SF.16672", bxml, false);
                     */

                    ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("facturacion@inteligencialaboral.com", "DFddf.gr6u45Tef", bxml, false);
                    //splashScreenManager1.SetWaitFormCaption(respuesta.status.ToString());
                    //splashScreenManager1.SetWaitFormCaption(respuesta.mensaje);
                    ServicioTimbradoProduccion.CFDIResultadoCertificacion[] cFDIResultados = respuesta.resultados;
                    if (respuesta.status.Equals(200))
                    {
                        //XtraMessageBox.Show(cFDIResultados[0].uuid);
                        //XtraMessageBox.Show(cFDIResultados[0].certificadoSAT);
                        //XtraMessageBox.Show(cFDIResultados[0].mensaje);
                        if (cFDIResultados[0].status.Equals(200))
                        {
                            System.IO.File.Delete(pathArchivoXML);
                            pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");
                            nombreArchivo = fecPago + "_" + empleado.RFC + "_" + empleado.Nombre;
                            pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo);
                            pathArchivoXMLF = Path.Combine(pathArchivoXML + "_" + cFDIResultados[0].uuid);
                            pathArchivoXML = Path.Combine(pathArchivoXML + "_" + cFDIResultados[0].uuid + ".xml");
                            byte[] info = cFDIResultados[0].cfdiTimbrado;
                            FileStream fs = new FileStream(path: pathArchivoXML, mode: FileMode.Create);
                            fs.Write(info, 0, info.Length);
                            fs.Close();

                            Folio.UUID = cFDIResultados[0].uuid;
                            Folio.RutaXML = pathArchivoXML;
                            Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
                            Folio.StatusSAT = "Vigente";
                            Bitacora.UUID = cFDIResultados[0].uuid;
                            Bitacora.StatusSAT = "Vigente";
                            Bitacora.Usuario = Properties.Settings.Default.Usuario.ToString();

                            controlador.InsertaFolio(Folio, splashScreenManager1);
                            controlador.InsertaBitacora(Bitacora, splashScreenManager1);
                        }
                        else
                        {
                            System.IO.File.Delete(pathArchivoXML);
                            splashScreenManager1.CloseWaitForm();
                            ////XtraMessageBox.Show(cFDIResultados[0].mensaje + "\nEmpleado #: " + empleado.NumEmpl + " (" + empleado.Nombre + ")"
                            ////, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            XtraMessageBox.Show("¡Error al timbrar documento!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            controlador.LogTimbradoUnitario(empleado, cFDIResultados[0].mensaje);
                            return;
                        }

                    }
                    else
                    {
                        if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                        {
                            splashScreenManager1.CloseWaitForm();
                        }
                        XtraMessageBox.Show(cFDIResultados[0].mensaje);
                        return;
                    }
                    //XtraMessageBox.Show(cFDIResultados.ToString());
                    //System.IO.File.WriteAllText(pathXml,);
                } catch(Exception timbrado)
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }

                    XtraMessageBox.Show(timbrado.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                splashScreenManager1.SetWaitFormCaption("Generando PDF..");

               if(controlador.LeerXMLModAsim(pathArchivoXML, pathArchivoXMLF, splashScreenManager1).Equals(!true))
                {
                    XtraMessageBox.Show("Hubo un error al generar archivo pdf", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            catch (Exception genxml)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show(genxml.Message + "Error Componente NominaAsimilados: GenXML()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        [Obsolete]
        private void GenXmlMasiv(E.Empleado nomiEmpl)
        {
            //try
            //{
                
            //    if (ValidaCer().Equals(false))
            //    {
            //        return;
            //    }
            //    if (ValidaKey().Equals(false))
            //    {
            //        return;
            //    }
            //    splashScreenManager1.ShowWaitForm();
            //    splashScreenManager1.SetWaitFormCaption("Generando nomina");

            //    periodicidad = nomiEmpl.Periodicidad;

            //    Folio.Empleado = nomiEmpl.Nombre;
            //    Folio.Empresa = empresa;
            //    Folio.FecIni = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
            //    Folio.FecFin = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
            //    Folio.FecPago = Convert.ToDateTime(FecPagoMasiv.Text);
            //    Folio.Importe = nomiEmpl.IngresosBrutos;

            //    Bitacora.IPMovimiento = ip;
            //    Bitacora.Empresa = empresa;
            //    Bitacora.FecPago = Convert.ToDateTime(FecPagoMasiv.Text);
            //    //Folio.FecPago = Convert.ToDateTime(FecPagoUni.EditValue.ToString());
            //    Bitacora.FecIni = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
            //    Bitacora.FecFin = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
            //    Bitacora.FecMovimiento = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"));
            //    Bitacora.Movimiento = "Timbrado";

            //    string fecPago = Convert.ToDateTime(FecPagoMasiv.Text).ToString("dd-MM-yyyy");
            //    pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");

            //    if (!Directory.Exists(pathArchivoXML))
            //    {
            //        Directory.CreateDirectory(pathArchivoXML);
            //    }

            //    nombreArchivo = fecPago + "_" + nomiEmpl.RFC + "_" + nomiEmpl.Nombre;

            //    pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo + ".xml");

            //    bool produccion = false;
            //    string prod_endpoint = "TimbradoEndpoint_PRODUCCION";
            //    string test_endpoint = "TimbradoEndpoint_TESTING";

            //    string pathPrincipalExe = AppDomain.CurrentDomain.BaseDirectory + "/";
            //    //string pathCer = @"C:\DocAsimilados\CSD01_AAA010101AAA.cer";
            //    //string pathKey = @"C:\DocAsimilados\CSD01_AAA010101AAA.key";
            //    //string pass = "12345678a";

            //    //string pathCer = @"C:\DocAsimilados\00001000000413522787.cer";
            //    //string pathKey = @"C:\DocAsimilados\CSD_QUERETARO_PTP131002FA0_20190214_113034.key";
            //    //string pass = "ptpinari";
            //    string pathCer = controlador.ArchivoCER(rfc);
            //    string pathKey = controlador.ArchivoKEY(rfc);
            //    string pass = controlador.PassKey(rfc);

            //    string Inicio, Final, Serie, NumCer;

            //    SelloDigital.leerCER(pathCer, out Inicio, out Final, out Serie, out NumCer);

            //    folio = controlador.GetFolio();

            //    if (folio.Equals(null) || folio.Equals(""))
            //    {
            //        splashScreenManager1.CloseWaitForm();
            //        XtraMessageBox.Show("¡Folio no encontrado!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        return;
            //    }
            //    else
            //    {
            //        if (folio.Equals("0"))
            //        {
            //            folio = "0001";
            //        }
            //        Bitacora.Folio = folio;
            //    }
            //    Comprobante comprobante = new Comprobante();
            //    comprobante.Folio = folio;
            //    comprobante.Fecha = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
            //    //comprobante.Sello = "faltante";
            //    comprobante.FormaPago = "99";
            //    comprobante.NoCertificado = NumCer;
            //    comprobante.SubTotal = nomiEmpl.IngresosBrutos;
            //    comprobante.Descuento = nomiEmpl.ISR;
            //    comprobante.Total = nomiEmpl.IngresosBrutos; //ingresos netos
            //    comprobante.Moneda = "MXN";
            //    comprobante.TipoDeComprobante = "N";
            //    comprobante.MetodoPago = "PUE";
            //    comprobante.LugarExpedicion = parametros.CODIGO_POSTAL;
            //    comprobante.TipoCambio = 1;

            //    ComprobanteEmisor comprobanteEmisor = new ComprobanteEmisor();
            //    comprobanteEmisor.Rfc = rfc;
            //    comprobanteEmisor.Nombre = empresa;
            //    comprobanteEmisor.RegimenFiscal = "601";

            //    ComprobanteReceptor comprobanteReceptor = new ComprobanteReceptor();
            //    comprobanteReceptor.Nombre = nomiEmpl.Nombre;
            //    comprobanteReceptor.Rfc = nomiEmpl.RFC;
            //    comprobanteReceptor.UsoCFDI = "P01";


            //    comprobante.Emisor = comprobanteEmisor;
            //    comprobante.Receptor = comprobanteReceptor;

            //    List<ComprobanteConcepto> listaConceptos = new List<ComprobanteConcepto>();
            //    ComprobanteConcepto comprobanteConcepto = new ComprobanteConcepto();
            //    comprobanteConcepto.Importe = nomiEmpl.IngresosBrutos;
            //    comprobanteConcepto.ValorUnitario = nomiEmpl.IngresosBrutos;
            //    comprobanteConcepto.Descuento = nomiEmpl.ISR;
            //    comprobanteConcepto.ClaveProdServ = "84111505";
            //    comprobanteConcepto.Cantidad = 1;
            //    comprobanteConcepto.ClaveUnidad = "ACT";
            //    comprobanteConcepto.Descripcion = "Pago de nómina";

            //    listaConceptos.Add(comprobanteConcepto);

            //    comprobante.Conceptos = listaConceptos.ToArray();
            //    NominaReceptor nominaReceptor = new NominaReceptor();

            //    Nomina nomina12 = new Nomina();
            //    List<Nomina> nominas = new List<Nomina>();
            //    nomina12.Version = "1.2";
            //    nomina12.FechaPago = Convert.ToDateTime(FecPagoMasiv.EditValue.ToString());
            //    nomina12.FechaInicialPago = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
            //    nomina12.FechaFinalPago = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
            //    nomina12.TotalPercepcionesSpecified = true;
            //    nomina12.TotalDeduccionesSpecified = true;
            //    nomina12.TotalPercepciones = nomiEmpl.IngresosBrutos;
            //    nomina12.TotalDeducciones = nomiEmpl.ISR;


            //    if (periodicidad.Equals("Semanal"))
            //    {
            //        nomina12.NumDiasPagados = 7;
            //        nominaReceptor.PeriodicidadPago = "02";
            //    }

            //    if (periodicidad.Equals("Quincenal"))
            //    {
            //        nomina12.NumDiasPagados = 14;
            //        nominaReceptor.PeriodicidadPago = "04";
            //    }

            //    if (periodicidad.Equals("Mensual"))
            //    {
            //        nomina12.NumDiasPagados = 30;
            //        nominaReceptor.PeriodicidadPago = "05";
            //    }

            //    nominaReceptor.Curp = nomiEmpl.CURP;
            //    nominaReceptor.TipoContrato = nomiEmpl.TipoContrato;
            //    nominaReceptor.Sindicalizado = nomiEmpl.Sindicalizado;
            //    nominaReceptor.NumEmpleado = nomiEmpl.NumEmpl;
            //    nominaReceptor.Departamento = nomiEmpl.Departamento;
            //    nominaReceptor.Puesto = nomiEmpl.Puesto;
            //    string entFed = controlador.GetEntFed(bd, parametros.CODIGO_POSTAL);
            //    nominaReceptor.TipoRegimen = nomiEmpl.TipoRegimen;
            //    nominaReceptor.ClaveEntFed = entFed;
            //    nominaReceptor.SalarioBaseCotApor = 0;

            //    NominaDeducciones nominaDeducciones = new NominaDeducciones();
            //    NominaDeduccionesDeduccion nominaDeduccionesDeduccion = new NominaDeduccionesDeduccion();
            //    NominaPercepciones nominaPercepciones = new NominaPercepciones();
            //    NominaPercepcionesPercepcion nominaPercepcionesPercepcion = new NominaPercepcionesPercepcion();

            //    nominaPercepciones.TotalSueldos = nomiEmpl.IngresosBrutos;
            //    nominaPercepciones.TotalExento = 0;
            //    nominaPercepciones.TotalGravado = nomiEmpl.IngresosBrutos;
            //    nominaPercepciones.TotalSueldosSpecified = true;
            //    nominaPercepciones.TotalSueldos = nomiEmpl.IngresosBrutos;
            //    nominaPercepcionesPercepcion.TipoPercepcion = "046";
            //    nominaPercepcionesPercepcion.Clave = "046";
            //    nominaPercepcionesPercepcion.Concepto = "INGRESO A ASIMILADOS A SALARIO";
            //    nominaPercepcionesPercepcion.ImporteGravado = nomiEmpl.IngresosBrutos;
            //    nominaPercepcionesPercepcion.ImporteExento = 0;

            //    nominaDeducciones.TotalImpuestosRetenidosSpecified = true;
            //    nominaDeducciones.TotalImpuestosRetenidos = nomiEmpl.ISR;

            //    nominaDeduccionesDeduccion.TipoDeduccion = "002";
            //    nominaDeduccionesDeduccion.Clave = "211";
            //    nominaDeduccionesDeduccion.Concepto = "ISR";
            //    nominaDeduccionesDeduccion.Importe = nomiEmpl.ISR;


            //    nomina12.Receptor = nominaReceptor;
            //    nomina12.Deducciones = nominaDeducciones;
            //    nomina12.Percepciones = nominaPercepciones;
            //    nomina12.Percepciones.Percepcion = nominaPercepcionesPercepcion.ToArray();
            //    nominaDeducciones.Deduccion = nominaDeduccionesDeduccion.ToArray();


            //    nominas.Add(nomina12);
            //    //comprobante.Nomina12 = nomina12;
            //    comprobante.Complemento = new ComprobanteComplemento[1];
            //    comprobante.Complemento[0] = new ComprobanteComplemento();

            //    splashScreenManager1.SetWaitFormCaption("Generando XML");

            //    XmlDocument nom12 = new XmlDocument();
            //    XmlSerializerNamespaces xmlNameSpaceNomi = new XmlSerializerNamespaces();
            //    xmlNameSpaceNomi.Add("nomina12", "http://www.sat.gob.mx/nomina12");
            //    using (XmlWriter writer = nom12.CreateNavigator().AppendChild())
            //    {
            //        new XmlSerializer(nomina12.GetType()).Serialize(writer, nomina12, xmlNameSpaceNomi);
            //    }
            //    comprobante.Complemento[0].Any = new XmlElement[1];
            //    comprobante.Complemento[0].Any[0] = nom12.DocumentElement;

            //    GenXML(comprobante);

            //    string cadenaOrig = "";
            //    //string ruta = @"C:\DocAsimilados\xslt\cadenaoriginal_3_3.xslt";
            //    string pathCadenaOriginalxslt = pathPrincipalExe + @"xslt\cadenaoriginal_3_3.xslt";
            //    System.Xml.Xsl.XslCompiledTransform transformador = new System.Xml.Xsl.XslCompiledTransform(true);
            //    transformador.Load(pathCadenaOriginalxslt);

            //    using (StringWriter sw = new StringWriter())
            //    using (XmlWriter xwo = XmlWriter.Create(sw, transformador.OutputSettings))
            //    {

            //        //transformador.Transform(pathXml, xwo);
            //        transformador.Transform(pathArchivoXML, xwo);
            //        cadenaOrig = sw.ToString();
            //    }

            //    SelloDigital selloDigital = new SelloDigital();
            //    comprobante.Certificado = selloDigital.Certificado(pathCer);
            //    comprobante.Sello = selloDigital.Sellar(cadenaOrig, pathKey, pass);
            //    //Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
            //    GenXML(comprobante);

            //    splashScreenManager1.SetWaitFormCaption("Timbrando Documento..");

            //    try
            //    {
            //        ServicioTimbradoProduccion.TimbradoPortTypeClient portTypeClient = null;
            //        portTypeClient = (produccion)
            //            ? new ServicioTimbradoProduccion.TimbradoPortTypeClient(prod_endpoint)
            //            : portTypeClient = new ServicioTimbradoProduccion.TimbradoPortTypeClient(test_endpoint);

            //        byte[] bxml = Encoding.UTF8.GetBytes(System.IO.File.ReadAllText(pathArchivoXML));
            //        ServicioTimbradoProduccion.CFDICertificacion respuesta = portTypeClient.timbrar("testing@solucionfactible.com", "timbrado.SF.16672", bxml, false);
            //        //splashScreenManager1.SetWaitFormCaption(respuesta.status.ToString());
            //        //splashScreenManager1.SetWaitFormCaption(respuesta.mensaje);
            //        ServicioTimbradoProduccion.CFDIResultadoCertificacion[] cFDIResultados = respuesta.resultados;
            //        if (respuesta.status.Equals(200))
            //        {
            //            //XtraMessageBox.Show(cFDIResultados[0].uuid);
            //            //XtraMessageBox.Show(cFDIResultados[0].certificadoSAT);
            //            //XtraMessageBox.Show(cFDIResultados[0].mensaje);
            //            if (cFDIResultados[0].status.Equals(200))
            //            {
            //                System.IO.File.Delete(pathArchivoXML);
            //                pathArchivoXML = Path.Combine(pathXml + fecPago + @"\");
            //                nombreArchivo = fecPago + "_" + nomiEmpl.RFC + "_" + nomiEmpl.Nombre;
            //                pathArchivoXML = Path.Combine(pathArchivoXML + nombreArchivo);
            //                pathArchivoXML = Path.Combine(pathArchivoXML + "_" + cFDIResultados[0].uuid + ".xml");
            //                byte[] info = cFDIResultados[0].cfdiTimbrado;
            //                FileStream fs = new FileStream(path: pathArchivoXML, mode: FileMode.Create);
            //                fs.Write(info, 0, info.Length);
            //                fs.Close();

            //                Folio.UUID = cFDIResultados[0].uuid;
            //                Folio.RutaXML = pathArchivoXML;
            //                Folio.XML = System.IO.File.ReadAllText(pathArchivoXML);
            //                Folio.StatusSAT = "Vigente";
            //                Bitacora.UUID = cFDIResultados[0].uuid;
            //                Bitacora.StatusSAT = "Vigente";
            //                Bitacora.Usuario = Properties.Settings.Default.Usuario.ToString();

            //                controlador.InsertaFolio(Folio);
            //                controlador.InsertaBitacora(Bitacora);
            //            }
            //            else
            //            {
            //                System.IO.File.Delete(pathArchivoXML);
            //                splashScreenManager1.CloseWaitForm();
            //                XtraMessageBox.Show(cFDIResultados[0].mensaje + "\nEmpleado #: "+ nomiEmpl.NumEmpl + " ("+ nomiEmpl.Nombre + ")"
            //                    , "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //                return;
            //            }

            //        }
            //        else
            //        {
            //            splashScreenManager1.CloseWaitForm();
            //            XtraMessageBox.Show(cFDIResultados[0].mensaje);
            //            return;
            //        }
            //        //XtraMessageBox.Show(cFDIResultados.ToString());
            //        //System.IO.File.WriteAllText(pathXml,);
            //    }
            //    catch (Exception timbrado)
            //    {
            //        splashScreenManager1.CloseWaitForm();
            //        XtraMessageBox.Show(timbrado.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        return;
            //    }
            //    splashScreenManager1.SetWaitFormCaption("Generando PDF..");

            //    if (controlador.LeerXMLModAsim(pathArchivoXML, pathArchivoXML, splashScreenManager1).Equals(!true))
            //    {
            //        XtraMessageBox.Show("Hubo un error al generar archivo pdf", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        return;
            //    }

            //    //splashScreenManager1.CloseWaitForm();
            //    //XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

            //}
            //catch (Exception genxml)
            //{
            //    splashScreenManager1.CloseWaitForm();
            //    XtraMessageBox.Show(genxml.Message + "Error Componente NominaAsimilados: GenXML()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}

        }

        private void GenXML(Comprobante comprobante)
        {
            XmlSerializerNamespaces xmlNameSpace = new XmlSerializerNamespaces();
            xmlNameSpace.Add("cfdi", "http://www.sat.gob.mx/cfd/3");
            xmlNameSpace.Add("tfd", "http://www.sat.gob.mx/TimbreFiscalDigital");
            xmlNameSpace.Add("xsi", "http://www.w3.org/2001/XMLSchema-instance");
            xmlNameSpace.Add("nomina12", "http://www.sat.gob.mx/nomina12");


            XmlSerializer xmlSerializer = new XmlSerializer(typeof(Comprobante));

            string pathXmlWrit = @"";

            using (var sww = new Resources.StringWritterWithEncoding(Encoding.UTF8))
            {
                using (XmlWriter writter = XmlWriter.Create(sww))
                {
                    xmlSerializer.Serialize(writter, comprobante, xmlNameSpace);
                    pathXmlWrit = sww.ToString();
                }
            }
            System.IO.File.WriteAllText(pathArchivoXML, pathXmlWrit);
        }
        private void TxtPeriPago_EditValueChanged(object sender, EventArgs e)
        {
            periodicidad = TxtPeriPago.EditValue.ToString();
            LblIngBru.Text = "Ingresos Brutos " + periodicidad;
            LblIngNet.Text = "Ingresos Netos " + periodicidad;

            if (ChBruto.Checked.Equals(true))
            {
                GenerarCalculoIngresosBrutos();
            }
            if (ChNeto.Checked.Equals(true))
            {
                GenerarCalculoIngresosNetos();
            }
        }

        private void dateEdit2_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void ChPeriMasiv_CheckedChanged(object sender, EventArgs e)
        {
            //if (ChPeriMasiv.Checked.Equals(true))
            //{
            //    DialogResult result = XtraMessageBox.Show("¿Desea cambiar el tipo de periodicidad?" +
            //        "\nEl cambio afectara a todos los empelados seleccionados.", "Mensaje",
            //        MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //    if (result.Equals(DialogResult.Yes))
            //    {
            //        PeriPagoMasiv.ReadOnly = false;
            //    }
            //    else
            //    {
            //        ChPeriMasiv.Checked = false;
            //        PeriPagoMasiv.EditValue = null;
            //        PeriPagoMasiv.ReadOnly = true;
            //    }
            //}
            //else
            //{
            //    ChPeriMasiv.Checked = false;
            //    PeriPagoMasiv.EditValue = null;
            //    PeriPagoMasiv.ReadOnly = true;
            //}

        }

        private void BtnValidarInfo_Click(object sender, EventArgs e)
        {
            ValidarXML();
        }

        [Obsolete]
        private void BtnValidaInfoMasiv_Click(object sender, EventArgs e)
        {
            try
            {
                var empleadoMasivo = new List<E.Empleado>();
                E.Empleado[] emplMasiv = null;
                for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                {
                    if (gridViewNomiMasiv.IsRowSelected(i))
                    {
                        ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                        string ing = String.Format("{0:0.00}", ingresosMasiv);
                        ingresosMasiv = Convert.ToDecimal(ing);
                        tipoIngresos = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[4]).ToString();
                        //ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                        ISRMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[6]));
                        rfcEmplMasiv = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[2]).ToString();
                        netoMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[7]));
                        empleadoMasivo.Add(new E.Empleado
                        {
                            RFC = rfcEmplMasiv,
                            //IngresosBrutos = ingresosMasiv,
                            IngresosBrutos = netoMasiv,
                            ISR = ISRMasiv,
                            //IngresosNetos = netoMasiv,
                            IngresosNetos = ingresosMasiv,
                            Periodicidad = tipoIngresos
                        });
                        emplMasiv = empleadoMasivo.ToArray();
                    }
                }

                if (empleadoMasivo.Count.Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                        if (ValidaCer().Equals(false))
                        {
                            return;
                        }
                        if (ValidaKey().Equals(false))
                        {
                            return;
                        }

                        DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                        DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                        DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                        controlador.ValXmlMasivo(empleadoMasivo, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago);                    
                    //int row = -1;
                    //int contRow = gridViewNomiMasiv.RowCount;
                    //foreach (var item in emplMasiv)
                    //{
                    //    row++;
                    //    EmplMasiv = controlador.BuscaEmpleado(item.RFC);
                    //    EmplMasiv.IngresosBrutos = item.IngresosBrutos;
                    //    EmplMasiv.ISR = item.ISR;
                    //    EmplMasiv.IngresosNetos = item.IngresosNetos;

                    //    if (row < contRow)
                    //    {
                    //        GenXmlMasiv(EmplMasiv);
                    //    }
                    //    else
                    //    {
                    //        splashScreenManager1.CloseWaitForm();
                    //        XtraMessageBox.Show("¡Nómina Generada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //        return;
                    //    }
                    //}
                }
            }
            catch (Exception masiv)
            {
                XtraMessageBox.Show(masiv.Message + "\nError modulo Nomina: BtnNomiMasiv", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void repositoryItemGridLookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void repositoryItemSpinEdit1_EditValueChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void BtnMasivIngresos_Click(object sender, EventArgs e)
        {
            try
            {
                calcUnitario = false;
                E.Empleado empl = new E.Empleado();
                C.Controller Controlador = new C.Controller();
                XtraOpenFileDialog dialog = new XtraOpenFileDialog();
                dialog.Filter = "Archivos de Excel (*.xls;*.xlsx)|*.xls;*.xlsx"; //le indicamos el tipo de filtro en este caso que busque
                                                                                 //solo los archivos excel

                dialog.Title = "Seleccione el archivo de Excel";//le damos un titulo a la ventana

                dialog.FileName = string.Empty;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(false))
                    {
                        splashScreenManager1.ShowWaitForm();
                    }
                    Excel.Application xlApp;
                    Excel.Workbook xlWorkBook;
                    Excel.Worksheet xlWorkSheet;
                    Excel.Range range;
                    int rCnt;
                    int rw = 0;
                    int cl = 0;
                    int cont = 0;
                    string Archivo = dialog.FileName;
                    var misValue = Type.Missing;

                    decimal gravado = 0;
                    decimal limInf;
                    decimal ba;
                    decimal tasa;
                    decimal resultado;
                    decimal cuotaFija;
                    decimal isrEx = 0;
                    decimal sub;

                    xlApp = new Excel.Application();
                    xlWorkBook = xlApp.Workbooks.Open(@Archivo, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue);
                    xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);

                    range = xlWorkSheet.UsedRange;
                    rw = range.Rows.Count;
                    cl = range.Columns.Count;

                    Excel.Application excel = new Excel.Application();
                    Excel.Application excelSem = new Excel.Application();
                    Excel.Application excelQui = new Excel.Application();
                    Excel._Workbook libroSemanal = null;
                    Excel._Workbook libroQuincenal = null;
                    Excel._Workbook libroMensual = null;

                    excel.DisplayAlerts = false;
                    excelSem.DisplayAlerts = false;
                    excelQui.DisplayAlerts = false;

                    excel.Visible = false;
                    excelSem.Visible = false;
                    excelQui.Visible = false;

                    libroMensual = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR Salarios.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheet = (Excel.Worksheet)libroMensual.Sheets["Calculo"];

                    libroSemanal = excelSem.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosSemanal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetSemanal = (Excel.Worksheet)libroSemanal.Sheets["Calculo"];

                    libroQuincenal = excelQui.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosQuincenal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetQuincenal = (Excel.Worksheet)libroQuincenal.Sheets["Calculo"];

                    var listaImporteEmpleados = new List<E.Empleado>();

                    for (rCnt = 2; rCnt <= rw; rCnt++)
                    {
                        try
                        {
                             IDEmpl = Convert.ToInt32((range.Cells[rCnt, "A"] as Excel.Range).Value2.ToString());
                        }catch(Exception idEmpl)
                        {
                             IDEmpl = 0;
                        }
                        try
                        {
                            importeExcel = Math.Round(Convert.ToDecimal((range.Cells[rCnt, "B"] as Excel.Range).Value2.ToString()), 2);
                        }
                        catch (Exception importeExc)
                        {
                            importeExcel = 10000;
                        }

                        try
                        {
                            periodicidadExcel = (range.Cells[rCnt, "C"] as Excel.Range).Value2.ToString();
                            periodicidadExcel = periodicidadExcel.ToUpper();
                        }catch (Exception periExcel)
                        {
                            periodicidadExcel = "MENSUAL";
                        }
                        //string fechaIniPeriodo = (range.Cells[rCnt, "D"] as Excel.Range).Value2.ToString("yyyy/MM/dd");
                        //string fechaFinperiodo = (range.Cells[rCnt, "E"] as Excel.Range).Value2.ToString("yyyy/MM/dd");
                        if (periodicidadExcel.Equals("SEMANAL"))
                        {
                            periodicidadExcel = "02";
                            //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                            worksheetSemanal.Cells[6, 3] = importeExcel;
                            excelSem.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                            gravado = Math.Round((decimal)(worksheetSemanal.Cells[8, 3] as Excel.Range).Value, 2);
                            limInf = Math.Round((decimal)(worksheetSemanal.Cells[9, 3] as Excel.Range).Value, 2);
                            ba = Math.Round((decimal)(worksheetSemanal.Cells[10, 3] as Excel.Range).Value, 2);
                            tasa = Math.Round((decimal)(worksheetSemanal.Cells[11, 3] as Excel.Range).Value, 2);
                            resultado = Math.Round((decimal)(worksheetSemanal.Cells[12, 3] as Excel.Range).Value, 2);
                            cuotaFija = Math.Round((decimal)(worksheetSemanal.Cells[13, 3] as Excel.Range).Value, 2);
                            isrEx = Math.Round((decimal)(worksheetSemanal.Cells[14, 3] as Excel.Range).Value, 2);
                            sub = Math.Round((decimal)(worksheetSemanal.Cells[15, 3] as Excel.Range).Value, 2);


                        }
                        else if (periodicidadExcel.Equals("QUINCENAL"))
                        {
                            periodicidadExcel = "04";

                            //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                            worksheetQuincenal.Cells[6, 3] = importeExcel;
                            excelQui.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                            gravado = Math.Round((decimal)(worksheetQuincenal.Cells[8, 3] as Excel.Range).Value, 2);
                            limInf = Math.Round((decimal)(worksheetQuincenal.Cells[9, 3] as Excel.Range).Value, 2);
                            ba = Math.Round((decimal)(worksheetQuincenal.Cells[10, 3] as Excel.Range).Value, 2);
                            tasa = Math.Round((decimal)(worksheetQuincenal.Cells[11, 3] as Excel.Range).Value, 2);
                            resultado = Math.Round((decimal)(worksheetQuincenal.Cells[12, 3] as Excel.Range).Value, 2);
                            cuotaFija = Math.Round((decimal)(worksheetQuincenal.Cells[13, 3] as Excel.Range).Value, 2);
                            isrEx = Math.Round((decimal)(worksheetQuincenal.Cells[14, 3] as Excel.Range).Value, 2);
                            sub = Math.Round((decimal)(worksheetQuincenal.Cells[15, 3] as Excel.Range).Value, 2);


                        }
                        else if (periodicidadExcel.Equals("MENSUAL"))
                        {
                            periodicidadExcel = "05";

                            //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                            worksheet.Cells[6, 3] = importeExcel;
                            excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //excel.Run("Hoja1.Inverso");
                            //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                            gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                            limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                            ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                            tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                            resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                            cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                            isrEx = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                            sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                        }
                        else
                        {
                            periodicidadExcel = "";
                        }
                        listaImporteEmpleados.Add(new E.Empleado
                        {

                            IDEmpleado = IDEmpl,
                            IngresosNetos = importeExcel,
                            Periodicidad = periodicidadExcel,
                            ISR = isrEx,
                            IngresosBrutos = gravado
                            //fechaAplicacion = Convert.ToDateTime(fechaAplicacion),
                            //fecIniPeri = Convert.ToDateTime(fechaIniPeriodo),
                            //fecFinPeri = Convert.ToDateTime(fechaFinperiodo)
                        });
                    }
                    string nombreArchivo = xlWorkBook.Name;
                    nombreArchivo = Path.GetFileNameWithoutExtension(nombreArchivo);
                    //xlWorkBook.Close(true, "Formato_Masivo_Importe_Empleados", null);
                    xlWorkBook.Close(true, nombreArchivo, null);
                    xlApp.Quit();

                    Marshal.ReleaseComObject(xlWorkSheet);
                    Marshal.ReleaseComObject(xlWorkBook);
                    Marshal.ReleaseComObject(xlApp);

                    //Excel.Application excel = new Excel.Application();

                    for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                    {
                        int numEmpl = Convert.ToInt32(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[0]).ToString());
                        foreach (var empleado in listaImporteEmpleados)
                        {
                            if (numEmpl.Equals(empleado.IDEmpleado))
                            {
                                gridViewNomiMasiv.SetRowCellValue(i, "Ingresos", empleado.IngresosNetos);
                                if (empleado.Periodicidad != "")
                                {
                                    //repositoryItemLookUpPeriLayout.ValueMember = periodicidad;
                                    gridViewNomiMasiv.SetRowCellValue(i, "Periodicidad Pago",           empleado.Periodicidad);
                                }
                                gridViewNomiMasiv.SetRowCellValue(i, "ISR", empleado.ISR);
                                gridViewNomiMasiv.SetRowCellValue(i, "Neto", empleado.IngresosBrutos);
                                break;
                            }
                        }
                    }
                    splashScreenManager1.CloseWaitForm();
                    excel.UserControl = false;
                    excelQui.UserControl = false;
                    excelSem.UserControl = false;

                    //libroQuincenal.Save();
                    //libroSemanal.Save();
                    //libroMensual.Save();
                    //libroSemanal.Close();
                    //libroQuincenal.Close();
                    //libroMensual.Close();



                    //IntPtr xAsIntPtr = new IntPtr(excel.Application.Hwnd);
                    ////excelObj.ActiveWorkbook.Close();

                    //System.Diagnostics.Process[] process = System.Diagnostics.Process.GetProcessesByName("EXCEL.EXE");
                    //foreach (System.Diagnostics.Process p in process)
                    //{
                    //    if (p.MainWindowHandle == xAsIntPtr)
                    //    {
                    //        try
                    //        {
                    //            p.Kill();
                    //        }
                    //        catch { }
                    //    }
                    //}

                    string nombreArchivoMensual = libroMensual.Name;
                    string nombreArchivoSemanal = libroSemanal.Name;
                    string nombreArchivoQuincenal = libroQuincenal.Name;
                    nombreArchivoMensual = Path.GetFileNameWithoutExtension(nombreArchivoMensual);
                    nombreArchivoSemanal = Path.GetFileNameWithoutExtension(nombreArchivoSemanal);
                    nombreArchivoQuincenal = Path.GetFileNameWithoutExtension(nombreArchivoQuincenal);
                    //xlWorkBook.Close(true, "Formato_Masivo_Importe_Empleados", null);
                    //xlWorkBook.Close(true, nombreArchivo, null);
                    libroSemanal.Close(true, nombreArchivoSemanal);
                    libroQuincenal.Close(true, nombreArchivoQuincenal);
                    libroMensual.Close(true, nombreArchivoMensual);

                    excel.Quit();
                    excelQui.Quit();
                    excelSem.Quit();

                    Marshal.ReleaseComObject(worksheet);
                    Marshal.ReleaseComObject(worksheetSemanal);
                    Marshal.ReleaseComObject(worksheetQuincenal);
                    Marshal.ReleaseComObject(libroSemanal);
                    Marshal.ReleaseComObject(libroQuincenal);
                    Marshal.ReleaseComObject(libroMensual);
                    Marshal.ReleaseComObject(excel);
                    excel = null;
                    Marshal.ReleaseComObject(excelSem);
                    Marshal.ReleaseComObject(excelQui);

                    //excel.Quit();
                    //excelSem.Quit();
                    calcUnitario = true;
                }
                else
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }
                }

            }
            catch (Exception ing)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show(ing.Message + "\nBtnMasivIngresos", "Error"
                    , MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void gridViewLayoutBanorte_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.Column.Caption.Equals("Ingresos Netos"))
            {
                if (calcUnitario.Equals(true))
                {
                    string ingresosCelda = e.Value.ToString();
                    string periMasiv = gridViewLayoutBanorte.GetRowCellValue(e.RowHandle, "Periodicidad Pago").ToString();
                    decimal IngresosMsiv = Convert.ToDecimal(ingresosCelda);
                    string ing = String.Format("{0:0.00}", IngresosMsiv);
                    IngresosMsiv = Convert.ToDecimal(ing);
                    calcMasiv = LeerExcel(IngresosMsiv, calcMasiv, periMasiv);
                    //calcMasiv = controlador.GeneraCalculo(IngresosMsiv, periMasiv, bd);

                    //gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    //gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Neto", calcMasiv.IngresosNetos);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Bruto", calcMasiv.IngresosBrutos);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "LimInferior", calcMasiv.LimInferior);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ExLimInf", calcMasiv.ExLimInf);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "PerExLimInf", calcMasiv.PerExLimInf);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ImpMarg", calcMasiv.ImpMarg);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "CF", calcMasiv.CF);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Sub", calcMasiv.Sub);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    //gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Ingresos", calcMasiv.IngresosNetos);
                }
                for (int i = 0; i < gridViewLayoutBanorte.RowCount; i++)
                {
                    object value = view.GetRowCellValue(i, "Ingresos");
                    decimal valor = Convert.ToDecimal(value);
                    if (valor > 0)
                    {
                        gridViewLayoutBanorte.SelectRow(i);
                    }
                }
            }
            if (e.Column.Caption.Equals("Periodicidad Pago"))
            {
                if (calcUnitario.Equals(true))
                {
                    string periCelda = e.Value.ToString();
                    string periMasiv = gridViewLayoutBanorte.GetRowCellValue(e.RowHandle, "Periodicidad Pago").ToString();
                    string ingresosCelda = gridViewLayoutBanorte.GetRowCellValue(e.RowHandle, "Ingresos").ToString();
                    decimal ingresosMasiv = Convert.ToDecimal(ingresosCelda);
                    string ing = String.Format("{0:0.00}", ingresosMasiv);
                    ingresosMasiv = Convert.ToDecimal(ing);

                    //calcMasiv = controlador.GeneraCalculo(ingresosMasiv, periCelda, bd);
                    calcMasiv = LeerExcel(ingresosMasiv, calcMasiv, periMasiv);
                    //gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    //gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Neto", calcMasiv.IngresosNetos);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Bruto", calcMasiv.IngresosBrutos);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "LimInferior", calcMasiv.LimInferior);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ExLimInf", calcMasiv.ExLimInf);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "PerExLimInf", calcMasiv.PerExLimInf);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ImpMarg", calcMasiv.ImpMarg);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "CF", calcMasiv.CF);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Sub", calcMasiv.Sub);
                    gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    //gridViewLayoutBanorte.SetRowCellValue(e.RowHandle, "Ingresos", calcMasiv.IngresosNetos);
                }

            }
        }

        private void BtnImportarInfo_Click(object sender, EventArgs e)
        {
            try
            {
                if (lookUpCliente.Text.Equals("Seleccione"))
                {
                    XtraMessageBox.Show("Por favor seleccione un cliente.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                calcUnitario = false;
                E.Empleado empl = new E.Empleado();
                C.Controller Controlador = new C.Controller();
                XtraOpenFileDialog dialog = new XtraOpenFileDialog();
                dialog.Filter = "Archivos de Excel (*.xls;*.xlsx)|*.xls;*.xlsx"; //le indicamos el tipo de filtro en este caso que busque
                                                                                 //solo los archivos excel

                dialog.Title = "Seleccione el archivo de Excel";//le damos un titulo a la ventana

                dialog.FileName = string.Empty;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(false))
                    {
                        splashScreenManager1.ShowWaitForm();
                    }
                    Excel.Application xlApp;
                    Excel.Workbook xlWorkBook;
                    Excel.Worksheet xlWorkSheet;
                    Excel.Range range;
                    int rCnt;
                    int rw = 0;
                    int cl = 0;
                    int cont = 0;
                    string Archivo = dialog.FileName;
                    var misValue = Type.Missing;

                    decimal gravado = 0;
                    decimal limInf = 0;
                    decimal ba = 0;
                    decimal tasa = 0;
                    decimal resultado = 0;
                    decimal cuotaFija = 0;
                    decimal isrEx = 0;
                    decimal sub = 0; 

                    xlApp = new Excel.Application();
                    xlWorkBook = xlApp.Workbooks.Open(@Archivo, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue, misValue);
                    xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.get_Item(1);

                    range = xlWorkSheet.UsedRange;
                    rw = range.Rows.Count;
                    cl = range.Columns.Count;

                    Excel.Application excel = new Excel.Application();
                    Excel.Application excelSem = new Excel.Application();
                    Excel.Application excelQui = new Excel.Application();
                    Excel.Application excelCat = new Excel.Application();
                    Excel._Workbook libroSemanal = null;
                    Excel._Workbook libroQuincenal = null;
                    Excel._Workbook libroMensual = null;
                    Excel._Workbook libroCatorcenal = null;

                    excel.DisplayAlerts = false;
                    excelSem.DisplayAlerts = false;
                    excelQui.DisplayAlerts = false;
                    excelCat.DisplayAlerts = false;

                    excel.Visible = false;
                    excelSem.Visible = false;
                    excelQui.Visible = false;
                    excelCat.Visible = false;

                    libroMensual = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR Salarios.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheet = (Excel.Worksheet)libroMensual.Sheets["Calculo"];

                    libroSemanal = excelSem.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosSemanal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetSemanal = (Excel.Worksheet)libroSemanal.Sheets["Calculo"];

                    libroQuincenal = excelQui.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosQuincenal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetQuincenal = (Excel.Worksheet)libroQuincenal.Sheets["Calculo"];

                    libroCatorcenal = excelCat.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosCatorcenal.xlsm",
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                    Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                    Excel.Worksheet worksheetCatorcenal = (Excel.Worksheet)libroQuincenal.Sheets["Calculo"];

                    var listaImporteEmpleados = new List<E.Empleado>();

                    for (rCnt = 2; rCnt <= rw; rCnt++)
                    {
                        try
                        {
                            IDEmpl = Convert.ToInt32((range.Cells[rCnt, "A"] as Excel.Range).Value2.ToString());
                        }
                        catch (Exception idEmpl)
                        {
                            IDEmpl = 0;
                        }
                        try
                        {
                            importeExcel = Math.Round(Convert.ToDecimal((range.Cells[rCnt, "B"] as Excel.Range).Value2.ToString()), 2);
                        }
                        catch (Exception importeExc)
                        {
                            importeExcel = 10000;
                        }

                        try
                        {
                            periodicidadExcel = (range.Cells[rCnt, "C"] as Excel.Range).Value2.ToString();
                            periodicidadExcel = periodicidadExcel.ToUpper();
                        }
                        catch (Exception periExcel)
                        {
                            periodicidadExcel = "Otra Periodicidad";
                        }
                        //if (importe.ToString().Equals("0.01"))
                        //{
                        //    gravado = 0;
                        //    limInf = 0;
                        //    ba = 0;
                        //    tasa = 0;
                        //    resultado = 0;
                        //    cuotaFija =0;
                        //    isrEx = 0;
                        //    sub = 0;
                        //    if (periodicidad.Equals("SEMANAL"))
                        //    {
                        //        periodicidad = "02";
                        //    }
                        //    else if (periodicidad.Equals("QUINCENAL"))
                        //    {
                        //        periodicidad = "04";
                        //    }
                        //    else if (periodicidad.Equals("MENSUAL"))
                        //    {
                        //        periodicidad = "05";
                        //    }
                        //    listaImporteEmpleados.Add(new E.Empleado
                        //    {

                        //        IDEmpleado = IDEmpl,
                        //        Periodicidad = periodicidad,
                        //        IngresosBrutos = gravado,
                        //        LimInferior = limInf,
                        //        ExLimInf = ba,
                        //        PerExLimInf = tasa,
                        //        ImpMarg = resultado,
                        //        CF = cuotaFija,
                        //        ISR = isrEx,
                        //        Sub = sub,
                        //        IngresosNetos = importe,
                        //        //fechaAplicacion = Convert.ToDateTime(fechaAplicacion),
                        //        //fecIniPeri = Convert.ToDateTime(fechaIniPeriodo),
                        //        //fecFinPeri = Convert.ToDateTime(fechaFinperiodo)
                        //    });
                        //}
                        //else
                        //{
                        if (periodicidadExcel.Equals("SEMANAL"))
                            {
                            periodicidadExcel = "02";
                                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                                worksheetSemanal.Cells[6, 3] = importeExcel;
                                excelSem.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                                gravado = Math.Round((decimal)(worksheetSemanal.Cells[8, 3] as Excel.Range).Value, 2);
                                limInf = Math.Round((decimal)(worksheetSemanal.Cells[9, 3] as Excel.Range).Value, 2);
                                ba = Math.Round((decimal)(worksheetSemanal.Cells[10, 3] as Excel.Range).Value, 2);
                                tasa = Math.Round((decimal)(worksheetSemanal.Cells[11, 3] as Excel.Range).Value, 2);
                                resultado = Math.Round((decimal)(worksheetSemanal.Cells[12, 3] as Excel.Range).Value, 2);
                                cuotaFija = Math.Round((decimal)(worksheetSemanal.Cells[13, 3] as Excel.Range).Value, 2);
                                isrEx = Math.Round((decimal)(worksheetSemanal.Cells[14, 3] as Excel.Range).Value, 2);
                                sub = Math.Round((decimal)(worksheetSemanal.Cells[15, 3] as Excel.Range).Value, 2);
                            }
                            else if (periodicidadExcel.Equals("QUINCENAL"))
                            {
                            periodicidadExcel = "04";

                                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                                worksheetQuincenal.Cells[6, 3] = importeExcel;
                                excelQui.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                                gravado = Math.Round((decimal)(worksheetQuincenal.Cells[8, 3] as Excel.Range).Value, 2);
                                limInf = Math.Round((decimal)(worksheetQuincenal.Cells[9, 3] as Excel.Range).Value, 2);
                                ba = Math.Round((decimal)(worksheetQuincenal.Cells[10, 3] as Excel.Range).Value, 2);
                                tasa = Math.Round((decimal)(worksheetQuincenal.Cells[11, 3] as Excel.Range).Value, 2);
                                resultado = Math.Round((decimal)(worksheetQuincenal.Cells[12, 3] as Excel.Range).Value, 2);
                                cuotaFija = Math.Round((decimal)(worksheetQuincenal.Cells[13, 3] as Excel.Range).Value, 2);
                                isrEx = Math.Round((decimal)(worksheetQuincenal.Cells[14, 3] as Excel.Range).Value, 2);
                                sub = Math.Round((decimal)(worksheetQuincenal.Cells[15, 3] as Excel.Range).Value, 2);


                            }else if (periodicidadExcel.Equals("CATORCENAL"))
                            {
                                periodicidadExcel = "03";
                                worksheet.Cells[6, 3] = importeExcel;
                                excel.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                                gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                                limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                                ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                                tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                                resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                                cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                                isrEx = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                                sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);
                        }
                            else if (periodicidadExcel.Equals("MENSUAL"))
                            {
                            periodicidadExcel = "05";

                                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                                worksheet.Cells[6, 3] = importeExcel;
                                excel.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //excel.Run("Hoja1.Inverso");
                                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);
                                gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                                limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                                ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                                tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                                resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                                cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                                isrEx = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                                sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                            }
                            else
                            {
                            periodicidadExcel = "99";
                                gravado = 0;
                                limInf = 0;
                                ba = 0;
                                tasa = 0;
                                resultado = 0;
                                cuotaFija = 0;
                                isrEx = 0;
                                sub = 0;
                            }
                            listaImporteEmpleados.Add(new E.Empleado
                            {

                                IDEmpleado = IDEmpl,
                                Periodicidad = periodicidadExcel,
                                IngresosBrutos = gravado,
                                LimInferior = limInf,
                                ExLimInf = ba,
                                PerExLimInf = tasa,
                                ImpMarg = resultado,
                                CF = cuotaFija,
                                ISR = isrEx,
                                Sub = sub,
                                IngresosNetos = importeExcel,
                                //fechaAplicacion = Convert.ToDateTime(fechaAplicacion),
                                //fecIniPeri = Convert.ToDateTime(fechaIniPeriodo),
                                //fecFinPeri = Convert.ToDateTime(fechaFinperiodo)
                            });
                        //}

                    }
                    string nombreArchivo = xlWorkBook.Name;
                    nombreArchivo = Path.GetFileNameWithoutExtension(nombreArchivo);
                    //xlWorkBook.Close(true, "Formato_Masivo_Importe_Empleados", null);
                    xlWorkBook.Close(true, nombreArchivo, null);
                    xlApp.Quit();

                    Marshal.ReleaseComObject(xlWorkSheet);
                    Marshal.ReleaseComObject(xlWorkBook);
                    Marshal.ReleaseComObject(xlApp);

                    //Excel.Application excel = new Excel.Application();

                    for (int i = 0; i < gridViewLayoutBanorte.RowCount; i++)
                    {
                        int numEmpl = Convert.ToInt32(gridViewLayoutBanorte.GetRowCellValue(i, gridViewNomiMasiv.Columns[0]).ToString());
                        foreach (var empleado in listaImporteEmpleados)
                        {
                            if (numEmpl.Equals(empleado.IDEmpleado))
                            {
                                if (empleado.Periodicidad != "")
                                {
                                    //repositoryItemLookUpPeriLayout.ValueMember = periodicidad;
                                    gridViewLayoutBanorte.SetRowCellValue(i, "Periodicidad Pago", empleado.Periodicidad);
                                }
                                gridViewLayoutBanorte.SetRowCellValue(i, "Bruto", empleado.IngresosBrutos);
                                gridViewLayoutBanorte.SetRowCellValue(i, "LimInferior", empleado.LimInferior);
                                gridViewLayoutBanorte.SetRowCellValue(i, "ExLimInf", empleado.ExLimInf);
                                gridViewLayoutBanorte.SetRowCellValue(i, "PerExLimInf", empleado.PerExLimInf);
                                gridViewLayoutBanorte.SetRowCellValue(i, "ImpMarg", empleado.ImpMarg);
                                gridViewLayoutBanorte.SetRowCellValue(i, "CF", empleado.CF);
                                gridViewLayoutBanorte.SetRowCellValue(i, "Sub", empleado.Sub);
                                gridViewLayoutBanorte.SetRowCellValue(i, "ISR", empleado.ISR);
                                gridViewLayoutBanorte.SetRowCellValue(i, "Ingresos", empleado.IngresosNetos);
                                gridViewLayoutBanorte.SetRowCellValue(i, "Otro Concepto",0.00);
                                //gridViewLayoutBanorte.SetRowCellValue(i, "Fecha Aplicacion", empleado.fechaAplicacion);
                                //gridViewLayoutBanorte.SetRowCellValue(i, "Fecha Inicio Periodo", empleado.fecIniPeri);
                                //gridViewLayoutBanorte.SetRowCellValue(i, "Fecha Fin Periodo", empleado.fecFinPeri);
                                break;
                            }
                        }
                    }
                    splashScreenManager1.CloseWaitForm();
                    excel.UserControl = false;
                    excelQui.UserControl = false;
                    excelSem.UserControl = false;

                    //libroQuincenal.Save();
                    //libroSemanal.Save();
                    //libroMensual.Save();
                    //libroSemanal.Close();
                    //libroQuincenal.Close();
                    //libroMensual.Close();



                    //IntPtr xAsIntPtr = new IntPtr(excel.Application.Hwnd);
                    ////excelObj.ActiveWorkbook.Close();

                    //System.Diagnostics.Process[] process = System.Diagnostics.Process.GetProcessesByName("EXCEL.EXE");
                    //foreach (System.Diagnostics.Process p in process)
                    //{
                    //    if (p.MainWindowHandle == xAsIntPtr)
                    //    {
                    //        try
                    //        {
                    //            p.Kill();
                    //        }
                    //        catch { }
                    //    }
                    //}

                    string nombreArchivoMensual = libroMensual.Name;
                    string nombreArchivoSemanal = libroSemanal.Name;
                    string nombreArchivoQuincenal = libroQuincenal.Name;
                    string nombreArchivoCatorcenal = libroCatorcenal.Name;
                    nombreArchivoMensual = Path.GetFileNameWithoutExtension(nombreArchivoMensual);
                    nombreArchivoSemanal = Path.GetFileNameWithoutExtension(nombreArchivoSemanal);
                    nombreArchivoQuincenal = Path.GetFileNameWithoutExtension(nombreArchivoQuincenal);
                    nombreArchivoCatorcenal = Path.GetFileNameWithoutExtension(nombreArchivoCatorcenal);
                    //xlWorkBook.Close(true, "Formato_Masivo_Importe_Empleados", null);
                    //xlWorkBook.Close(true, nombreArchivo, null);
                    libroSemanal.Close(true, nombreArchivoSemanal);
                    libroQuincenal.Close(true, nombreArchivoQuincenal);
                    libroMensual.Close(true, nombreArchivoMensual);
                    libroCatorcenal.Close(true, nombreArchivoCatorcenal);
                    excel.Quit();
                    excelQui.Quit();
                    excelSem.Quit();
                    excelCat.Quit();

                    Marshal.ReleaseComObject(worksheet);
                    Marshal.ReleaseComObject(worksheetSemanal);
                    Marshal.ReleaseComObject(worksheetQuincenal);
                    Marshal.ReleaseComObject(worksheetCatorcenal);
                    Marshal.ReleaseComObject(libroSemanal);
                    Marshal.ReleaseComObject(libroQuincenal);
                    Marshal.ReleaseComObject(libroMensual);
                    Marshal.ReleaseComObject(libroCatorcenal);
                    Marshal.ReleaseComObject(excel);
                    excel = null;
                    Marshal.ReleaseComObject(excelSem);
                    Marshal.ReleaseComObject(excelQui);
                    Marshal.ReleaseComObject(excelCat);

                    //excel.Quit();
                    //excelSem.Quit();
                    calcUnitario = true;
                }
                else
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }
                }
            }
            catch (Exception importar)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true)) 
                {
                    splashScreenManager1.CloseWaitForm();
                }

                XtraMessageBox.Show(importar.Message + "\nError Modulo Nómina:ImportarInfo()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void repositoryItemLookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {      
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void txtAgu_EditValueChanged(object sender, EventArgs e)
        {
            aguinaldo = Convert.ToDecimal(txtAgu.Text);
        }

        private void txtVac_EditValueChanged(object sender, EventArgs e)
        {
            vacaciones = Convert.ToDecimal(txtVac.Text);
        }

        private void txtPrimVac_EditValueChanged(object sender, EventArgs e)
        {
            primaVac = Convert.ToDecimal(txtPrimVac.Text);
        }

        private void btnValidarPago_Click(object sender, EventArgs e)
        {
            if (gridViewLayout.RowCount.Equals(0))
            {
                XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            for (int i = 0; i < gridViewLayout.RowCount; i++)
            {
                if (gridViewLayout.IsRowSelected(i))
                {
                    nomCaratulaGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[1]).ToString();
                    EstatusCaratula = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[13]).ToString();
                }
            }
            if (EstatusCaratula.Equals("Pagado"))
            {
                XtraMessageBox.Show("El pago ya fue validado anteriormente.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var respuesta = XtraMessageBox.Show("¿Desea Confirmar El Pago Al Cliente?\n Después de validar el pago no se podrá cambiar la información.", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (respuesta.Equals(DialogResult.Yes))
            {
                for (int i = 0; i < gridViewLayout.RowCount; i++)
                {
                    if (gridViewLayout.IsRowSelected(i))
                    {
                        nomCaratulaGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[1]).ToString();
                        //EstatusCaratula = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[13]).ToString();
                    }
                }
                if (controlador.ActualizaStatusCaratula(nomCaratulaGenLayout, usuarioSistema).Equals(true))
                {
                    XtraMessageBox.Show("Pago validado", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    controlador.ActualizaStatusLayout(nomCaratulaGenLayout, "Pagado");
                    controlador.ListaCaratulas(gridControlLayout);
                    controlador.ListadoLayoutGenerados(gridControlFactura);                    
                }
                else
                {
                    XtraMessageBox.Show("No se pudo validar pago", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnVerInfoCaratula_Click(object sender, EventArgs e)
        {
            if (gridViewLayout.RowCount.Equals(0))
            {
                XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(false))
                {
                    splashScreenManager1.ShowWaitForm();
                    splashScreenManager1.SetWaitFormCaption("Cargando Información..");
                }
            }
            for (int i = 0; i < gridViewLayout.RowCount; i++)
            {
                if (gridViewLayout.IsRowSelected(i))
                {
                    nomCaratulaGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[1]).ToString();
                    //EstatusCaratula = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[13]).ToString();
                    nomGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[2]).ToString();
                    IDClienteLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[3]).ToString();
                }
            }
            V.VerDetalleLayout verDetalle = new V.VerDetalleLayout(nomGenLayout, IDClienteLayout, nomCaratulaGenLayout, splashScreenManager1);
            verDetalle.Text = "Detalle " + nomGenLayout;
            verDetalle.ShowDialog();
            verDetalle.BringToFront();
        }

        private void lookUpClave_EditValueChanged(object sender, EventArgs e)
        {
            string clave = lookUpClave.EditValue.ToString();
            claveServicio = controlador.GetClaveProdServ(clave);
            txtDescClave.Text = claveServicio.descripcion;
        }

        private void btnEditarCaratula_Click(object sender, EventArgs e)
        {
            if (splashScreenManager1.IsSplashFormVisible.Equals(false))
            {
                splashScreenManager1.ShowWaitForm();
                splashScreenManager1.SetWaitFormCaption("Cargando Información..");
            }
            if (gridViewLayout.RowCount.Equals(0))
            {
                XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            for (int i = 0; i < gridViewLayout.RowCount; i++)
            {
                if (gridViewLayout.IsRowSelected(i))
                {
                    nomCaratulaGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[1]).ToString();
                    nomGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[2]).ToString();
                    EstatusCaratula = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[13]).ToString();
                }
            }
            if (EstatusCaratula.Equals("Pagado"))
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show("¡No se puede modificar información de caratula con pago validado!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                EditarCaratula editarCaratula = new EditarCaratula(nomCaratulaGenLayout, nomGenLayout, splashScreenManager1, rfc)
                {
                    Text = "Editar " + nomCaratulaGenLayout  ,                   
                };
                editarCaratula.FormClosed += editarCaratula_FormClosed;
                editarCaratula.ShowDialog();
                editarCaratula.BringToFront();
            }
        }

        void editarCaratula_FormClosed(object sender, FormClosedEventArgs e)
        {
            Form frm = sender as Form;
            this.ActTableCarat();
        }

        private void btnDetalleCaratula_Click(object sender, EventArgs e)
        {

            string caratula = gridViewLayout.GetFocusedRowCellValue( colCaratula).ToString();
             
            if (caratula.Length > 0)
            {
                MostrarReporte(caratula, 0);
                MostrarReporte(caratula, 1);
            }

            
        }

        [Obsolete]
        private void btnTimbrar_Click(object sender, EventArgs e)
        {
            try
            {
                if (pacTimbrado.Equals("NT") && ambiente.Equals("Pruebas"))
                {
                    XtraMessageBox.Show("El timbrado de pruebas no esta disponible para NT-LINK", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else if (pacTimbrado.Equals("SL") && ambiente.Equals("Pruebas"))
                {
                    var respuestaTimbre = XtraMessageBox.Show("El PAC de timbrado de Solución Factible esta configurado en ambiente de pruebas.\n¿Desea continuar?\n(Si no es el ambiente correcto, favor de notificar a su adminsitrador de sistema.)", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (respuestaTimbre.Equals(DialogResult.No))
                    {
                        XtraMessageBox.Show("Proceso de timbrado cancelado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                bool chCorreo = false;
                if (chBoxCorreoClte2.Checked.Equals(true) || chBoxCorreoEmpleado2.Checked.Equals(true))
                {
                    chCorreo = true;
                }
                if (chCorreo.Equals(false))
                {
                    var respuesta = XtraMessageBox.Show("No se ha seleccionado metodo de envio para los recibos generados. ¿Desea continuar sin enviar archivos por correo?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (respuesta.Equals(DialogResult.Yes))
                    {
                        var empleadoMasivo = new List<E.Empleado>();
                        E.Empleado[] emplMasiv = null;
                        for (int i = 0; i < gridViewFactura.RowCount; i++)
                        {
                            if (gridViewFactura.IsRowSelected(i))
                            {
                                ingresosMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]));
                                string ing = String.Format("{0:0.00}", ingresosMasiv);
                                ingresosMasiv = Convert.ToDecimal(ing);
                                tipoIngresos = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]).ToString();
                                //ingresosMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]));
                                ISRMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[11]));
                                rfcEmplMasiv = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[2]).ToString();
                                netoMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[12]));

                                DateTime FechaInicioMasivo = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[17]));
                                DateTime FechaFinMasivo = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[18]));
                                DateTime FechaPago = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[16]));
                                int IDLayout = Convert.ToInt32(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[19]));
                                string IDCliente = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[20]).ToString();

                                empleadoMasivo.Add(new E.Empleado
                                {
                                    RFC = rfcEmplMasiv,
                                    //IngresosBrutos = ingresosMasiv,
                                    IngresosBrutos = Math.Round(ingresosMasiv, 2),
                                    ISR = Math.Round(ISRMasiv, 2),
                                    //IngresosNetos = netoMasiv,
                                    IngresosNetos = Math.Round(netoMasiv, 2),
                                    Periodicidad = tipoIngresos,
                                    fechaAplicacion = FechaPago,
                                    fecIniPeri = FechaInicioMasivo,
                                    fecFinPeri = FechaFinMasivo,
                                    IDLayout = IDLayout,
                                    idEmpresa = IDCliente
                                });
                                emplMasiv = empleadoMasivo.ToArray();
                            }
                        }

                        if (empleadoMasivo.Count.Equals(0))
                        {
                            XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            if (ValidaCer().Equals(false))
                            {
                                return;
                            }
                            if (ValidaKey().Equals(false))
                            {
                                return;
                            }

                            E.Caratula datosCaratula = new E.Caratula();

                            //DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                            //DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                            //DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                            controlador.GenXmlMasivo2(empleadoMasivo, splash, empresa, rfc, ip, destinoCorreo, enviaCorreo, pacTimbrado, ambiente);
                            controlador.ListadoLayoutGenerados(gridControlFactura);
                            this.CargaTimbresDisponibles();
                        }
                    }
                }
                else
                {
                    var empleadoMasivo = new List<E.Empleado>();
                    E.Empleado[] emplMasiv = null;
                    for (int i = 0; i < gridViewFactura.RowCount; i++)
                    {
                        if (gridViewFactura.IsRowSelected(i))
                        {
                            ingresosMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]));
                            string ing = String.Format("{0:0.00}", ingresosMasiv);
                            ingresosMasiv = Convert.ToDecimal(ing);
                            tipoIngresos = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]).ToString();
                            //ingresosMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]));
                            ISRMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[11]));
                            rfcEmplMasiv = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[2]).ToString();
                            netoMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[12]));

                            DateTime FechaInicioMasivo = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[17]));
                            DateTime FechaFinMasivo = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[18]));
                            DateTime FechaPago = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[16]));
                            int IDLayout = Convert.ToInt32(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[19]));
                            string idEmpresa = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[20]).ToString();

                            empleadoMasivo.Add(new E.Empleado
                            {
                                RFC = rfcEmplMasiv,
                                //IngresosBrutos = ingresosMasiv,
                                IngresosBrutos = Math.Round(ingresosMasiv, 2),
                                ISR = Math.Round(ISRMasiv, 2),
                                //IngresosNetos = netoMasiv,
                                IngresosNetos = Math.Round(netoMasiv, 2),
                                Periodicidad = tipoIngresos,
                                fechaAplicacion = FechaPago,
                                fecIniPeri = FechaInicioMasivo,
                                fecFinPeri = FechaFinMasivo,
                                IDLayout = IDLayout,
                                idEmpresa = idEmpresa
                            });
                            emplMasiv = empleadoMasivo.ToArray();
                        }
                    }

                    if (empleadoMasivo.Count.Equals(0))
                    {
                        XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        if (ValidaCer().Equals(false))
                        {
                            return;
                        }
                        if (ValidaKey().Equals(false))
                        {
                            return;
                        }

                        E.Caratula datosCaratula = new E.Caratula();

                        //DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                        //DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                        //DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                        controlador.GenXmlMasivo2(empleadoMasivo, splash, empresa, rfc, ip, destinoCorreo, enviaCorreo, pacTimbrado, ambiente);
                        controlador.ListadoLayoutGenerados(gridControlFactura);
                        this.CargaTimbresDisponibles();
                    }
                }

            }
            catch (Exception Valmasiv)
            {
                XtraMessageBox.Show(Valmasiv.Message + "\nError modulo Nomina: Btntimbra", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnValidarTimbrado_Click(object sender, EventArgs e)
        {
            try
            {
                var empleadoMasivo = new List<E.Empleado>();
                E.Empleado[] emplMasiv = null;
                for (int i = 0; i < gridViewFactura.RowCount; i++)
                {
                    if (gridViewFactura.IsRowSelected(i))
                    {
                        ingresosMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]));
                        string ing = String.Format("{0:0.00}", ingresosMasiv);
                        ingresosMasiv = Convert.ToDecimal(ing);
                        tipoIngresos = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]).ToString();
                        //ingresosMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[5]));
                        ISRMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[11]));
                        rfcEmplMasiv = gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[2]).ToString();
                        netoMasiv = Convert.ToDecimal(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[12]));

                        DateTime FechaInicioMasivo = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[17]));
                        DateTime FechaFinMasivo = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[18]));
                        DateTime FechaPago = Convert.ToDateTime(gridViewFactura.GetRowCellValue(i, gridViewFactura.Columns[16]));

                        empleadoMasivo.Add(new E.Empleado
                        {
                            RFC = rfcEmplMasiv,
                            //IngresosBrutos = ingresosMasiv,
                            IngresosBrutos = Math.Round(ingresosMasiv, 2),
                            ISR = Math.Round(ISRMasiv, 2),
                            //IngresosNetos = netoMasiv,
                            IngresosNetos = Math.Round(netoMasiv, 2),
                            Periodicidad = tipoIngresos,
                            fechaAplicacion = FechaPago,
                            fecIniPeri = FechaInicioMasivo,
                            fecFinPeri = FechaFinMasivo
                        });
                        emplMasiv = empleadoMasivo.ToArray();
                    }
                }

                if (empleadoMasivo.Count.Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    if (ValidaCer().Equals(false))
                    {
                        return;
                    }
                    if (ValidaKey().Equals(false))
                    {
                        return;
                    }

                    E.Caratula datosCaratula = new E.Caratula();

                    //DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                    //DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                    //DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                    controlador.ValXmlMasivo2(empleadoMasivo, splash, empresa, rfc, ip);
                }
            }
            catch (Exception Valmasiv)
            {
                XtraMessageBox.Show(Valmasiv.Message + "\nError modulo Nomina: BtnValNomiMasiv2", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnAbrirPeriodo_Click(object sender, EventArgs e)
        {
            if (gridViewLayout.RowCount.Equals(0))
            {
                XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            for (int i = 0; i < gridViewLayout.RowCount; i++)
            {
                if (gridViewLayout.IsRowSelected(i))
                {
                    nomCaratulaGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[1]).ToString();
                    nomGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[2]).ToString();
                    EstatusCaratula = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[13]).ToString();
                }
            }
            if (EstatusCaratula.Equals("Generado"))
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show("¡El periodo ya se encuentra abierto!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                if (controlador.ReabrirCaratula(nomCaratulaGenLayout, usuarioSistema).Equals(true))
                {
                    XtraMessageBox.Show("Periodo abierto con éxito", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    controlador.ActualizaStatusLayout(nomCaratulaGenLayout, "Generado");
                    controlador.ListaCaratulas(gridControlLayout);
                    controlador.ListadoLayoutGenerados(gridControlFactura);
                }
                else
                {
                    XtraMessageBox.Show("No se pudo abrir periodo", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            //string cadena = "||1.1|C25AB8B3-7CCC-4FD2-BE1C-A207D7E16EF6|2020-08-11T12:30:58|NLC091211KC6|lQyCeWUWAHjsOjHhV4gyKNKHHKVOE6U2bMNzFYfdl8PBYO2eK001ctgRtlFWb9EHzL8yUrrzoxDBIcsYjOakN0avzjUxx/MC/QuO6NfGzbx2dpa3iANvyXqLHBhFnCWnrNKOKH1IUTGh5Qzft8xHpXCUjNz/qhMn8ViUx/1VSAANXKOJGIgTHAcG4NxzXJ3Wg0SUZZCrDGgC4oOa9sygiCWFoq4yd4l+6a5NJxP2DCa0BYx45oiKHxsJ97f1a60zWpYzoQ+uJDP3ljEqNg8+D74gjA/GTRQx1eUe6yelMwioFHI3iuJ/+QWRDPCJ5MEUc3XGJ5PPPJogP2Xjo6ypZQ==|00001000000504447535||";
            //string[] arrayCadena;
            //arrayCadena = cadena.Split(Convert.ToChar("|"));
            //string uid = arrayCadena[3];
            //string sello = arrayCadena[6];
            //arrayCadena = sello.Split(Convert.ToChar("/"));
            //string ultDigSello = arrayCadena[6];
            //int tamDig = ultDigSello.Length;
            //ultDigSello = ultDigSello.Substring((tamDig - 8),8);
            //XtraMessageBox.Show("UUID: " + uid + "\nselloCFD: " + ultDigSello);

            //controlador.EnviaFacturaCorreo();
        }

        private void lookUpEstatusCarat_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void chBoxCorreoEmpleado_CheckedChanged(object sender, EventArgs e)
        {
            if (chBoxCorreoEmpleado.Checked.Equals(true))
            {
                chBoxClte.Enabled = false;
                destinoCorreo = "Empleado";
                enviaCorreo = true;
            }
            else
            {
                chBoxClte.Enabled = true;
            }
        }

        private void chBoxClte_CheckedChanged(object sender, EventArgs e)
        {
            if (chBoxClte.Checked.Equals(true))
            {
                chBoxCorreoEmpleado.Enabled = false;
                destinoCorreo = "Cliente";
                enviaCorreo = true;
            }
            else
            {
                chBoxCorreoEmpleado.Enabled = true;
            }
        }

        private void chEditSolucion_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chEditSolucion.Checked.Equals(true))
                {
                    chNtLink.Checked = false;
                    pacTimbrado = "SL";

                    if (chNtLink.Checked.Equals(true) && ambiente.Equals("Produccion"))
                    {
                        txtPACActivo.Text = "NT-LINK / Producción";
                    }
                    else if (chNtLink.Checked.Equals(true) && ambiente.Equals("Pruebas"))
                    {
                        txtPACActivo.Text = "NT-LINK / Pruebas";
                    }
                    if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Pruebas"))
                    {
                        txtPACActivo.Text = "Solucion Factible / Pruebas";
                    }
                    else if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Produccion"))
                    {
                        txtPACActivo.Text = "Solucion Factible / Producción";
                    }
                }
            }catch (Exception SL)
            {

            }
        }

        private void chNtLink_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (chNtLink.Checked.Equals(true))
                {
                    chEditSolucion.Checked = false;
                    pacTimbrado = "NT";
                    if (chNtLink.Checked.Equals(true) && ambiente.Equals("Produccion"))
                    {
                        txtPACActivo.Text = "NT-LINK / Producción";
                    }
                    else if (chNtLink.Checked.Equals(true) && ambiente.Equals("Pruebas"))
                    {
                        txtPACActivo.Text = "NT-LINK / Pruebas";
                    }
                    if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Pruebas"))
                    {
                        txtPACActivo.Text = "Solucion Factible / Pruebas";
                    }
                    else if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Produccion"))
                    {
                        txtPACActivo.Text = "Solucion Factible / Producción";
                    }
                }
            }catch (Exception chLINK)
            {

            }
        }

        private void chBoxCorreoEmpleado2_CheckedChanged(object sender, EventArgs e)
        {
            if (chBoxCorreoEmpleado2.Checked.Equals(true))
            {
                chBoxCorreoClte2.Enabled = false;
                destinoCorreo = "Empleado";
                enviaCorreo = true;
            }
            else
            {
                chBoxCorreoClte2.Enabled = true;
            }
        }

        private void lookUpPAC_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                ambiente = lookUpPAC.EditValue.ToString();
                if (chNtLink.Checked.Equals(true) && ambiente.Equals("Produccion"))
                {
                    txtPACActivo.Text = "NT-LINK / Producción";
                }
                else if (chNtLink.Checked.Equals(true) && ambiente.Equals("Pruebas"))
                {
                    txtPACActivo.Text = "NT-LINK / Pruebas";
                }
                 if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Pruebas"))
                {
                    txtPACActivo.Text = "Solucion Factible / Pruebas";
                }
                else if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Produccion"))
                {
                    txtPACActivo.Text = "Solucion Factible / Producción";
                }
            }catch (Exception PAC)
            {

            }
        }

        private void gridControlNomiMasiv_Click(object sender, EventArgs e)
        {

        }

        private void chBoxCorreoClte2_CheckedChanged(object sender, EventArgs e)
        {
            if (chBoxCorreoClte2.Checked.Equals(true))
            {
                chBoxCorreoEmpleado2.Enabled = false;
                destinoCorreo = "Cliente";
                enviaCorreo = true;
            }
            else
            {
                chBoxCorreoEmpleado2.Enabled = true;
            }
        }

        private void BtnDetallesNomi_Click(object sender, EventArgs e)
        {
            try
            {                
                if (gridViewNomina.RowCount.Equals(0))
                {
                    XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (gridViewNomina.GetSelectedRows().Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    splashScreenManager1.ShowWaitForm();
                    splashScreenManager1.SetWaitFormCaption("Cargando Información..");
                    for (int i = 0; i < gridViewNomina.RowCount; i++)
                    {
                        if (gridViewNomina.IsRowSelected(i))
                        {
                            IDResumenNomina = Convert.ToInt32(gridViewNomina.GetRowCellValue(i, gridViewNomina.Columns[1]));
                            resumenNominaID = gridViewNomina.GetRowCellValue(i, gridViewNomina.Columns[2]).ToString();
                        }
                    }
                    V.DetallesNomina detallesNomina = new V.DetallesNomina(IDResumenNomina, splashScreenManager1);
                    detallesNomina.ShowDialog();
                    detallesNomina.BringToFront();
                }
            }
            catch(Exception btnDetallesNomina)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show("Error al intentar mostrar información nómina:\n" + btnDetallesNomina.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnTimbrarNomina_Click(object sender, EventArgs e)
        {
            try
            {               
                if (pacTimbrado.Equals("NT") && ambiente.Equals("Pruebas"))
                {
                    XtraMessageBox.Show("El timbrado de pruebas no esta disponible para NT-LINK", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else if (pacTimbrado.Equals("SL") && ambiente.Equals("Pruebas"))
                {
                    var respuestaTimbre = XtraMessageBox.Show("El PAC de timbrado de Solución Factible esta configurado en ambiente de pruebas.\n¿Desea continuar?\n(Si no es el ambiente correcto, favor de notificar a su adminsitrador de sistema.)", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (respuestaTimbre.Equals(DialogResult.No))
                    {
                        XtraMessageBox.Show("Proceso de timbrado cancelado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                E.Parametros parametrosNomina = controlador.GetParametros(rfc);
                if (parametrosNomina.correo_cliente.Equals(""))
                {
                    XtraMessageBox.Show("El correo de la empresa (cliente) no se ha definido. Para contiunar, por favor dar de alta el correo.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    string estatus = "", periodo ="";
                    for (int i = 0; i < gridViewTimbradoNomina.RowCount; i++)
                    {
                        if (gridViewTimbradoNomina.IsRowSelected(i))
                        {
                            estatus = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[11]).ToString();
                            ingresosMasiv = Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[6]));
                            string ing = String.Format("{0:0.00}", ingresosMasiv);
                            ingresosMasiv = Convert.ToDecimal(ing);
                            ingresosMasiv = Math.Round(ingresosMasiv, 2);
                            tipoIngresos = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[4]).ToString();
                            //ingresosMasiv = Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[5]));
                            ISRMasiv = Math.Round(Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[7])), 2);
                            rfcEmplMasiv = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[3]).ToString();
                            netoMasiv = Math.Round(Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[5])), 2);
                            nombreEmpleado = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[2]).ToString();
                            periodo = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[13]).ToString();
                        }
                        if (estatus.Equals("Timbrado"))
                        {
                            XtraMessageBox.Show("La nómina, del empleado " + nombreEmpleado + " en el periodo " + periodo + " ya fue timbrado anteriormente.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }else if (estatus.Equals("Cancelado"))
                        {
                            XtraMessageBox.Show("La nómina, del empleado " + nombreEmpleado + " en el periodo " + periodo + " ha sido cancelada, no es posible timbrarla de nuevo.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }else if (estatus.Equals("En Proceso de Cancelación"))
                        {
                            XtraMessageBox.Show("La nómina, del empleado " + nombreEmpleado + " en el periodo " + periodo + " Se encuentra en proceso de cancelación, no es posible timbrarla de nuevo.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    var empleadoMasivo = new List<E.Empleado>();
                    E.Empleado[] emplMasiv = null;
                    DateTime FechaInicioMasivo = Convert.ToDateTime("01/01/1900");
                    DateTime FechaFinMasivo = Convert.ToDateTime("01/01/1900");
                    DateTime FechaPago = Convert.ToDateTime("01/01/1900");
                    for (int i = 0; i < gridViewTimbradoNomina.RowCount; i++)
                    {
                        if (gridViewTimbradoNomina.IsRowSelected(i))
                        {
                            ingresosMasiv = Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[6]));
                            string ing = String.Format("{0:0.00}", ingresosMasiv);
                            ingresosMasiv = Convert.ToDecimal(ing);
                            ingresosMasiv = Math.Round(ingresosMasiv, 2);
                            tipoIngresos = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[4]).ToString();
                            //ingresosMasiv = Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[5]));
                            ISRMasiv = Math.Round(Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[7])),2);
                            rfcEmplMasiv = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[3]).ToString();
                            netoMasiv = Math.Round(Convert.ToDecimal(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[5])),2);
                            nombreEmpleado = gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[2]).ToString();
                            int IDNomina = Convert.ToInt32(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[0]));
                            FechaPago = Convert.ToDateTime(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[8]));
                            FechaInicioMasivo = Convert.ToDateTime(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[9]));
                            FechaFinMasivo = Convert.ToDateTime(gridViewTimbradoNomina.GetRowCellValue(i, gridViewTimbradoNomina.Columns[10]));

                            if (ingresosMasiv.Equals(0))
                            {
                                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                                {
                                    splashScreenManager1.CloseWaitForm();
                                }
                            var resultado = XtraMessageBox.Show("El empleado " + nombreEmpleado + " No tiene    ingresos. ¿Desea continuar?", "Mensaje", MessageBoxButtons.YesNo,   MessageBoxIcon.Question);

                                if (resultado.Equals(DialogResult.No))
                                {
                                    return;
                                }
                                else
                                {
                                    splashScreenManager1.ShowWaitForm();
                                }
                            }

                            if (ingresosMasiv > 0)
                            {
                                empleadoMasivo.Add(new E.Empleado
                                {
                                    Nombre = nombreEmpleado,
                                    RFC = rfcEmplMasiv,
                                    //IngresosBrutos = ingresosMasiv,
                                    IngresosBrutos = ingresosMasiv,
                                    ISR = ISRMasiv,
                                    //IngresosNetos = netoMasiv,
                                    IngresosNetos = netoMasiv,
                                    Periodicidad = tipoIngresos,
                                    nominaEmpresaID = bd,
                                    IDNomina = IDNomina
                                });
                                emplMasiv = empleadoMasivo.ToArray();
                            }
                        }
                    }
                    if (empleadoMasivo.Count.Equals(0))
                    {
                        XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        if (ValidaCer().Equals(false))
                        {
                            return;
                        }
                        if (ValidaKey().Equals(false))
                        {
                            return;
                        }
                        controlador.TimradoNomina(empleadoMasivo, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago, "", true,parametros.correo_cliente,pacTimbrado, ambiente);
                        this.CargaTimbresDisponibles();
                        sqlDataSource2.Fill();
                        }                                         
                }
            }catch (Exception btnTimNomi)
            {
                XtraMessageBox.Show("Error al timbrar nómina:\n" + btnTimNomi.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnCerrarNomi_Click(object sender, EventArgs e)
        {
            try
            {
                if (gridViewNomina.RowCount.Equals(0))
                {
                    XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (gridViewNomina.GetSelectedRows().Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    for (int i = 0; i < gridViewNomina.RowCount; i++)
                    {
                        if (gridViewNomina.IsRowSelected(i))
                        {
                            estatusNomina = gridViewNomina.GetRowCellValue(i, gridViewNomina.Columns[11]).ToString();
                            IDResumenNomina = Convert.ToInt32(gridViewNomina.GetRowCellValue(i, gridViewNomina.Columns[1]));
                            resumenNominaID = gridViewNomina.GetRowCellValue(i, gridViewNomina.Columns[2]).ToString();

                            if (estatusNomina.Equals("Generado"))
                            {
                                var respuesta = XtraMessageBox.Show("¿Desea cerrar la nómina seleccionada?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                                if (respuesta.Equals(DialogResult.Yes))
                                {
                                    //System.Drawing.Icon icon = new System.Drawing.Icon(@"C:\DocAsimilados\Ico\Success.ico");
                                    //XtraMessageBoxArgs args = new XtraMessageBoxArgs();
                                    //args.Caption = "Mensaje";
                                    //args.Text = "¡Nómina cerrada con éxito!";
                                    //args.Buttons = new DialogResult[] { DialogResult.OK };
                                    //args.Icon = icon;
                                    //args.Showing += Args_Showing;
                                    //XtraMessageBox.Show(args).ToString();
                                    //XtraMessageBox.Icons[MessageBoxIcon.Exclamation] = icon;
                                    controlador.CerrarNomina(IDResumenNomina, resumenNominaID, usuarioSistema);
                                    sqlDataSource2.Fill();
                                    XtraMessageBox.Show("¡Nómina cerrada con éxito!", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                            }
                            else
                            {
                                XtraMessageBox.Show("La nómina ya fue cerrada anteriormente.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                        }
                    }
                }
            } catch(Exception btnCerrarNomi)
            {
                XtraMessageBox.Show("Error al intentar cerrar nómina:\n" + btnCerrarNomi.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnGenerarLayout_Click(object sender, EventArgs e)
        {
            if (gridViewLayout.RowCount.Equals(0))
            {
                XtraMessageBox.Show("La tabla no contiene información", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            for (int i = 0; i < gridViewLayout.RowCount; i++)
            {
                if (gridViewLayout.IsRowSelected(i))
                {
                    nomCaratulaGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[1]).ToString();
                    nomGenLayout = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[2]).ToString();
                    EstatusCaratula = gridViewLayout.GetRowCellValue(i, gridViewLayout.Columns[13]).ToString();
                }
            }
            if (EstatusCaratula.Equals("Generado"))
            {
                XtraMessageBox.Show("No se puede generar layout de caratula con pago no validado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                //XtraMessageBox.Show(nomCaratulaGenLayout);
                var listaLayoutValidado = new List<E.Layout>();
                splashScreenManager1.ShowWaitForm();
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.SetWaitFormCaption("Obteniendo Información..");
                }

                listaLayoutValidado = controlador.GetListaLayout(nomCaratulaGenLayout, listaLayoutValidado, splashScreenManager1);
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.SetWaitFormCaption("Guardando movimiento..");
                }
                controlador.ActualizaStatusLayout(listaLayoutValidado, splashScreenManager1);
                controlador.GeneraLayoutBanorte(listaLayoutValidado, nomGenLayout, splashScreenManager1);
                controlador.ListaCaratulas(gridControlLayout);
                controlador.ListadoLayoutGenerados(gridControlFactura);
            }

        }

        private void repositoryItemSpinEdit2_EditValueChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void lookUpEmprPago_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                idEmpresaCaratula = lookUpEmprPago.EditValue.ToString();
                var bancos = new List<E.ListaBancos>();
                string empresa = idEmpresaCaratula;
                bancos = controlador.Bancos(idEmpresaCaratula, bancos);
                lookUpBanco.Properties.DataSource = bancos;
                lookUpBanco.Properties.ValueMember = "Nombre";
                lookUpBanco.Properties.DisplayMember = "Nombre";
                lookUpBanco.EditValue = null;
            }
            catch (Exception empresaPago)
            {

            }

        }

        private void lookUpBanco_EditValueChanged(object sender, EventArgs e)
        {
            string banco = lookUpBanco.EditValue.ToString();
            datosBanco = controlador.GetInfoBanco(banco, idEmpresaCaratula);
        }

        private void gridControlLayoutBanorte_Click(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void repositoryItemSpinImporteLayout_EditValueChanged(object sender, EventArgs e)
        {

            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void repositoryItemLookUpPeriLayout_EditValueChanged(object sender, EventArgs e)
        {
            
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }

        private void repositoryItemTextEdit1_EditValueChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.SendKeys.Send("{ENTER}");
        }


        public void ActTableCarat()
        {
            controlador.ListaCaratulas(gridControlLayout);
        }
        [Obsolete]
        private void BtnGenCaratula_Click(object sender, EventArgs e)
        {
            try
            {
                #region validacionesCliente-EmpresaPago
                if (lookUpCliente.EditValue.ToString().Equals("E00000") && lookUpEmprPago.Text.Equals("Seleccione"))
                {
                    XtraMessageBox.Show("Por favor seleccione cliente y empresa que realiza pago.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (lookUpCliente.EditValue.ToString().Equals("E00000"))
                {
                    XtraMessageBox.Show("Por favor seleccione un cliente.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                if (lookUpEmprPago.Text.Equals("Seleccione"))
                {                   
                    XtraMessageBox.Show("Por favor seleccione empresa que realiza pago.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;                   
                }

                if (lookUpEmprPago.Text != "Seleccione" && lookUpBanco.Text.Equals("Seleccione"))
                {
                    XtraMessageBox.Show("Por favor seleccione banco de la empresa que realiza pago.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (lookUpClave.Text.Equals("Seleccione"))
                {
                    XtraMessageBox.Show("Por favor seleccione clave de facturación.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                #endregion

                splashScreenManager1.ShowWaitForm();
                string IDCliente = lookUpCliente.EditValue.ToString();
                string nombreCliente = lookUpCliente.Text;
                string fechaAplicacionPeriodo = FecAplicacionLayoutBanorte.Value.ToString("yyyy-MM-dd");
                //fechaAplicacion = Convert.ToDateTime(fecAplicación),
                string fechaIniPeri = FecIniLayout.Value.ToString("yyyy-MM-dd");
                string fechaFinPeri = FecFinLayout.Value.ToString("yyyy-MM-dd");
                string fecha = DateTime.Now.ToString("dd/MM/yyyy");
                DateTime fechaSistema = DateTime.Parse(fecha.Trim());
                DateTime fechaApliPeri = DateTime.Parse(fechaAplicacionPeriodo.Trim());
                DateTime fechaInPer = DateTime.Parse(fechaIniPeri.Trim());
                DateTime fechaFiPer = DateTime.Parse(fechaFinPeri.Trim());
                CultureInfo cul = CultureInfo.CurrentCulture;
                int numSemana = cul.Calendar.GetWeekOfYear(fechaSistema, CalendarWeekRule.FirstDay,
                 DayOfWeek.Monday);
                string anio = cul.Calendar.GetYear(fechaInPer).ToString();
                string mes = cul.Calendar.GetMonth(fechaInPer).ToString();
                int dia = cul.Calendar.GetDayOfMonth(fechaFiPer);

                caratulaPago.FechaAplicacion = fechaApliPeri;
                caratulaPago.FechaIniPeriodo = fechaInPer;
                caratulaPago.FechaFinPeriodo = fechaFiPer;

                string periodo = Convert.ToString(anio + mes + "0");

                //string periodo = Convert.ToString(DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + numSemana);

                nombreCaratula = lookUpCliente.Text + "-" + Convert.ToString(DateTime.Now.Day.ToString() + "-" + DateTime.Now.Month.ToString() + "-"
                + DateTime.Now.Year.ToString() + ", " + DateTime.Now.Hour.ToString() + "-" + DateTime.Now.Minute.ToString()
                + "-" + DateTime.Now.Second.ToString());

                string nombreLayout = "Pago_Layout_" + nombreCliente + "_" + Convert.ToString(DateTime.Now.Day.ToString() + "-" + DateTime.Now.Month.ToString() + "-"
                + DateTime.Now.Year.ToString() + ", " + DateTime.Now.Hour.ToString() + "-" + DateTime.Now.Minute.ToString()
                + "-" + DateTime.Now.Second.ToString());

                caratulaPago.caratula = nombreCaratula;
                caratulaPago.Layout = nombreLayout;
                caratulaPago.IDCliente = lookUpCliente.EditValue.ToString();
                caratulaPago.IDEmpresa = lookUpEmprPago.EditValue.ToString();
                caratulaPago.Empresa = lookUpEmprPago.Text;
                caratulaPago.Cliente = lookUpCliente.Text;
                caratulaPago.TipoPeri = infoCliente.PERIODO_DE_PAGO;
                int cont = 0;
                parametrosLayout = controlador.GetParametros(rfc);
                var listaLayout = new List<E.Layout>();
                var empleadoMasivoLayout = new List<E.Empleado>();
                E.Empleado[] emplMasiv = null;
                for (int i = 0; i < gridViewLayoutBanorte.RowCount; i++)
                {
                    if (gridViewLayoutBanorte.IsRowSelected(i))
                    {
                        periodo = Convert.ToString(anio + mes + "0");
                        cont++;
                        ingresosMasiv = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[6]));
                        string ing = String.Format("{0:0.00}", ingresosMasiv);
                        ingresosMasiv = Convert.ToDecimal(ing);
                        tipoIngresos = gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[4]).ToString();
                        ISRMasiv = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[12]));
                        rfcEmplMasiv = gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[2]).ToString();
                        descPago = gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[5]).ToString();
                        netoMasiv = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[14]));
                        numEmplLayoutBanorte = gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[0]).ToString();
                        periPagoLayout = gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[4]).ToString();
                        LimInferiorLayout = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[7])); 
                        ExLimInfLayout   = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[8])); 
                        PerExLimInfLayout= Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[9])); 
                        ImpMargLayout    = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[10])); 
                        CFLayout         = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[11])); 
                        SubLayout = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[13])); 
                        otrosConceptos = Convert.ToDecimal(gridViewLayoutBanorte.GetRowCellValue(i, gridViewLayoutBanorte.Columns[15]));

                        empleadoLayout = controlador.BuscaEmpleado(rfcEmplMasiv);

                        descuento = empleadoLayout.descuento;
                        depositoNeto = otrosConceptos + netoMasiv - descuento;



                        #region ifPeriodos
                        if (empleadoLayout.Periodicidad.Equals("Semanal")|| empleadoLayout.Periodicidad.Equals("02"))
                        {
                            if (dia <= 7)
                            {
                                periodo = periodo + "1";
                            }else if (dia <= 14)
                            {
                                periodo = periodo + "2";
                            }else if (dia <= 21)
                            {
                                periodo = periodo + "3";
                            }else if (dia <= 28 || dia > 28)
                            {
                                periodo = periodo + "4";
                            }
                        }else if (empleadoLayout.Periodicidad.Equals("Quincenal")|| empleadoLayout.Periodicidad.Equals("04"))
                        {
                            if (dia <= 15)
                            {
                                periodo = periodo + "1";
                            }
                            else
                            {
                                periodo = periodo + "2";
                            }
                        }else if (empleadoLayout.Periodicidad.Equals("Mensual")|| empleadoLayout.Periodicidad.Equals("05"))
                        {
                            periodo = periodo + "1";
                        }
                        #endregion

                        #region AsignaCuenta/Clabe
                        if (empleadoLayout.cuenta.Equals("No Definido") && empleadoLayout.clabe_bancaria.Equals("No Definido"))
                        {
                            cuentaDestino = "No Definido";
                        }

                        if (empleadoLayout.cuenta.Equals("0") && empleadoLayout.clabe_bancaria.Equals("0"))
                        {
                            cuentaDestino = "No Definido";
                        }

                        if (empleadoLayout.cuenta.Equals("0000000000") && empleadoLayout.clabe_bancaria.Equals("000000000000000000"))
                        {
                            cuentaDestino = "No Definido";
                        }

                        if (empleadoLayout.tipoPago.Equals("010"))
                        {
                            if (empleadoLayout.cuenta.Equals("0") || empleadoLayout.cuenta.Equals("0000000000"))
                            {
                                cuentaDestino = "No Definido";
                            }
                            else
                            {
                                cuentaDestino = empleadoLayout.cuenta;
                            }

                            if (cuentaDestino.Equals("No Definido"))
                            {
                                XtraMessageBox.Show("El empleado: " + empleadoLayout.Nombre + ", No tiene definido el # de cuenta, favor de validar e intentar nuevamente.\nFin de proceso.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }else if (empleadoLayout.tipoPago.Equals("040"))
                        {
                            if (empleadoLayout.clabe_bancaria.Equals("0") || empleadoLayout.clabe_bancaria.Equals("000000000000000000"))
                            {
                                cuentaDestino = "No Definido";
                            }
                            else
                            {
                                cuentaDestino = empleadoLayout.clabe_bancaria;
                            }
                            if (cuentaDestino.Equals("No Definido"))
                            {
                                XtraMessageBox.Show("El empleado: " + empleadoLayout.Nombre + ", No tiene definida la CLABE interbancaria, favor de validar e intentar nuevamente.\nFin de proceso.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }
                        else
                        {
                            if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                            {
                                splashScreenManager1.CloseWaitForm();
                            }
                            XtraMessageBox.Show("El empleado: " + empleadoLayout.Nombre + ", No tiene definido el tipo de pago, favor de validar e intentar nuevamente.\nFin de proceso.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                        #endregion

                        if (ingresosMasiv.Equals(0))
                        {
                            if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                            {
                                splashScreenManager1.CloseWaitForm();
                            }
                            var resultado = XtraMessageBox.Show("El empleado " + empleadoLayout.Nombre + " No tiene ingresos. ¿Desea continuar?" , "Mensaje" , MessageBoxButtons.YesNo , MessageBoxIcon.Question);

                            if (resultado.Equals(DialogResult.No))
                            {
                                return;
                            }
                            else
                            {
                                splashScreenManager1.ShowWaitForm();
                            }
                        }

                        if (ingresosMasiv > 0)
                        {
                            listaLayout.Add(new E.Layout
                            {
                                numEmpl = Convert.ToInt32(numEmplLayoutBanorte),
                                nombreEmpleado = empleadoLayout.Nombre,
                                RFCEmpleado = empleadoLayout.RFC,
                                CURPEmpleado = empleadoLayout.CURP,
                                ingresos = ingresosMasiv,
                                periPago = periPagoLayout,
                                LimInferior = LimInferiorLayout,
                                ExLimInf = ExLimInfLayout,
                                PerExLimInf = PerExLimInfLayout,
                                ImpMarg = ImpMargLayout,
                                CF = CFLayout,
                                ISR = ISRMasiv,
                                Sub = SubLayout,
                                ingresosNet = netoMasiv,
                                operacion = "04",
                                claveID = Convert.ToString(numEmplLayoutBanorte),
                                cuentaOrigen = parametrosLayout.cuentaOrigen,
                                cuentaClaveDestino = cuentaDestino,
                                importe = netoMasiv,
                                referencia = numEmplLayoutBanorte + cont,
                                descripcion = descPago,
                                RFCOrdenante = parametrosLayout.RFC,
                                IVA = 0,
                                fechaAplicacion = Convert.ToDateTime(FecAplicacionLayoutBanorte.Value.ToString()),
                                //fechaAplicacion = Convert.ToDateTime(fecAplicación),
                                fecIniPeri = Convert.ToDateTime(FecIniLayout.Value.ToString()),
                                fecFinPeri = Convert.ToDateTime(FecFinLayout.Value.ToString()),
                                institucionPago = empleadoLayout.Nombre.Replace(" ", string.Empty),
                                claveTipoCambio = "0",
                                fechaCreacion = System.DateTime.Today,
                                bancoEmpleado = empleadoLayout.banco,
                                caratula = nombreCaratula,
                                IDEmpresa = idEmpresaCaratula,
                                periodo = periodo,
                                IDCliente = IDCliente,
                                layout = nombreLayout,
                                tipoPago = empleadoLayout.tipoPago,
                                otrosConceptos = otrosConceptos,
                                depositoNeto = depositoNeto,
                                cuentaBancaria = empleadoLayout.cuenta,
                                CLABE = empleadoLayout.clabe_bancaria,
                                bancoEmpresaPago = lookUpBanco.EditValue.ToString(),
                                descuentos = descuento
                            });
                        }


                        ////XtraMessageBox.Show("Fin instrucciones");
                        empleadoMasivoLayout.Add(new E.Empleado
                        {
                            RFC = rfcEmplMasiv,
                            IngresosBrutos = ingresosMasiv,
                            ISR = ISRMasiv,
                            IngresosNetos = netoMasiv,
                            Periodicidad = tipoIngresos
                        });
                        emplMasiv = empleadoMasivoLayout.ToArray();
                    }

                }
                foreach (var item in listaLayout)
                {
                    totalPagoAsimilados = totalPagoAsimilados + item.depositoNeto;
                }
                var IVA = Convert.ToDecimal(0.16);
                var retencion = Convert.ToDecimal(0.06);
                detalleLayout.Caratula = nombreCaratula;
                detalleLayout.Layout = nombreLayout;
                detalleLayout.Detalles = TxtBoxObsLayout.Text;
                detalleLayout.SalarioAsimilado = Math.Round(totalPagoAsimilados, 2);
                detalleLayout.ImpuestoNomina = detalleLayout.SalarioAsimilado * Convert.ToDecimal(infoCliente.PORCENTAJE_ISN);
                detalleLayout.ComisionServicio = detalleLayout.SalarioAsimilado * Convert.ToDecimal(infoCliente.PORCENTAJE_COMISION);
                detalleLayout.SubTotal = detalleLayout.SalarioAsimilado + detalleLayout.ImpuestoNomina + detalleLayout.ComisionServicio;
                detalleLayout.IVA = Math.Round(detalleLayout.SubTotal * IVA, 2);
                

                if (infoCliente.RETENCION.Equals("S"))
                {
                    detalleLayout.RetencionIVA = Math.Round(detalleLayout.SubTotal * infoCliente.PORCENTAJE_RETENCION, 2);
                }
                detalleLayout.Total = Math.Round(detalleLayout.SubTotal + detalleLayout.IVA - detalleLayout.RetencionIVA);

                caratulaPago.TotalEmpleados = listaLayout.Count();
                caratulaPago.TotalPagoAsimilados = Math.Round(totalPagoAsimilados, 2);
                caratulaPago.usuario = Properties.Settings.Default.Usuario.ToString();
                if (infoCliente.Observaciones.Equals(""))
                {
                    caratulaPago.Observaciones = txtBoxObsCarat.Text;
                }
                else
                {
                    caratulaPago.Observaciones = infoCliente.Observaciones;
                }

                caratulaPago.Banco = lookUpBanco.EditValue.ToString();
                caratulaPago.NumCuenta = datosBanco.cuenta;
                caratulaPago.CLABE = datosBanco.clabe;
                caratulaPago.ProvAguinaldo = aguinaldo;
                caratulaPago.ProviVacaciones = vacaciones;
                caratulaPago.ProviPrimVacacional = primaVac;
                caratulaPago.AsimiSalarios = Math.Round(totalPagoAsimilados, 2);
                caratulaPago.SubTotalIAS = Math.Round(caratulaPago.TotalPagoAsimilados + caratulaPago.ProvAguinaldo + caratulaPago.ProviVacaciones + caratulaPago.ProviPrimVacacional);
                caratulaPago.ComisionServicio = Math.Round(caratulaPago.SubTotalIAS * Convert.ToDecimal(infoCliente.PORCENTAJE_COMISION), 2);
                caratulaPago.ImpNomi = Math.Round(caratulaPago.SubTotalIAS * Convert.ToDecimal(infoCliente.PORCENTAJE_ISN), 2);
                caratulaPago.Total = Math.Round(caratulaPago.SubTotalIAS + caratulaPago.ComisionServicio + caratulaPago.ImpNomi, 2);
                caratulaPago.IVA = Math.Round(caratulaPago.Total * IVA, 2);

                if (infoCliente.RETENCION.Equals("S"))
                {
                    caratulaPago.RetencionIVA = Math.Round(caratulaPago.Total * retencion, 2);
                }

                caratulaPago.TotalFactura = Math.Round(caratulaPago.Total + caratulaPago.IVA + caratulaPago.RetencionIVA, 2);

                caratulaPago.TotalDeposito = Math.Round(caratulaPago.TotalFactura + caratulaPago.Ajuste, 2);
                caratulaPago.ClaveFacturacion = lookUpClave.EditValue.ToString() /*+ "(" + txtDescClave.Text + ")"*/;
                caratulaPago.FormaPago = lookUpFormaPago.EditValue.ToString()/* + "(" + lookUpFormaPago.Text + ")"*/;
                caratulaPago.TipoPago = lookUpTipoPago.EditValue.ToString() /*+ "(" + lookUpTipoPago.Text + ")"*/;
                caratulaPago.RutaLogo = "Prueba";
                caratulaPago.Imagen = "prueba";
                caratulaPago.PorcentajeISN = infoCliente.PORCENTAJE_ISN;
                caratulaPago.PorcentajeComision = infoCliente.PORCENTAJE_COMISION;
                caratulaPago.PorcentajeRetencion = infoCliente.PORCENTAJE_RETENCION;

                if (listaLayout.Count.Equals(0))
                {
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    controlador.InsertaLayout(listaLayout, splashScreenManager1);
                    controlador.InsertaDetalleLyout(detalleLayout, splashScreenManager1);
                    controlador.InsertaCaratula(caratulaPago, splashScreenManager1);
                    controlador.ListaCaratulas(gridControlLayout);
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }
                    MostrarReporte(nombreCaratula, 0);
                    MostrarReporte(nombreCaratula, 1);

                    XtraMessageBox.Show("Proceso Terminado con Éxito", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    //controlador.GeneraLayoutBanorte(listaLayout, nombreLayout, splashScreenManager1);//, parametrosLayout);
                    //if (ValidaCer().Equals(false))
                    //{
                    //    return;
                    //}
                    //if (ValidaKey().Equals(false))
                    //{
                    //    return;
                    //}
                    //DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                    //DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                    //DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                    //controlador.GenXmlMasivo(empleadoMasivoLayout, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago);
                }
            }
            catch(Exception banorte)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show(banorte.Message + "\nError Modulo Nomina: BtnLayoutBanorte()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void MostrarReporte(string caratula, int rep)
        {
            try
            {
                XtraReport reporte;


                if (rep == 0)
                {
                    reporte = new Reports.repDetalleFactura(bd);
                }
                else
                {
                    reporte = new Reports.repCaratulaFactura(bd);

                }             
                reporte.FilterString = "[caratula] ='" + caratula + "'";
                reporte.FillDataSource();

                ReportPrintTool printTool = new ReportPrintTool(reporte);
                PrintControl printControl = printTool.PreviewForm.PrintControl;
                //PrintControl printControl = printTool.PreviewRibbonForm.PrintControl; 


                // Zoom the document, so that it fits the entire page into the Print Preview's dimensions.
                if (printControl.CanExecCommand(PrintingSystemCommand.ViewWholePage))
                {
                    printControl.ExecCommand(PrintingSystemCommand.ViewWholePage);
                }

                // Invoke the Hand tool to scroll the document using the mouse.
                if (printControl.CanExecCommand(PrintingSystemCommand.HandTool))
                {
                    printControl.ExecCommand(PrintingSystemCommand.HandTool, new object[] { true });
                }

                // Hide the Hand tool.
                //if (printControlCanExecCommand(PrintingSystemCommand.HandTool)) {
                //    printControl.ExecCommand(PrintingSystemCommand.HandTool, new object[] { false });
                //}

                // Show the report's Print Preview in a dialog window.
                printControl.Zoom = 1.2F;
                printTool.ShowPreview();
                //printTool.ShowPreviewDialog();
                //printTool.ShowRibbonPreviewDialog();
            }catch(Exception reporte)
            {
                XtraMessageBox.Show(reporte.Message + "mostrarReporte()", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void gridViewNomiMasiv_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            //System.Windows.Forms.SendKeys.Send("{ENTER}");
            GridView view = sender as GridView;
            if (e.Column.Caption.Equals("Ingresos"))
            {
                if (calcUnitario.Equals(true))
                {
                    string ingresosCelda = e.Value.ToString();
                    string periMasiv = gridViewNomiMasiv.GetRowCellValue(e.RowHandle, "Periodicidad Pago").ToString();
                    decimal IngresosMsiv = Convert.ToDecimal(ingresosCelda);
                    string ing = String.Format("{0:0.00}", IngresosMsiv);
                    IngresosMsiv = Convert.ToDecimal(ing);
                    calcMasiv = LeerExcel(IngresosMsiv, calcMasiv, periMasiv);
                    //calcMasiv = controlador.GeneraCalculo(IngresosMsiv, periMasiv, bd);
                    gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "Neto", calcMasiv.IngresosBrutos);
                }
                for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                {
                    object value = view.GetRowCellValue(i, "Ingresos");
                    decimal valor = Convert.ToDecimal(value);
                    if (valor > 0)
                    {
                        gridViewNomiMasiv.SelectRow(i);
                    }
                }
            }

            if (e.Column.Caption.Equals("Periodicidad Pago"))
            {
                if (calcUnitario.Equals(true))
                {
                    string periCelda = e.Value.ToString();
                    string periMasiv = gridViewLayoutBanorte.GetRowCellValue(e.RowHandle, "Periodicidad Pago").ToString();
                    string ingresosCelda = gridViewNomiMasiv.GetRowCellValue(e.RowHandle, "Ingresos").ToString();
                    decimal ingresosMasiv = Convert.ToDecimal(ingresosCelda);
                    string ing = String.Format("{0:0.00}", ingresosMasiv);
                    ingresosMasiv = Convert.ToDecimal(ing);

                    //calcMasiv = controlador.GeneraCalculo(ingresosMasiv, periCelda, bd);
                    calcMasiv = LeerExcel(ingresosMasiv, calcMasiv, periMasiv);

                    gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "ISR", calcMasiv.ISR);
                    gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "Neto", calcMasiv.IngresosBrutos);
                }

            }
            ////if (e.Column.Caption.Equals("Periodicidad Pago"))
            ////{
            ////    gridViewNomiMasiv.SetRowCellValue(e.RowHandle, "Periodicidad Pago", peri);
            ////}
        }

        public void CargaTimbresDisponibles()
        {
            ServicioTimbradoClient clientProduccion = new ServcioTimbradoNTLINK.ServicioTimbradoClient();
            clientProduccion.Open();
            int totalTimbres = clientProduccion.ConsultaSaldo("angel@inari.mx", "Inari2020.");
            clientProduccion.Close();

            txtTimbres.Text = totalTimbres.ToString();
            txtTimbresMasiv.Text = totalTimbres.ToString();
        }

        public void DefinirPAC() 
        {
            chNtLink.Checked = true;
            lookUpPAC.EditValue = "Produccion";
            
            if (chNtLink.Checked.Equals(true) && ambiente.Equals("Produccion"))
            {
                txtPACActivo.Text = "NT-LINK / Producción";
            }else if (chNtLink.Checked.Equals(true) && ambiente.Equals("Pruebas"))
            {
                txtPACActivo.Text = "NT-LINK / Pruebas";
            }else if (chEditSolucion.Checked.Equals(true) && ambiente.Equals("Pruebas"))
            {
                txtPACActivo.Text = "Solucion Factible / Pruebas";
            }
            else if (chEditSolucion.Checked.Equals(false) && ambiente.Equals("Produccion"))
            {
                txtPACActivo.Text = "Solucion Factible / Producción";
            }
        }

        private void NominaAsimilados_Load(object sender, EventArgs e)
        {
            //this.DefinirPAC();
            try
            {
                pacTimbrado = Properties.Settings.Default.PAC.ToString();
                ambiente = Properties.Settings.Default.Ambiente.ToString();

                if (pacTimbrado.Equals("SL"))
                {
                    layoutControlTimbresNT.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                    layoutControlTimbresNT2.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                }
                if (pacTimbrado.Equals("NT") && ambiente.Equals("Produccion"))
                {
                    txtPacActiv.Text = "NT-LINK / Producción";
                    txtPacActiv2.Text = "NT-LINK / Producción";
                    this.CargaTimbresDisponibles();
                }
                else if (pacTimbrado.Equals("NT") && ambiente.Equals("Pruebas"))
                {
                    layoutControlTimbresNT.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                    layoutControlTimbresNT2.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                    txtPacActiv.Text = "NT-LINK / Pruebas";
                    txtPacActiv2.Text = "NT-LINK / Pruebas";
                }
                if (pacTimbrado.Equals("SL") && ambiente.Equals("Pruebas"))
                {
                    txtPacActiv.Text = "Solucion Factible / Pruebas";
                    txtPacActiv2.Text = "Solucion Factible / Pruebas";
                }
                else if (pacTimbrado.Equals("SL") && ambiente.Equals("Produccion"))
                {
                    txtPacActiv.Text = "Solucion Factible / Producción";
                    txtPacActiv2.Text = "Solucion Factible / Producción";
                }


                calcUnitario = true;
                if (controlador.GetAdminUsuario(usuarioSistema, bd, false).Equals(true))
                {
                    layoutControlbtnPeriodo.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
                }
                FecAplicacionLayoutBanorte.Value = System.DateTime.Today;
                FecIniLayout.Value = System.DateTime.Today;
                FecFinLayout.Value = System.DateTime.Today;               
                sqlDataSource1.Queries[0].Parameters[0].Value = nominaEmpresaID;
                sqlDataSource1.Fill();
                //lookUpCliente.EditValue = "E00000";
                ChNeto.Visible = true;
                parametros = controlador.GetParametros(rfc);
                layoutControlGroup5.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                layoutControlItem17.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                FecPagoMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                FecIniPeriMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                FecFinPeriMasiv.EditValue = System.DateTime.Today.ToString("dd/MM/yyyy");
                layoutControlGroup6.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                layoutControlItem18.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                //layoutControlItem23.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                //layoutControlItem24.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;
                layoutControlItem28.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;

                // This line of code is generated by Data Source Configuration Wizard
                // Fill a SqlDataSource
                SqlTipoPeri.Fill();

                //Initialize GridControl MasivEMpl
                controlador.ListaEmpleadosNomiMasiv(gridControlNomiMasiv, nominaEmpresaID);
                gridControlNomiMasiv.Visible = true;
                //selectCliente = lookUpCliente.EditValue.ToString();
                //controlador.ListaEmpleadosCaratula(gridControlLayoutBanorte, selectCliente);
                //gridControlLayoutBanorte.Visible = true;

                controlador.ListadoLayoutGenerados(gridControlFactura);
                gridControlFactura.Visible = true;

                controlador.ListaCaratulas(gridControlLayout);
                gridControlLayout.Visible = true;
                //splash.SetWaitFormCaption("Cargando Empleados...");

                splash.CloseWaitForm();
            }
            catch (Exception load)
            {
                splash.CloseWaitForm();
                XtraMessageBox.Show(load.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }


        }

        private void lookUpCliente_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                selectCliente = lookUpCliente.EditValue.ToString();
                controlador.ListaEmpleadosCaratula(gridControlLayoutBanorte, selectCliente);
                if (lookUpCliente.EditValue.ToString() != "E00000")
                {
                    infoCliente = controlador.GetInfoCliente(lookUpCliente.EditValue.ToString());
                }

                string idclte = infoCliente.ID;
                var claves = new List<E.ListaClaveProdServ>();
                claves = controlador.ClavesClientes(selectCliente, claves);
                lookUpClave.Properties.DataSource = claves;
                lookUpClave.Properties.ValueMember = "clave";
                lookUpClave.Properties.DisplayMember = "clave";
                lookUpClave.EditValue = null;

                lookUpTipoPago.EditValue = infoCliente.Metodo_Pago;
                lookUpFormaPago.EditValue = infoCliente.Forma_Pago;
            }
            catch(Exception cliente)
            {

            }
        }

        [Obsolete]
        private void BtnNomiMasiv_click2(object sender, EventArgs e)
        {
            try
            {
                M.ResumenNomina resumenNomina = new M.ResumenNomina();
                splashScreenManager1.ShowWaitForm();
                splashScreenManager1.SetWaitFormCaption("Generando nómina..");
                parametrosNomina = controlador.GetParametros(rfc);
                List<M.Nomina> nominaMasiva = new List<M.Nomina>();
                DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                string fechaAplicacionPeriodo = FecPagoMasiv.EditValue.ToString();
                //fechaAplicacion = Convert.ToDateTime(fecAplicación),
                string fechaIniPeri = FecPagoMasiv.EditValue.ToString();
                string fechaFinPeri = FecFinPeriMasiv.EditValue.ToString();
                string fecha = DateTime.Now.ToString("dd/MM/yyyy");
                DateTime fechaSistema = DateTime.Parse(fecha.Trim());
                DateTime fechaApliPeri = DateTime.Parse(fechaAplicacionPeriodo.Trim());
                DateTime fechaInPer = DateTime.Parse(fechaIniPeri.Trim());
                DateTime fechaFiPer = DateTime.Parse(fechaFinPeri.Trim());
                CultureInfo cul = CultureInfo.CurrentCulture;
                int numSemana = cul.Calendar.GetWeekOfYear(fechaSistema, CalendarWeekRule.FirstDay,
                 DayOfWeek.Monday);
                string anio = cul.Calendar.GetYear(fechaInPer).ToString();
                string mes = cul.Calendar.GetMonth(fechaInPer).ToString();
                int dia = cul.Calendar.GetDayOfMonth(fechaFiPer);               
                string periodo = "";
                //string mesActual = DateTime.Now.Month.ToString();
                int contPeriodo = controlador.ObtieneContPeriodoNomina(nominaEmpresaID, mes, splashScreenManager1);    
                if (contPeriodo == 0 || contPeriodo == 1)
                {
                    contPeriodo++;
                }
                if (Convert.ToInt32(mes) < 10)
                {
                    if (contPeriodo < 10)
                    {
                         periodo = Convert.ToString(anio + "0" + mes + "00" + contPeriodo.ToString());
                    }
                    else
                    {
                         periodo = Convert.ToString(anio + "0" + mes + "0" + contPeriodo.ToString());
                    }

                }
                else
                {
                    if (contPeriodo < 10)
                    {
                         periodo = Convert.ToString(anio + "0" + mes + "00" + contPeriodo.ToString());
                    }
                    else
                    {
                         periodo = Convert.ToString(anio + "0" + mes + "0" + contPeriodo.ToString());
                    }
                }                
                for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                {
                    if (gridViewNomiMasiv.IsRowSelected(i))
                    {
                        ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                        string ing = String.Format("{0:0.00}", ingresosMasiv);
                        ingresosMasiv = Convert.ToDecimal(ing);
                        tipoIngresos = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[4]).ToString();
                        //ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                        ISRMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[6]));
                        rfcEmplMasiv = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[2]).ToString();
                        netoMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[7]));
                        nombreEmpleado = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[1]).ToString();
                        IDEmpl = Convert.ToInt32(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[0]));

                        if (ingresosMasiv.Equals(0))
                        {
                            if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                            {
                                splashScreenManager1.CloseWaitForm();
                            }
                            var resultado = XtraMessageBox.Show("El empleado " + nombreEmpleado + " No tiene    ingresos. ¿Desea continuar?", "Mensaje", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                            if (resultado.Equals(DialogResult.No))
                            {
                                return;
                            }
                            else
                            {
                                splashScreenManager1.ShowWaitForm();
                            }
                        }

                        if (ingresosMasiv > 0)
                        {
                            nominaMasiva.Add(new M.Nomina
                            {
                                nominanumEmpl = IDEmpl,
                                nominanombreEmpleado = nombreEmpleado,
                                nominaRFCEmpleado = rfcEmplMasiv,
                                nominaPeriodidicadPago = tipoIngresos,
                                nominaIngresos = ingresosMasiv,
                                nominaIngresosBruto = netoMasiv,
                                nominaISR = ISRMasiv,
                                nominaFechaPago = FechaPago,
                                nominaFechaIniPeri = FechaInicioMasivo,
                                nominaFechaFinPero = FechaFinMasivo,
                                nominaFechaCreacion = DateTime.Now,
                                nominaEstatus = "Generado",
                                nominaEstatusSAT = "",
                                nominaPeriodo = periodo,
                                nominaEmpresa = parametrosNomina.NombreEmpresa,
                                nominaRFCEmpresa = parametrosNomina.RFC,
                                nominaDescripciponError = "",
                                nominaEmpresaNominaID = parametrosNomina.NOMINA_EMPRESA_ID,
                                nominaUsuario = usuarioSistema,
                                ResumenNominaID = parametrosNomina.NombreEmpresa + "_" + periodo,
                            });
                        }
                    }
                }

                if (nominaMasiva.Count.Equals(0))
                {
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }
                    XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    resumenNomina.ResumenNominaID = "Nomina_" + parametrosNomina.NombreEmpresa + "_" + periodo;
                    resumenNomina.ResumenNominaTotalEmpleados = nominaMasiva.Count;
                    resumenNomina.ResumenNominaFechaPago = FechaPago;
                    resumenNomina.ResumenNominaFechaInicioPeri = FechaInicioMasivo;
                    resumenNomina.ResumenNominaFechaFinPeri = FechaFinMasivo;
                    resumenNomina.ResumenNominaEstatus = "Generado";
                    resumenNomina.ResumenNominaEstatusSAT = "";
                    resumenNomina.ResumenNominaPeriodo = periodo;
                    resumenNomina.ResumenNominaEmpresaNombre = parametrosNomina.NombreEmpresa;
                    resumenNomina.ResumenNominaRFCEmpresa = parametros.RFC;
                    resumenNomina.ResumenNominaUsuarioCreacion = usuarioSistema;
                    resumenNomina.ResumenNominaNominaEmpresaID = nominaEmpresaID;

                    foreach (var item in nominaMasiva)
                    {
                        if (resumenNomina.ResumenNominaTotalIngresos == null || resumenNomina.ResumenNominaTotalIngresosBruto ==null || resumenNomina.ResumenNominaTotalISR == null)
                        {
                            resumenNomina.ResumenNominaTotalIngresos = item.nominaIngresos;
                            resumenNomina.ResumenNominaTotalIngresosBruto = item.nominaIngresosBruto;
                            resumenNomina.ResumenNominaTotalISR = item.nominaISR;
                        }
                        else
                        {
                            resumenNomina.ResumenNominaTotalIngresos += item.nominaIngresos;
                            resumenNomina.ResumenNominaTotalIngresosBruto += item.nominaIngresosBruto;
                            resumenNomina.ResumenNominaTotalISR += item.nominaISR;
                        }

                    }
                    controlador.InsertaResumenNomina(resumenNomina);
                    controlador.InsertaNominaMasiva(nominaMasiva);
                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                    {
                        splashScreenManager1.CloseWaitForm();
                    }
                    sqlDataSource2.Fill();
                    XtraMessageBox.Show("¡Nómina Generada con Éxito!", "Generar Nómina", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //controlador.GenXmlMasivo(empleadoMasivo, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago, destinoCorreo, enviaCorreo, correoCliente, pacTimbrado, ambiente);                
                }
            } catch(Exception nomiMasiv2)
            {
                if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                {
                    splashScreenManager1.CloseWaitForm();
                }
                XtraMessageBox.Show(nomiMasiv2.Message + "\nError modulo Nomina: BtnGenNomiMasiv2", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [Obsolete]
        private void BtnNomiMasiv_Click(object sender, EventArgs e)
        {
            try
            {
                if (pacTimbrado.Equals("NT") && ambiente.Equals("Pruebas"))
                {
                    XtraMessageBox.Show("El timbrado de pruebas no esta disponible para NT-LINK", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }else if (pacTimbrado.Equals("SL") && ambiente.Equals("Pruebas"))
                {
                    var respuestaTimbre = XtraMessageBox.Show("El PAC de timbrado de Solución Factible esta configurado en ambiente de pruebas.\n¿Desea continuar?\n(Si no es el ambiente correcto, favor de notificar a su adminsitrador de sistema.)", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (respuestaTimbre.Equals(DialogResult.No))
                    {
                        XtraMessageBox.Show("Proceso de timbrado cancelado.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                bool chCorreo = false;
                if (chBoxClte.Checked.Equals(true) || chBoxCorreoEmpleado.Checked.Equals(true))
                {
                    chCorreo = true;
                }
                if (chCorreo.Equals(false))
                {
                    var respuesta = XtraMessageBox.Show("No se ha seleccionado metodo de envio para los recibos generados. ¿Desea continuar sin enviar archivos por correo?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (respuesta.Equals(DialogResult.Yes))
                    {
                        var empleadoMasivo = new List<E.Empleado>();
                        E.Empleado[] emplMasiv = null;
                        for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                        {
                            if (gridViewNomiMasiv.IsRowSelected(i))
                            {
                                ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                                string ing = String.Format("{0:0.00}", ingresosMasiv);
                                ingresosMasiv = Convert.ToDecimal(ing);
                                tipoIngresos = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[4]).ToString();
                                //ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                                ISRMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[6]));
                                rfcEmplMasiv = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[2]).ToString();
                                netoMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[7]));
                                nombreEmpleado = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[1]).ToString();

                                if (ingresosMasiv.Equals(0))
                                {
                                    if (splashScreenManager1.IsSplashFormVisible.Equals(true))
                                    {
                                        splashScreenManager1.CloseWaitForm();
                                    }
                                var resultado = XtraMessageBox.Show("El empleado " + nombreEmpleado + " No tiene    ingresos. ¿Desea continuar?", "Mensaje", MessageBoxButtons.YesNo,   MessageBoxIcon.Question);

                                    if (resultado.Equals(DialogResult.No))
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        splashScreenManager1.ShowWaitForm();
                                    }
                                }

                                if (ingresosMasiv > 0)
                                {
                                    empleadoMasivo.Add(new E.Empleado
                                    {
                                        Nombre = nombreEmpleado,
                                        RFC = rfcEmplMasiv,
                                        //IngresosBrutos = ingresosMasiv,
                                        IngresosBrutos = netoMasiv,
                                        ISR = ISRMasiv,
                                        //IngresosNetos = netoMasiv,
                                        IngresosNetos = ingresosMasiv,
                                        Periodicidad = tipoIngresos
                                    });
                                    emplMasiv = empleadoMasivo.ToArray();
                                }
                            }
                        }

                        if (empleadoMasivo.Count.Equals(0))
                        {
                            XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            if (ValidaCer().Equals(false))
                            {
                                return;
                            }
                            if (ValidaKey().Equals(false))
                            {
                                return;
                            }

                            DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                            DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                            DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                            controlador.GenXmlMasivo(empleadoMasivo, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago, destinoCorreo, enviaCorreo,correoCliente,pacTimbrado, ambiente);
                            this.CargaTimbresDisponibles();
                        }
                    }
                }
                else
                {
                    if (txtCorreoClte.Text.Equals("") && chBoxClte.Checked.Equals(true))
                    {
                        XtraMessageBox.Show("Por favor, ingrese el correo electronico del cliente.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    correoCliente = txtCorreoClte.Text;
                    var empleadoMasivo = new List<E.Empleado>();
                    E.Empleado[] emplMasiv = null;
                    for (int i = 0; i < gridViewNomiMasiv.RowCount; i++)
                    {
                        if (gridViewNomiMasiv.IsRowSelected(i))
                        {
                            ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                            string ing = String.Format("{0:0.00}", ingresosMasiv);
                            ingresosMasiv = Convert.ToDecimal(ing);
                            tipoIngresos = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[4]).ToString();
                            //ingresosMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[5]));
                            ISRMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[6]));
                            rfcEmplMasiv = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[2]).ToString();
                            netoMasiv = Convert.ToDecimal(gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[7]));
                            nombreEmpleado = gridViewNomiMasiv.GetRowCellValue(i, gridViewNomiMasiv.Columns[1]).ToString();
                            empleadoMasivo.Add(new E.Empleado
                            {
                                Nombre = nombreEmpleado,
                                RFC = rfcEmplMasiv,
                                //IngresosBrutos = ingresosMasiv,
                                IngresosBrutos = netoMasiv,
                                ISR = ISRMasiv,
                                //IngresosNetos = netoMasiv,
                                IngresosNetos = ingresosMasiv,
                                Periodicidad = tipoIngresos
                            });
                            emplMasiv = empleadoMasivo.ToArray();
                        }
                    }

                    if (empleadoMasivo.Count.Equals(0))
                    {
                        XtraMessageBox.Show("Por favor, Seleccione una celda.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        if (ValidaCer().Equals(false))
                        {
                            return;
                        }
                        if (ValidaKey().Equals(false))
                        {
                            return;
                        }
                        DateTime FechaInicioMasivo = Convert.ToDateTime(FecIniPeriMasiv.EditValue.ToString());
                        DateTime FechaFinMasivo = Convert.ToDateTime(FecFinPeriMasiv.EditValue.ToString());
                        DateTime FechaPago = Convert.ToDateTime(FecPagoMasiv.Text);
                        controlador.GenXmlMasivo(empleadoMasivo, splash, empresa, rfc, ip, FechaInicioMasivo, FechaFinMasivo, FechaPago, destinoCorreo, enviaCorreo, correoCliente, pacTimbrado, ambiente);
                        this.CargaTimbresDisponibles();
                    }
                }
            }
            catch (Exception Valmasiv)
            {
                XtraMessageBox.Show(Valmasiv.Message + "\nError modulo Nomina: BtnGenNomiMasiv", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        [Obsolete]
        private void BtnGenNom_Click(object sender, EventArgs e)
        {
            DialogResult result = XtraMessageBox.Show("¿Desea generar y timbrar la nomina de "
                + LookUpEmpl.Text + "?\n(Validar información)"
                , "Confirmacion", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (result.Equals(DialogResult.Yes))
            {
                GeneraXML();
            }
            else
            {
                XtraMessageBox.Show("¡Nomina de " + LookUpEmpl.Text + " no fue generada por cancelacion de usuario!"
                   , "Mensaje" , MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void LeerExcelMasivo()
        {
            Excel.Application excel = new Excel.Application();
            Excel._Workbook libroSemanal = null;
            Excel._Workbook libroQuincenal = null;
            Excel._Workbook libroMensual = null;

            excel.Visible = false;

            libroMensual = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR Salarios.xlsm",
            Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
            Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
            Type.Missing, Type.Missing, Type.Missing, Type.Missing);


        }

        private E.Calculo LeerExcel(decimal ingresos, E.Calculo calc, string periodo)
        {
            calc.IngresosNetos = Math.Round(ingresos, 2);
            periodo = periodo.ToUpper();
            if (periodo.Equals("SEMANAL") || periodo.Equals("02"))
            {
                Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosSemanal.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else if (periodo.Equals("CATORCENAL") || periodo.Equals("03"))
            {
                Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosCatorcenal.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else if (periodo.Equals("QUINCENAL")|| periodo.Equals("04"))
            {
                Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR SalariosQuincenal.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else if (periodo.Equals("MENSUAL")|| periodo.Equals("05"))
            {
                Excel.Application excel = new Excel.Application();
                Excel._Workbook libro = null;
                //Excel._Worksheet hoja = null;
                //Excel.Range rango = null;

                excel.Visible = false;
                libro = excel.Workbooks.Open("C:\\DocAsimilados\\Calculo Inverso ISR Salarios.xlsm",
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing,
                Type.Missing, Type.Missing, Type.Missing, Type.Missing);

                Excel.Worksheet worksheet = (Excel.Worksheet)libro.Sheets["Calculo"];
                //((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Calculo"]).Activate();

                worksheet.Cells[6, 3] = ingresos;

                excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");
                //excel.Run("Hoja1.Inverso");

                //decimal resultado = Convert.ToDecimal(worksheet.Cells[8, 3]);

                var gravado = Math.Round((decimal)(worksheet.Cells[8, 3] as Excel.Range).Value, 2);
                var limInf = Math.Round((decimal)(worksheet.Cells[9, 3] as Excel.Range).Value, 2);
                var ba = Math.Round((decimal)(worksheet.Cells[10, 3] as Excel.Range).Value, 2);
                var tasa = Math.Round((decimal)(worksheet.Cells[11, 3] as Excel.Range).Value, 2);
                var resultado = Math.Round((decimal)(worksheet.Cells[12, 3] as Excel.Range).Value, 2);
                var cuotaFija = Math.Round((decimal)(worksheet.Cells[13, 3] as Excel.Range).Value, 2);
                var isr = Math.Round((decimal)(worksheet.Cells[14, 3] as Excel.Range).Value, 2);
                var sub = Math.Round((decimal)(worksheet.Cells[15, 3] as Excel.Range).Value, 2);

                calc.IngresosBrutos = gravado;
                calc.LimInferior = limInf;
                calc.ExLimInf = ba;
                calc.PerExLimInf = tasa;
                calc.ImpMarg = resultado;
                calc.CF = cuotaFija;
                calc.ISR = isr;
                calc.Sub = sub;

                libro.Save();
                libro.Close();
                excel.UserControl = false;
                excel.Quit();
                Marshal.ReleaseComObject(worksheet);
                Marshal.ReleaseComObject(libro);
                Marshal.ReleaseComObject(excel);
            }
            else
            {
                calc.IngresosBrutos = ingresos;
                calc.LimInferior = 0;
                calc.ExLimInf = 0; 
                calc.PerExLimInf = 0;
                calc.ImpMarg = 0;
                calc.CF = 0;
                calc.ISR = 0;
                calc.Sub = 0;
                calc.IngresosNetos = ingresos;
                XtraMessageBox.Show("Error al momento de generar Caluclo de ingresos Inverso", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return calc;
            }

            return calc;
        }

        private void GenCaratula()
        {
            Excel.Application excel = new Excel.Application();
            Excel._Workbook libro = null;
            Excel._Worksheet hoja = null;
            Excel.Range rango = null;
            excel.Visible = true;

            libro = (Excel._Workbook)excel.Workbooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);
            hoja = (Excel._Worksheet)libro.Worksheets.Add();
            hoja.Name = "Detalle Pagos IAS (CFDI)";
            hoja.Visible = Excel.XlSheetVisibility.xlSheetVisible;
            ((Excel.Worksheet)excel.ActiveWorkbook.Sheets["Hoja1"]).Delete();   //Borramos la hoja que crea en el libro por defecto
        }


    }
}
