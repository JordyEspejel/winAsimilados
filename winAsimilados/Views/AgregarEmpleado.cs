using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using C = winAsimilados.Controller;
using E = winAsimilados.Entities;

namespace winAsimilados.Views
{
    public partial class AgregarEmpleado : Form
    {
        string nombre, CURP, RFC, peri, cuenta, clabe, cve,banco, empresa, idEmpr, numEmpl;

        private void lookUpBanco_EditValueChanged(object sender, EventArgs e)
        {
            TxtCVE.Text = lookUpBanco.EditValue.ToString();
        }

        private void TxtIDProv_EditValueChanged(object sender, EventArgs e)
        {

        }

        C.Controller Controlador = new C.Controller();

        private void lookUpEdit2_EditValueChanged(object sender, EventArgs e)
        {
            //XtraMessageBox.Show("LookUpEdit EditValue = " + (sender as LookUpEdit).EditValue);
            peri = (sender as LookUpEdit).EditValue.ToString();
        }

        public AgregarEmpleado()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //sqlDataSource1.Fill();
            //// This line of code is generated by Data Source Configuration Wizard
            //// Fill a SqlDataSource
            //sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
        }

        private void AgregarEmpleado_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Dispose();
        }

        private void BtnAgregar_Click(object sender, EventArgs e)
        {
            E.Empleado empleado = new E.Empleado();
            nombre = TxtNombreEmpl.Text.ToUpper();
            RFC = TxtRFC.Text.ToUpper();
            CURP = TxtCURP.Text.ToUpper();
            cuenta = TxtCuenta.Text;
            clabe = TxtCLABE.Text;
            banco = lookUpBanco.Text;
            cve = TxtCVE.Text;
            empresa = lookUpEmpresa.Text;
            idEmpr = lookUpEmpresa.EditValue.ToString();
            numEmpl = TxtNumEmpl.Text;

            if (nombre == "")
            {
                XtraMessageBox.Show("El campo Nombre no puede estar vacio", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.Nombre = nombre;
            }

            if (numEmpl.Equals(""))
            {
                XtraMessageBox.Show("El campo # Empleado no puede estar vacio", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.NumEmpl = numEmpl;
            }

            if (RFC == "")
            {
                XtraMessageBox.Show("El campo RFC no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (!RFC.Length.Equals(13))
                {
                    XtraMessageBox.Show("RFC no cumple con el formato correcto, favor de verificar.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    empleado.RFC = RFC.ToUpper();
                }
            }

            if (CURP == "")
            {
                XtraMessageBox.Show("El campo CURP no puede estar vacio", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                if (!CURP.Length.Equals(18))
                {
                    XtraMessageBox.Show("CURP no cumple con el formato correcto, favor de verificar,", "Mesnaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    empleado.CURP = CURP.ToUpper();
                }
            }

            if (peri == null)
            {
                XtraMessageBox.Show("Seleccione tipo de periodicidad.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                empleado.Periodicidad = peri;
            }

            if (cuenta.Equals(""))
            {
                XtraMessageBox.Show("El campo cuenta no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }else if (cuenta.Length < 10)
            {
                XtraMessageBox.Show("Cuenta no cumple con el formato correcto, debe contener al menos 10 digitos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }else if (cuenta.Length > 10)
            {
                XtraMessageBox.Show("Cuenta no cumple con el formato correcto, debe contener máximo 10 dígitos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.cuenta = cuenta;
            }

            if (clabe.Equals(""))
            {
                XtraMessageBox.Show("El campo CLABE no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }else if (clabe.Length < 18)
            {
                XtraMessageBox.Show("CLABE no cumple con el formato correcto, debe contener al menos 18 dígitos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }else if (clabe.Length > 18)
            {
                XtraMessageBox.Show("CLABE no cumple con el formato correcto, debe contener máximo 18 dígitos.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.clabe_bancaria = clabe;
            }

            if (banco.Equals(""))
            {
                XtraMessageBox.Show("El campo bancoEmpleado no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.banco = banco;
            }

            if (cve.Equals(""))
            {
                XtraMessageBox.Show("El campo CVE no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.cve_banco = cve;
            }

            if (empresa.Equals(""))
            {
                XtraMessageBox.Show("El campo Empresa no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.empresa = empresa;
                empleado.idEmpresa = idEmpr;
            }

            if (lookUpTipoPago.Text.Equals("Seleccione"))
            {
                XtraMessageBox.Show("Por favor, Seleccione Tipo Pago.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                empleado.tipoPago = lookUpTipoPago.EditValue.ToString();
            }


            if (empleado.RFC != null && empleado.Nombre != null && empleado.CURP != null && empleado.Periodicidad != null && empleado.cuenta != null && empleado.clabe_bancaria != null && empleado.banco != null && empleado.cve_banco != null && empleado.empresa != null && empleado.idEmpresa != null && empleado.NumEmpl != null)
            {
                //XtraMessageBox.Show("Nombre:" + nombre + "\nRFC:" + RFC + "\nCURP:" + CURP + "\nPeriodicidad:" + peri, "mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);

                if (XtraMessageBox.Show("¿Desea Agregar al empleado?:\n" + empleado.Nombre.ToString()/* + "\n\nRFC:" + empleado.RFC.ToString() + "\n\nCURP:" + empleado.CURP.ToString() + "\n\nPeriodicidad pago:" + lookUpEdit2.Text +*/ + "\n\nFavor de verificar los datos.", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                {
                    Controlador.AgregaEmpleado(empleado);
                }
            }
        }
    }
}
