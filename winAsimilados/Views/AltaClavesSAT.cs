using DevExpress.XtraEditors;
using DevExpress.XtraSplashScreen;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using winAsimilados.ServicioTimbradoProduccion;
using C = winAsimilados.Controller;
using E = winAsimilados.Entities;
namespace winAsimilados.Views
{
    public partial class AltaClavesSAT : Form
    {
        int IDClave;
        string claveTabla;
        bool seleccion = false;
        SplashScreenManager splash;
        C.Controller controlador = new C.Controller();
        E.ClaveProdServClte clave = new E.ClaveProdServClte();
        public AltaClavesSAT(SplashScreenManager splashScreenManager)
        {
            splash = splashScreenManager;
            InitializeComponent();

        }

        private void AltaClavesSAT_Load(object sender, EventArgs e)
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            splash.SetWaitFormCaption("Cargando Catalogo Claves..");
            sqlDataSource1.Fill();
            if (splash.IsSplashFormVisible.Equals(true))
            {
                splash.CloseWaitForm();
            }
        }

        private void textEdit1_EditValueChanged(object sender, EventArgs e)
        {
            this.LlenaTabla();
            this.MuestraCampos();
        }
        private void LlenaTabla()
        {
            try
            {
                string ID = lookUpEmpr.EditValue.ToString();
                controlador.ListaClavesEmpresa(gridControlClave, ID);
                gridControlClave.Visible = true;
            }
            catch (Exception lookup)
            {

            }
        }
        private void MuestraCampos()
        {
            layoutControlGroup3.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            layoutControlbtnAgregar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            layoutControlbtnQuitar.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            layoutControlLookUpClave.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
        }

        private void btnAgregar_Click(object sender, EventArgs e)
        {
            if (lookUpClave.Text.Equals("Seleccione"))
            {
                XtraMessageBox.Show("Por favor seleccione clave.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                string IDClave = lookUpClave.EditValue.ToString();
                string descripcion = lookUpClave.Text;
                clave.IDClte = lookUpEmpr.EditValue.ToString();
                clave.Cliente = lookUpEmpr.Text;
                clave.clave = IDClave;
                clave.descripcion = descripcion;

                if (controlador.InsertaClaveSAT(clave).Equals(true))
                {
                    this.LlenaTabla();
                }
                else
                {
                    XtraMessageBox.Show("¡Error al dar de alta clave al cliente!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnQuitar_Click(object sender, EventArgs e)
        {
            var respuesta = XtraMessageBox.Show("¿Desea eliminar clave ligada al cliente?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (respuesta.Equals(DialogResult.Yes))
            {
                for (int i = 0; i <= gridViewClave.RowCount; i++)
                {
                    if (gridViewClave.IsRowSelected(i))
                    {
                        IDClave = Convert.ToInt32(gridViewClave.GetRowCellValue(i, gridViewClave.Columns[0]));
                        claveTabla = gridViewClave.GetRowCellValue(i, gridViewClave.Columns[3]).ToString();
                        seleccion = true;
                    }
                }

                if (seleccion.Equals(false))
                {
                    XtraMessageBox.Show("Por favor, seleccione una celda", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    var respuesta2 = XtraMessageBox.Show("Desea eliminar la clave " + claveTabla + " del cliente " + lookUpEmpr.Text.ToString(), "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    if (respuesta2.Equals(DialogResult.Yes))
                    {
                        //XtraMessageBox.Show("Entra borrar");
                        if (controlador.EliminaClaveSAT(IDClave).Equals(true))
                        {
                            this.LlenaTabla();
                        }
                        else
                        {
                            XtraMessageBox.Show("¡Error al intentar eliminar clave ligada al cliente!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
            }
        }
    }
}
