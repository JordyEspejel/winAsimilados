using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using C = winAsimilados.Controller;
using E = winAsimilados.Entities;
using V = winAsimilados.Views;
using System.Security.Cryptography.X509Certificates;
using DevExpress.XtraSplashScreen;

namespace winAsimilados.Views
{
    public partial class AgregarEmpresa : Form
    {
        SplashScreenManager splash;
        C.Controller Controlador = new C.Controller();
        E.Empresa Empresa = new E.Empresa();
        E.Parametros Parametros = new E.Parametros();
        string bd = C.Conexion.PerformConnection().Database;
        bool Asimilados = false;
        bool ValRegPat = false;
        bool listadoEmpresas;
        string nombreEmpresa, RFC;
        string calle, municipio, colonia, regimen, recursos, nomina, numInt, numExt, RegPat, puesto;
        string Estado,CodPost;
        string RutaCer, RutaKey, Pass;
        string cuenta;

        private void TxtNomEmpresa_EditValueChanged(object sender, EventArgs e)
        {
            TxtNomEmpresa.Text = TxtNomEmpresa.Text.ToUpper();
            nombreEmpresa = TxtNomEmpresa.Text;
        }

        private void TxtRegPat_EditValueChanged(object sender, EventArgs e)
        {
            TxtRegPat.Text = TxtRegPat.Text.ToUpper();
            RegPat = TxtRegPat.Text;
        }

        private void textEdit7_EditValueChanged(object sender, EventArgs e)
        {
            TxtCalle.Text = TxtCalle.Text.ToUpper();
            calle = TxtCalle.Text;
        }

        private void TxtRFCEmpresa_EditValueChanged(object sender, EventArgs e)
        {
            TxtRFCEmpresa.Text = TxtRFCEmpresa.Text.ToUpper();
            RFC = TxtRFCEmpresa.Text;
        }

        private void LookUpRegFis_EditValueChanged(object sender, EventArgs e)
        {
            regimen = LookUpRegFis.EditValue.ToString();
        }

        private void TxtCuenta_EditValueChanged(object sender, EventArgs e)
        {
            cuenta = TxtCuenta.Text;
        }

        private void ChMostrar_CheckedChanged(object sender, EventArgs e)
        {
            if (ChMostrar.Checked.Equals(true))
            {
                TxtPssw.Properties.UseSystemPasswordChar = false;
            }
            else
            {
                TxtPssw.Properties.UseSystemPasswordChar = true;
            }
        }

        private void chEditNtlink_CheckedChanged(object sender, EventArgs e)
        {
            if (chEditNtlink.Checked.Equals(true))
            {
                txtUsuaNTLINK.Visibility  = DevExpress.XtraLayout.Utils.LayoutVisibility.Always;
            }
            else
            {
                txtUsuaNTLINK.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never;                   
            }
        }

        private void AgregarEmpresa_Load(object sender, EventArgs e)
        {
            chEditNtlink.Checked = true;
            ChAsim.Checked = true;
        }

        public AgregarEmpresa(bool listado, SplashScreenManager screenManager)
        {
            splash = screenManager;
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();

            //XtraMessageBox.Show(listado.ToString());
            listadoEmpresas = listado;
            splash.CloseWaitForm();
        }

        private void BtnAgregarEmpresa_Click(object sender, EventArgs e)
        {
            string newDB = bd;
            nombreEmpresa = TxtNomEmpresa.Text.ToUpper();
            RFC = TxtRFCEmpresa.Text.ToUpper();
            numInt = TxtNumInt.Text;
            numExt = TxtNumExt.Text;
            #region ValidacionCampos
            if (txtCorreo.Text.Equals(""))
            {
                XtraMessageBox.Show("El campo correo no puede estar vacio.", "Usuario", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                Parametros.correo_cliente = txtCorreo.Text;
            }
            if (chEditNtlink.Checked.Equals(true))
            {
                if (txtUsuaNTLINK.Text.Equals(""))
                {
                    XtraMessageBox.Show("El campo usuario no puede estar vacio.", "Usuario", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    Parametros.usuarioNtlink = txtUsuaNTLINK.Text;
                }
            }
            if (nombreEmpresa == "")
            {
                XtraMessageBox.Show("El campo Nombre no puede estar vacio", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
            else
            {
                Empresa.empresa = nombreEmpresa;
                Parametros.NombreEmpresa = nombreEmpresa;
            }

            if (RFC == "")
            {
                XtraMessageBox.Show("El campo RFC no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
            else
            {
                Empresa.RFC = RFC;
                Parametros.RFC = RFC;
            }
            if (Asimilados == true)
            {
                ValRegPat = true;
                RegPat = "";
                Parametros.RegistroPatronal = RegPat;
            }
            else
            {
                ValRegPat = true;
                if (TxtRegPat.Text == "" || TxtRegPat == null)
                {
                    XtraMessageBox.Show("El campo Registro Patronal no puede estar vacío.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    Parametros.RegistroPatronal = RegPat;
                }
            }
            if (LookUpRegFis.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Regimen Fiscal vacío, por favor seleccione una opción.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.REGIMEN = regimen;
            }
            if (LookUpRecu.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Origen Recursos vacío, por favor seleccione una opción", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.ORIGEN_RECURSOS = recursos;
            }
            if (LookUpRiePue.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Riesgo Puesto vacío, por favor seleccione una opción", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.RIESGO_PUESTO = puesto;
            }
            if (LookUpNomi.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Tipo Nómina vacío, por favor seleccione una opción", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.TIPO_NOMINA = nomina;
            }
            if (TxtCalle.Text == "" || TxtCalle.Text == null)
            {
                XtraMessageBox.Show("El campo Calle no puede estar vacío.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.Calle = calle;
            }
            if (numInt == "" || numInt == null)
            {
                numInt = "S/N";
                Parametros.NUM_INT = numInt;
            }
            else
            {
                Parametros.NUM_INT = numInt;
            }
            if (numExt == "" || numExt == null)
            {
                numExt = "S/N";
                Parametros.NUM_EXT = numExt;
            }
            else
            {
                Parametros.NUM_EXT = numExt;
            }
            if (Estados.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Estado vacio, por favor seleccione una opcion.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.ESTADO = Estado;
            }
            if (LookUpMunicipios2.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Municipio vacío, por facor seleccione una opción.", "Mensaje", MessageBoxButtons.OK,MessageBoxIcon.Error);
            }
            else
            {
                Parametros.MUNICIPIO = municipio;
            }
            if (TxtCP.Text == "" || TxtCP.Text == null)
            {
                XtraMessageBox.Show("El campo Código Postal no puede estar vacío.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.CODIGO_POSTAL = CodPost;
            }
            if (LookUpColonia.Text == "Seleccione")
            {
                XtraMessageBox.Show("Campo Colonia vacío, por favor seleccione una opción.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.COLONIA = colonia;
            }
            if (txtCER.Text == "" || txtCER.Text == null)
            {
                XtraMessageBox.Show("Por favor ingrese el archivo CER", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.ARCHIVO_CER = RutaCer;
            }
            if (TxtKey.Text == "" || TxtKey == null)
            {
                XtraMessageBox.Show("Por favor ingrese el archivo KEY", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.ARCHIVO_KEY = RutaKey;
            }
            if (TxtPssw.Text == "" || TxtPssw == null)
            {
                XtraMessageBox.Show("Por favor ingrese la contraseña del archivo Key", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.CLAVE_CERTIFICADO = TxtPssw.Text;
            }

            if (cuenta.Equals(""))
            {
                XtraMessageBox.Show("Campo Cuenta Bancaría no puede estar vacio.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (cuenta.Length < 10)
            {
                XtraMessageBox.Show("Campo Cuenta Bancaría debe tener al menos 10 dígitos", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (cuenta.Length > 10)
            {
                XtraMessageBox.Show("Campo Cuenta Bancaría debe tener máximo 10 dígitos", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                Parametros.cuentaOrigen = cuenta;
            }

            #endregion
            //XtraMessageBox.Show(Empresa.empresa.ToString() + "\n" + Empresa.RFC.ToString() + "\n" + Parametros.RegistroPatronal.ToString () + "\n" +
            //    Parametros.ORIGEN_RECURSOS.ToString() + "\n" + Parametros.RIESGO_PUESTO.ToString() + "\n" + Parametros.TIPO_NOMINA.ToString() + "\n" +
            //    Parametros.Calle.ToString() + "\n" + Parametros.ESTADO.ToString() + "\n" + Parametros.MUNICIPIO.ToString() + "\n" +
            //    Parametros.CODIGO_POSTAL.ToString() + "\n" + Parametros.COLONIA.ToString() + "\n" + Parametros.ARCHIVO_CER.ToString() + "\n" +
            //    Parametros.ARCHIVO_KEY.ToString() + "\n" + Parametros.CLAVE_CERTIFICADO.ToString() + "\n" + ValRegPat.ToString() + "\n" + 
            //    Parametros.FECHA_INICIO_CERTIFICADO.ToString() + "\n" + Parametros.FECHA_VENCIMIENTO_CERTIFICADO.ToString());

            if (Empresa.empresa != null && Empresa.RFC != null && Parametros.RegistroPatronal != null && Parametros.REGIMEN != null && Parametros.ORIGEN_RECURSOS != null
                && Parametros.RIESGO_PUESTO != null && Parametros.TIPO_NOMINA != null && Parametros.Calle != null && Parametros.ESTADO != null && Parametros.MUNICIPIO != null
                && Parametros.CODIGO_POSTAL != null && Parametros.COLONIA != null && Parametros.ARCHIVO_CER != null && Parametros.ARCHIVO_KEY != null
                && Parametros.CLAVE_CERTIFICADO != null && ValRegPat.Equals(true) && Parametros.cuentaOrigen != null)
            {
                if (RFC.Length < 12 || RFC.Length > 13)
                {
                    XtraMessageBox.Show("RFC no cumple con el formato correcto, favor de verificar.", "Mensaje", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                   
                    if (XtraMessageBox.Show("¿Desea Agregar la empresa?:\n" + Empresa.empresa.ToString() + "\n\nRFC:" + Empresa.RFC.ToString() + "\n\nFavor de verificar los datos.", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                    {
                        splashScreenManager1.ShowWaitForm();
                        Controlador.CreaBDEmpresa(bd, Empresa, splashScreenManager1, Parametros);
                    }
                }
            }
            else
            {
                XtraMessageBox.Show("Error en formulario!!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LookUpRecu_EditValueChanged(object sender, EventArgs e)
        {
            //XtraMessageBox.Show("LookUpEdit EditValue = " + (sender as LookUpEdit).EditValue);
            recursos = LookUpRecu.EditValue.ToString();
        }

        private void LookUpRiesPue_EditValueChanged(object sender, EventArgs e)
        {
            //XtraMessageBox.Show("LookUpEdit EditValue = " + (sender as LookUpEdit).EditValue);
            puesto = LookUpRiePue.EditValue.ToString();
        }

        private void LookUpNomi_EditValueChanged(object sender, EventArgs e)
        {
            //XtraMessageBox.Show("LookUpEdit EditValue = " + (sender as LookUpEdit).EditValue);
            nomina = LookUpNomi.EditValue.ToString();
        }

        private void Estados_EditValueChanged(object sender, EventArgs e)
        {
            try
            {       
                var municipios = new List<E.Municipio>();
                //E.Municipio[] Muni = null;
                //XtraMessageBox.Show("LookUpEdit EditValue = " + (sender as LookUpEdit).EditValue + "\nBD:" + bd);
                Estado = Estados.EditValue.ToString();         
                municipios = Controlador.Municipios(bd, Estado, municipios);

                LookUpMunicipios2.Properties.DataSource = municipios;
                LookUpMunicipios2.Properties.KeyMember = "Nombre";
                LookUpMunicipios2.Properties.DisplayMember = "Nombre";
            }
            catch(Exception exc)
            {
                //XtraMessageBox.Show(exc.Message);
            }
        }

        private void LookUpMunicipios_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                municipio = LookUpMunicipios2.EditValue.ToString();
            } catch (Exception ex)
            {

            }
            //XtraMessageBox.Show("LookUpEdit EditValue = " + municipio);
        }

        private void TxtCP_EditValueChanged(object sender, EventArgs e)
        {
            //XtraMessageBox.Show("txt EditValue = " + (sender as TextEdit).EditValue);
            var CP = new List<E.Colonia>();
            CodPost = (sender as TextEdit).EditValue.ToString();

            CP = Controlador.Colonias(bd, CodPost, CP);

            LookUpColonia.Properties.DataSource = CP;
            LookUpColonia.Properties.KeyMember = "Nombre";
            LookUpColonia.Properties.DisplayMember = "Nombre";
            
        }

        private void textEdit1_Properties_Click(object sender, EventArgs e)
        {
            xtraOpenFileDialog1.Title = "Selecciona Archivo CER";
            xtraOpenFileDialog1.Filter = "Archivos Certificado de Seguridad (*.cer;*)|*.cer";
            xtraOpenFileDialog1.FileName = "";
            if (xtraOpenFileDialog1.ShowDialog() == DialogResult.OK)
            {
                RutaCer = xtraOpenFileDialog1.FileName;
                //XtraMessageBox.Show(RutaCer);
                txtCER.Text = RutaCer;
                X509Certificate2 certificate = new X509Certificate2(RutaCer);
                if (certificate != null)
                {
                    TxtSerie.Text = Encoding.Default.GetString(certificate.GetSerialNumber());
                    TxtCerFecIni.Text = certificate.GetEffectiveDateString();
                    TxtCerFecExp.Text = certificate.GetExpirationDateString();
                    TxtCerSubj.Text = certificate.SubjectName.Name;

                    Parametros.NUMERO_CERTIFICADO = TxtSerie.Text;
                    Parametros.FECHA_INICIO_CERTIFICADO = Convert.ToDateTime(TxtCerFecIni.Text);
                    Parametros.FECHA_VENCIMIENTO_CERTIFICADO = Convert.ToDateTime(TxtCerFecExp.Text);
                    Parametros.ASUNTO_CERTIFICADO = TxtCerSubj.Text;
                }
            }
        }

        private void ChAsim_CheckedChanged(object sender, EventArgs e)
        {
            if (ChAsim.Checked == true)
            {
                //XtraMessageBox.Show("Activado");
                LyOutRegPat.ContentVisible = false;
                Asimilados = true;
            }
            else
            {
                //XtraMessageBox.Show("Desactivado");
                LyOutRegPat.ContentVisible = true;
                Asimilados = false;
            }
        }

        private void buttonEdit1_Properties_Click(object sender, EventArgs e)
        {
            xtraOpenFileDialog2.Title = "Selecciona Archivo KEY";
            xtraOpenFileDialog2.Filter = "Archivos KEY (*.key;*)|*.key";
            if (xtraOpenFileDialog2.ShowDialog() == DialogResult.OK)
            {
                RutaKey = xtraOpenFileDialog2.FileName;
                //XtraMessageBox.Show(RutaKey);
                TxtKey.Text = RutaKey;

            }
        }

        private void LookUpColonia_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                colonia = LookUpColonia.EditValue.ToString();
            }
            catch(Exception ex)
            {

            }

            //XtraMessageBox.Show("Colonia = " + colonia);
        }

        private void AgregarEmpresa_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (listadoEmpresas.Equals(true))
            {
                V.ListaEmpresas listaEmpresas = new V.ListaEmpresas();
                listaEmpresas.Show();
            }
            else
            {
                this.Dispose();
            }

        }
    }
}